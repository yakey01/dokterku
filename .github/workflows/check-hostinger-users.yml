name: Check Hostinger Users Authentication

on:
  workflow_dispatch:
    inputs:
      check_users:
        description: 'Users to check (comma-separated)'
        required: false
        default: 'admin,yaya'
        type: string

jobs:
  check-users:
    runs-on: ubuntu-latest
    steps:
      - name: Check Hostinger User Authentication
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            echo "üîç Checking Hostinger user authentication..."
            echo "=========================================="
            
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Get DB credentials from .env
            DB_HOST=$(grep "^DB_HOST=" .env | cut -d'=' -f2)
            DB_USER=$(grep "^DB_USERNAME=" .env | cut -d'=' -f2)
            DB_PASS=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2)
            DB_NAME=$(grep "^DB_DATABASE=" .env | cut -d'=' -f2)
            
            echo "Database: $DB_NAME"
            echo "Host: $DB_HOST"
            echo ""
            
            # Check users table
            echo "üìã Checking Users Table:"
            echo "========================"
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                id, 
                name, 
                username, 
                email, 
                role_id, 
                is_active,
                CASE WHEN password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                LENGTH(password) as password_length,
                created_at
            FROM users 
            WHERE username IN ('admin', 'yaya') 
               OR email LIKE '%admin%' 
               OR email LIKE '%yaya%'
            ORDER BY id;
            " 2>/dev/null || echo "‚ùå Failed to query users table"
            
            echo ""
            echo "üìã Checking Dokters Table:"
            echo "=========================="
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                id, 
                nama_lengkap, 
                username, 
                nik, 
                status_akun, 
                aktif, 
                user_id,
                CASE WHEN password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                LENGTH(password) as password_length
            FROM dokters 
            WHERE username = 'yaya' 
               OR nama_lengkap LIKE '%yaya%'
            ORDER BY id;
            " 2>/dev/null || echo "‚ùå Failed to query dokters table"
            
            echo ""
            echo "üìã Checking Pegawai Table:"
            echo "=========================="
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                id, 
                nama_lengkap, 
                username, 
                nik, 
                jenis_pegawai,
                status_akun, 
                aktif, 
                user_id,
                CASE WHEN password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                LENGTH(password) as password_length
            FROM pegawai 
            WHERE username IN ('admin', 'yaya') 
               OR nama_lengkap LIKE '%admin%' 
               OR nama_lengkap LIKE '%yaya%'
            ORDER BY id;
            " 2>/dev/null || echo "‚ùå Failed to query pegawai table"
            
            echo ""
            echo "üìã Available Roles:"
            echo "=================="
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT id, name, display_name FROM roles ORDER BY id;
            " 2>/dev/null || echo "‚ùå Failed to query roles table"
            
            echo ""
            echo "üîê Password Hash Analysis:"
            echo "=========================="
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                'users' as table_name,
                username as identifier, 
                SUBSTRING(password, 1, 10) as hash_start,
                CASE 
                    WHEN password LIKE '\$2y\$%' THEN 'bcrypt'
                    WHEN password LIKE '\$2a\$%' THEN 'bcrypt'
                    WHEN password LIKE '\$2b\$%' THEN 'bcrypt'
                    ELSE 'unknown'
                END as hash_type
            FROM users 
            WHERE username IN ('admin', 'yaya') AND password IS NOT NULL
            
            UNION ALL
            
            SELECT 
                'dokters' as table_name,
                username as identifier, 
                SUBSTRING(password, 1, 10) as hash_start,
                CASE 
                    WHEN password LIKE '\$2y\$%' THEN 'bcrypt'
                    WHEN password LIKE '\$2a\$%' THEN 'bcrypt'
                    WHEN password LIKE '\$2b\$%' THEN 'bcrypt'
                    ELSE 'unknown'
                END as hash_type
            FROM dokters 
            WHERE username = 'yaya' AND password IS NOT NULL
            
            UNION ALL
            
            SELECT 
                'pegawai' as table_name,
                username as identifier, 
                SUBSTRING(password, 1, 10) as hash_start,
                CASE 
                    WHEN password LIKE '\$2y\$%' THEN 'bcrypt'
                    WHEN password LIKE '\$2a\$%' THEN 'bcrypt'
                    WHEN password LIKE '\$2b\$%' THEN 'bcrypt'
                    ELSE 'unknown'
                END as hash_type
            FROM pegawai 
            WHERE username IN ('admin', 'yaya') AND password IS NOT NULL;
            " 2>/dev/null || echo "‚ùå Failed to analyze password hashes"
            
            echo ""
            echo "üåê Testing Login URLs:"
            echo "====================="
            echo "Login URL: https://dokterkuklinik.com/login"
            echo "Unified Login: https://dokterkuklinik.com/unified-login"
            
            # Test if login page is accessible
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/login || echo "000")
            echo "Login page status: HTTP $response"
            
            echo ""
            echo "‚úÖ User authentication check completed"