name: üöÄ Quick Test Migration

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test migration'
        required: true
        default: 'dry-run'
        type: choice
        options:
          - dry-run
          - pending-check
          - single-migration
          - test-rollback
      migration_file:
        description: 'Specific migration file (for single-migration only)'
        required: false
        type: string
      verbose:
        description: 'Enable verbose output'
        required: false
        default: false
        type: boolean

env:
  HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
  HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
  HOSTINGER_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
  DEPLOY_PATH: ${{ secrets.HOSTINGER_DEPLOY_PATH }}

jobs:
  quick-test-migrate:
    name: üß™ Quick Test Migration
    runs-on: ubuntu-latest
    
    steps:
      - name: Install sshpass
        run: |
          echo "üîß Installing sshpass..."
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Debug Environment Variables
        run: |
          set -x
          echo "üîç Environment Variable Verification"
          echo "===================================="
          echo "HOSTINGER_HOST: ${HOSTINGER_HOST:-'NOT_SET'}"
          echo "HOSTINGER_USERNAME: ${HOSTINGER_USERNAME:-'NOT_SET'}"
          echo "DEPLOY_PATH: ${DEPLOY_PATH:-'NOT_SET'}"
          echo "Password set: $([ -n "${HOSTINGER_PASSWORD}" ] && echo 'YES' || echo 'NO')"
          echo "Password length: ${#HOSTINGER_PASSWORD}"
          echo ""
          
          # Check if all required variables are set
          if [ -z "${HOSTINGER_HOST}" ]; then
            echo "‚ùå HOSTINGER_HOST is not set!"
            exit 1
          fi
          if [ -z "${HOSTINGER_USERNAME}" ]; then
            echo "‚ùå HOSTINGER_USERNAME is not set!"
            exit 1
          fi
          if [ -z "${HOSTINGER_PASSWORD}" ]; then
            echo "‚ùå HOSTINGER_PASSWORD is not set!"
            exit 1
          fi
          if [ -z "${DEPLOY_PATH}" ]; then
            echo "‚ùå DEPLOY_PATH is not set!"
            exit 1
          fi
          
          echo "‚úÖ All environment variables are set"

      - name: Configure SSH
        run: |
          set -x
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "  LogLevel DEBUG3" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          echo "SSH config created:"
          cat ~/.ssh/config

      - name: Test network connectivity
        run: |
          set -x
          echo "üåê Testing network connectivity first..."
          echo "======================================="
          
          # Test basic connectivity
          echo "Testing ping to host..."
          ping -c 3 "${HOSTINGER_HOST}" || echo "Ping failed - may be blocked"
          
          echo "Testing telnet to SSH port..."
          timeout 10 bash -c "</dev/tcp/${HOSTINGER_HOST}/65002" && echo "Port 65002 is open" || echo "Port 65002 connection failed"
          
          echo "Testing with nc (netcat)..."
          nc -zv "${HOSTINGER_HOST}" 65002 || echo "nc connection to port 65002 failed"

      - name: Check server connection
        run: |
          set -x
          echo "üîç Testing SSH connection to Hostinger..."
          echo "=========================================="
          echo "Host: ${HOSTINGER_HOST}"
          echo "Username: ${HOSTINGER_USERNAME}"
          echo "Deploy Path: ${DEPLOY_PATH}"
          echo "Password length: ${#HOSTINGER_PASSWORD}"
          echo ""
          
          # First attempt with maximum verbosity
          echo "Attempting SSH connection with triple verbose output..."
          echo "Command: sshpass -p '[MASKED]' ssh -vvv -p 65002 -o ConnectTimeout=10 -o BatchMode=no '${HOSTINGER_USERNAME}@${HOSTINGER_HOST}' 'echo Connection successful && cd ${DEPLOY_PATH} && pwd'"
          echo ""
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -vvv -p 65002 -o ConnectTimeout=10 -o BatchMode=no \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "echo 'Connection successful!' && cd ${DEPLOY_PATH} && pwd" || {
              echo ""
              echo "‚ùå SSH connection failed with exit code $?"
              echo "üîç Debugging information:"
              echo "- Host: ${HOSTINGER_HOST}"
              echo "- Port: 65002"
              echo "- Username: ${HOSTINGER_USERNAME}"
              echo "- Password length: ${#HOSTINGER_PASSWORD}"
              echo ""
              echo "üîß Possible issues:"
              echo "1. Incorrect credentials"
              echo "2. SSH port blocked or wrong"
              echo "3. Server not allowing password authentication"
              echo "4. Firewall blocking GitHub Actions IPs"
              echo ""
              exit 1
            }

      - name: Check current migration status
        run: |
          echo "üìä Current migration status:"
          echo "============================"
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:status --env=production"

      - name: Dry Run Test
        if: github.event.inputs.test_type == 'dry-run'
        run: |
          echo "üß™ Running migration dry-run test..."
          echo "===================================="
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate --pretend --force --env=production"
          
          echo ""
          echo "‚úÖ Dry-run completed - No actual changes made"

      - name: Check Pending Migrations
        if: github.event.inputs.test_type == 'pending-check'
        run: |
          echo "üîç Checking for pending migrations..."
          echo "====================================="
          
          PENDING=$(sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:status --env=production | grep -c 'Pending' || true")
          
          if [ "$PENDING" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $PENDING pending migration(s)"
            echo ""
            echo "Pending migrations:"
            sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
              "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
              "cd ${DEPLOY_PATH} && php artisan migrate:status --env=production | grep 'Pending'"
          else
            echo "‚úÖ No pending migrations found"
          fi

      - name: Test Single Migration
        if: github.event.inputs.test_type == 'single-migration' && github.event.inputs.migration_file != ''
        run: |
          echo "üß™ Testing single migration: ${{ github.event.inputs.migration_file }}"
          echo "========================================================"
          
          # First check if migration exists
          echo "Checking if migration file exists..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && ls -la database/migrations/*${{ github.event.inputs.migration_file }}*" || {
              echo "‚ùå Migration file not found!"
              exit 1
            }
          
          # Show what the migration would do
          echo ""
          echo "Migration preview (--pretend):"
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate --path=database/migrations/*${{ github.event.inputs.migration_file }}* --pretend --force --env=production"
          
          echo ""
          echo "‚úÖ Single migration test completed (dry-run mode)"

      - name: Test Rollback Simulation
        if: github.event.inputs.test_type == 'test-rollback'
        run: |
          echo "üß™ Testing rollback simulation..."
          echo "================================="
          
          # Show last batch info
          echo "Last migration batch info:"
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:status --env=production | tail -10"
          
          # Simulate rollback
          echo ""
          echo "Rollback preview (--pretend):"
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:rollback --pretend --force --env=production"
          
          echo ""
          echo "‚úÖ Rollback test completed (no actual rollback performed)"

      - name: Verbose Database Info
        if: github.event.inputs.verbose == 'true'
        run: |
          echo "üìä Verbose Database Information"
          echo "==============================="
          
          echo "Database tables:"
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan db:show"
          
          echo ""
          echo "Migration table contents (last 10):"
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan tinker --execute=\"\\DB::table('migrations')->orderBy('id', 'desc')->limit(10)->get()->each(function(\\\$m) { echo \\\$m->migration . ' (Batch: ' . \\\$m->batch . ')' . PHP_EOL; });\""

      - name: Test Summary
        if: always()
        run: |
          echo "üß™ Quick Test Migration Summary"
          echo "==============================="
          echo "‚úÖ Server: ${HOSTINGER_HOST}"
          echo "‚úÖ Path: ${DEPLOY_PATH}"
          echo "‚úÖ Test Type: ${{ github.event.inputs.test_type }}"
          echo "‚úÖ Timestamp: $(date)"
          echo ""
          echo "üí° This was a TEST run - no actual migrations were executed"
          echo "üîí All operations were performed in read-only or pretend mode"
          echo ""
          echo "üìù Next steps:"
          echo "   - Review the output above"
          echo "   - If everything looks good, run the actual migration workflow"
          echo "   - Use 'hostinger-migrate.yml' for real migrations"