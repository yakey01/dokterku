name: Enhanced Development Deploy

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      deploy_database:
        description: 'Deploy database changes'
        required: false
        default: true
        type: boolean

env:
  PHP_VERSION: 8.3
  NODE_VERSION: 20

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Setup environment
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing

      - name: Create SQLite database
        run: |
          mkdir -p database
          touch database/testing.sqlite

      - name: Run migrations
        run: php artisan migrate --env=testing --force

      - name: Run tests
        run: ./vendor/bin/pest --coverage

  build:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build production assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: public/build/
          retention-days: 7

  deploy:
    name: Deploy to Hostinger
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://dokterkuklinik.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets
          path: public/build/

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --ignore-platform-reqs

      - name: Prepare deployment package
        run: |
          # Create deployment archive
          tar -czf deployment.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='.github' \
            --exclude='*.md' \
            --exclude='.env*' \
            .

      - name: Deploy to Hostinger
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            set -e
            
            echo "🚀 Starting enhanced deployment..."
            
            # Define paths
            PROJECT_PATH="/home/u454362045/domains/dokterkuklinik.com/public_html"
            BACKUP_PATH="/home/u454362045/backups/$(date +%Y%m%d_%H%M%S)"
            
            # Create backup
            echo "📦 Creating backup..."
            mkdir -p $BACKUP_PATH
            cp -r $PROJECT_PATH/app $BACKUP_PATH/ 2>/dev/null || true
            cp -r $PROJECT_PATH/database $BACKUP_PATH/ 2>/dev/null || true
            cp $PROJECT_PATH/.env $BACKUP_PATH/ 2>/dev/null || true
            
            cd $PROJECT_PATH
            
            # Git pull with error handling
            echo "📥 Pulling latest changes..."
            git stash push -m "Auto-stash before deployment" || true
            git pull origin main || {
              echo "❌ Git pull failed, checking status..."
              git status
              git fetch origin
              git reset --hard origin/main
            }
            
            # Handle vendor directory (upload if missing)
            if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
              echo "⚠️ Vendor missing, will need manual upload"
              echo "VENDOR_MISSING=true" >> deployment.log
            else
              echo "📦 Installing/updating Composer dependencies..."
              composer install --no-dev --optimize-autoloader --ignore-platform-reqs --no-scripts || {
                echo "⚠️ Composer install failed, using existing vendor"
              }
            fi
            
            # Database operations
            if [ "${{ github.event.inputs.deploy_database }}" = "true" ] || [ "${{ github.event.inputs.deploy_database }}" = "" ]; then
              echo "🗄️ Running database operations..."
              
              # Backup current database
              cp database/database.sqlite $BACKUP_PATH/database_backup.sqlite 2>/dev/null || true
              
              # Run migrations
              php artisan migrate --force || {
                echo "❌ Migration failed, rolling back..."
                cp $BACKUP_PATH/database_backup.sqlite database/database.sqlite
                exit 1
              }
            fi
            
            # Asset handling
            echo "🎨 Handling assets..."
            if [ ! -d "public/build" ] || [ ! -f "public/build/manifest.json" ]; then
              echo "⚠️ Build assets missing, creating placeholder..."
              mkdir -p public/build
              echo '{"resources/css/app.css":{"file":"assets/app.css"},"resources/js/app.js":{"file":"assets/app.js"}}' > public/build/manifest.json
            fi
            
            # Clear caches
            echo "🧹 Clearing caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            php artisan filament:clear-cached-components
            
            # Optimize for production
            echo "⚡ Optimizing for production..."
            php artisan config:cache
            php artisan route:cache
            # Skip view:cache if heroicon issues exist
            php artisan view:cache 2>/dev/null || echo "⚠️ View cache skipped due to component issues"
            
            # Set permissions
            echo "🔐 Setting permissions..."
            chmod -R 755 storage bootstrap/cache
            chmod 644 .env
            
            # Health check
            echo "🏥 Running health check..."
            php artisan --version
            curl -f -s -o /dev/null https://dokterkuklinik.com/login || {
              echo "❌ Health check failed"
              exit 1
            }
            
            # Cleanup old backups (keep last 5)
            echo "🧹 Cleanup old backups..."
            cd /home/u454362045/backups
            ls -t | tail -n +6 | xargs -r rm -rf
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is live at: https://dokterkuklinik.com"
            echo "📊 Admin Dashboard: https://dokterkuklinik.com/admin"
            echo "💼 Manajer Panel: https://dokterkuklinik.com/manajer"
            echo "💰 Bendahara Panel: https://dokterkuklinik.com/bendahara"

      - name: Upload build to server (fallback)
        if: failure()
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "public/build/*"
          target: "/home/u454362045/domains/dokterkuklinik.com/public_html/"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "🌐 Site: https://dokterkuklinik.com"
          
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and try again."