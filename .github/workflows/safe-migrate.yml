name: Safe Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      backup_before:
        description: 'Create database backup before migration'
        required: true
        type: boolean
        default: true
      dry_run:
        description: 'Dry run mode (show migrations without executing)'
        required: true
        type: boolean
        default: false

jobs:
  safe-migrate:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "SSH_HOST=${{ secrets.HOST }}" >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.SSH_PORT }}" >> $GITHUB_ENV
            echo "APP_PATH=domains/dokterkuklinik.com/public_html/dokterku" >> $GITHUB_ENV
          else
            echo "SSH_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.STAGING_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.STAGING_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.STAGING_SSH_PORT }}" >> $GITHUB_ENV
            echo "APP_PATH=domains/staging.dokterkuklinik.com/public_html" >> $GITHUB_ENV
          fi

      - name: Pre-migration checks and backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            set -e
            
            cd "${{ env.APP_PATH }}"
            
            echo "üîç Pre-migration checks for ${{ github.event.inputs.environment }}..."
            
            # Check Laravel application status
            php artisan --version
            
            # Check database connection
            php artisan migrate:status || {
                echo "‚ùå Cannot connect to database"
                exit 1
            }
            
            echo "üìä Current migration status:"
            php artisan migrate:status
            
            # Create database backup if requested
            if [ "${{ github.event.inputs.backup_before }}" = "true" ]; then
                echo "üíæ Creating database backup..."
                BACKUP_FILE="database_backup_$(date +%Y%m%d_%H%M%S).sql"
                
                # MySQL backup (adjust for your database type)
                # mysqldump -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE > "/tmp/$BACKUP_FILE"
                
                # SQLite backup
                if [ -f database/database.sqlite ]; then
                    cp database/database.sqlite "/tmp/database_backup_$(date +%Y%m%d_%H%M%S).sqlite"
                    echo "‚úÖ SQLite database backed up"
                fi
                
                echo "‚úÖ Database backup created: $BACKUP_FILE"
            fi

      - name: Show pending migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            cd "${{ env.APP_PATH }}"
            
            echo "üìã Pending migrations:"
            php artisan migrate:status | grep "Pending" || echo "No pending migrations"

      - name: Execute migrations
        if: github.event.inputs.dry_run == 'false'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            set -e
            
            cd "${{ env.APP_PATH }}"
            
            echo "üöÄ Executing migrations on ${{ github.event.inputs.environment }}..."
            
            # Put application in maintenance mode for production
            if [ "${{ github.event.inputs.environment }}" = "production" ]; then
                echo "üîí Enabling maintenance mode..."
                php artisan down --refresh=15 --secret="${{ secrets.MAINTENANCE_SECRET }}"
            fi
            
            # Function to handle errors and restore
            handle_migration_error() {
                echo "‚ùå Migration failed!"
                
                if [ "${{ github.event.inputs.environment }}" = "production" ]; then
                    echo "üîì Disabling maintenance mode due to error..."
                    php artisan up
                fi
                
                if [ "${{ github.event.inputs.backup_before }}" = "true" ]; then
                    echo "üîÑ Consider restoring from backup manually"
                    ls -la /tmp/database_backup_*
                fi
                
                exit 1
            }
            
            # Set error trap
            trap handle_migration_error ERR
            
            # Execute migrations
            php artisan migrate --force
            
            echo "üßπ Clearing caches after migration..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Disable maintenance mode for production
            if [ "${{ github.event.inputs.environment }}" = "production" ]; then
                echo "üîì Disabling maintenance mode..."
                php artisan up
            fi
            
            echo "‚úÖ Migrations completed successfully!"

      - name: Post-migration verification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            cd "${{ env.APP_PATH }}"
            
            echo "üîç Post-migration verification..."
            
            # Check migration status
            echo "üìä Final migration status:"
            php artisan migrate:status
            
            # Check application health
            if [ "${{ github.event.inputs.environment }}" = "production" ]; then
                HEALTH_URL="https://dokterkuklinik.com"
            else
                HEALTH_URL="https://staging.dokterkuklinik.com"
            fi
            
            response=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")
            
            if [ "$response" = "200" ]; then
                echo "‚úÖ Application is responding correctly (HTTP $response)"
            else
                echo "‚ö†Ô∏è Application returned HTTP $response"
                echo "üîç Checking Laravel logs..."
                tail -20 storage/logs/laravel.log || echo "No logs found"
            fi
            
            echo "‚úÖ Migration verification completed!"

      - name: Notify migration completion
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const environment = '${{ github.event.inputs.environment }}';
            const dryRun = '${{ github.event.inputs.dry_run }}';
            
            let emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            let action = dryRun === 'true' ? 'Migration dry run' : 'Migration';
            
            console.log(`${emoji} ${action} ${status} on ${environment} environment`);
            
            // Optional: Create an issue or send notification
            // You can extend this to create GitHub issues for failed migrations