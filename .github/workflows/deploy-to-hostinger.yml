name: Deploy to Hostinger

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"
  APP_DIR: "domains/dokterkuklinik.com/public_html/dokterku"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-progress --no-interaction

      - name: Setup test environment
        run: |
          cp .env.example .env
          php artisan key:generate
          touch database/database.sqlite
          
      - name: Configure SQLite for testing
        run: |
          echo "# Override database config for CI testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=$(pwd)/database/database.sqlite" >> .env
          echo "CACHE_STORE=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env

      - name: Run tests
        run: |
          php artisan config:clear
          php artisan migrate --force
          # Add your test commands here
          # php artisan test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-build-

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Setup minimal environment for asset publishing
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Publish Filament assets
        run: php artisan vendor:publish --tag=filament-assets --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Deploy to Hostinger
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 300s
          command_timeout: 30s
          script: |
            set -e  # Exit on any error
            
            echo "🚀 Starting deployment to Hostinger..."
            echo "📅 Deployment started at: $(date)"
            
            # Debug: Show current user and working directory
            echo "🔍 Debug Information:"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "Home directory: $HOME"
            
            # Debug: List available directories
            echo "📁 Available directories:"
            ls -la
            
            # Use APP_DIR from environment variable
            APP_DIR="${{ env.APP_DIR }}"
            echo "🎯 Using deployment directory from environment: $APP_DIR"
            
            # Fallback to common paths if APP_DIR is not set
            if [ -z "$APP_DIR" ]; then
                echo "⚠️ APP_DIR not set, trying common Hostinger paths..."
                POSSIBLE_PATHS=(
                    "domains/dokterkuklinik.com/public_html/dokterku"
                    "public_html/dokterku"
                    "htdocs/dokterku"
                    "$HOME/domains/dokterkuklinik.com/public_html/dokterku"
                    "$HOME/public_html/dokterku"
                )
                
                for path in "${POSSIBLE_PATHS[@]}"; do
                    echo "🧪 Trying path: $path"
                    parent_dir=$(dirname "$path")
                    if [ -d "$parent_dir" ] || mkdir -p "$parent_dir" 2>/dev/null; then
                        echo "✅ Found/created parent directory: $parent_dir"
                        APP_DIR="$path"
                        break
                    else
                        echo "❌ Cannot access/create: $parent_dir"
                    fi
                done
                
                if [ -z "$APP_DIR" ]; then
                    echo "❌ Could not find suitable deployment path"
                    echo "🔍 Available directories from root:"
                    find . -maxdepth 3 -type d -name "*html*" 2>/dev/null || echo "No public_html directories found"
                    exit 1
                fi
            fi
            
            BACKUP_DIR="/tmp/dokterku-backup-$(date +%Y%m%d_%H%M%S)"
            
            echo "🎯 Selected deployment directory: $APP_DIR"
            
            # Function to handle errors
            handle_error() {
                echo "❌ Error occurred during deployment!"
                echo "🔄 Attempting to restore from backup if available..."
                if [ -d "$BACKUP_DIR" ]; then
                    echo "📁 Ensuring app directory exists for restore..."
                    mkdir -p "$APP_DIR"
                    cd "$BACKUP_DIR"
                    rsync -av --exclude='.env' --exclude='storage/app' --exclude='storage/logs' . "$APP_DIR/"
                    echo "✅ Backup restored"
                fi
                exit 1
            }
            
            # Set error trap
            trap handle_error ERR
            
            # Ensure app directory exists
            echo "📁 Ensuring app directory exists..."
            echo "🔨 Running: mkdir -p \"$APP_DIR\""
            mkdir -p "$APP_DIR" 2>&1 || {
                echo "❌ mkdir failed with exit code: $?"
                echo "🔍 Checking parent directories:"
                ls -la domains/ 2>/dev/null || echo "domains/ directory not found"
                ls -la domains/dokterkuklinik.com/ 2>/dev/null || echo "domains/dokterkuklinik.com/ directory not found"
                ls -la domains/dokterkuklinik.com/public_html/ 2>/dev/null || echo "domains/dokterkuklinik.com/public_html/ directory not found"
                exit 1
            }
            
            # Verify directory was created and is accessible
            echo "🔍 Checking if directory exists: $APP_DIR"
            if [ ! -d "$APP_DIR" ]; then
                echo "❌ Directory does not exist after mkdir: $APP_DIR"
                echo "🔍 Listing parent directory contents:"
                ls -la "$(dirname "$APP_DIR")" 2>/dev/null || echo "Parent directory not accessible"
                exit 1
            fi
            
            echo "✅ App directory verified: $APP_DIR"
            echo "🔍 Directory permissions:"
            ls -ld "$APP_DIR"
            
            # Navigate to app directory
            echo "🚶 Changing to app directory: $APP_DIR"
            cd "$APP_DIR" || { 
                echo "❌ Cannot access app directory: $APP_DIR"
                echo "🔍 Final directory check:"
                ls -ld "$APP_DIR" 2>/dev/null || echo "Directory not accessible for listing"
                exit 1
            }
            
            echo "💾 Creating backup..."
            mkdir -p "$BACKUP_DIR"
            rsync -av --exclude='.git' --exclude='node_modules' --exclude='vendor' . "$BACKUP_DIR/"
            
            echo "📥 Pulling latest changes..."
            
            # Initialize git repository if it doesn't exist
            if [ ! -d ".git" ]; then
                echo "🔧 Initializing git repository..."
                git init
                git remote add origin https://github.com/yakey01/klinik-app.git
            fi
            
            # Ensure we have the latest from origin
            git stash push -m "Auto-stash before deployment $(date)" 2>/dev/null || echo "No changes to stash"
            git fetch origin main
            git reset --hard origin/main
            
            echo "📦 Installing Composer dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
            
            echo "🔧 Running Laravel setup..."
            php artisan package:discover --ansi
            
            # Check if .env exists, create from example if not
            if [ ! -f .env ]; then
                echo "🔧 Creating .env from example..."
                cp .env.example .env
                php artisan key:generate --force
            fi
            
            echo "🗄️ Running database operations..."
            php artisan migrate --force
            
            # Optional: Run seeders if needed (uncomment next line)
            # php artisan db:seed --force
            
            echo "🧹 Optimizing application..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan filament:cache-components
            
            echo "🔐 Setting permissions..."
            find storage -type f -exec chmod 644 {} \;
            find storage -type d -exec chmod 755 {} \;
            find bootstrap/cache -type f -exec chmod 644 {} \;
            find bootstrap/cache -type d -exec chmod 755 {} \;
            
            # Clean up old backups (keep only last 5)
            find /tmp -name "dokterku-backup-*" -type d -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            
            echo "✅ Deployment completed successfully!"
            echo "📅 Deployment finished at: $(date)"
            echo "🌐 Your application is now live at: https://dokterkuklinik.com"
            echo "💾 Backup stored at: $BACKUP_DIR"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "🔍 Running post-deployment health check..."
            
            # Check if the application is responding
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com || echo "000")
            
            if [ "$response" = "200" ]; then
                echo "✅ Application is responding correctly (HTTP $response)"
            else
                echo "⚠️ Application returned HTTP $response"
                echo "🔍 Checking Laravel logs..."
                tail -20 domains/dokterkuklinik.com/public_html/dokterku/storage/logs/laravel.log || echo "No logs found"
            fi

      - name: Notify deployment status
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "📊 Deployment Summary"
            echo "===================="
            echo "Repository: ${{ github.repository }}"
            echo "Commit: ${{ github.sha }}"
            echo "Author: ${{ github.actor }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Workflow: ${{ github.workflow }}"
            echo "Status: ${{ job.status }}"
            echo "Date: $(date)"
            
            # Optional: Send to Discord/Slack webhook if configured
            # if [ ! -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            #   curl -H "Content-Type: application/json" \
            #        -d '{"content":"🚀 Deployment completed for Dokterku App"}' \
            #        "${{ secrets.DISCORD_WEBHOOK }}"
            # fi
