name: Deploy to Hostinger

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"
  APP_DIR: "domains/dokterkuklinik.com/public_html/dokterku"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-progress --no-interaction

      - name: Setup test environment
        run: |
          cp .env.example .env
          php artisan key:generate
          touch database/database.sqlite
          
      - name: Configure SQLite for testing
        run: |
          echo "# Override database config for CI testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env
          echo "CACHE_STORE=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env

      - name: Prepare test database
        run: |
          # Remove any existing SQLite database files
          rm -f database/database.sqlite
          rm -f database/testing.sqlite
          
          # Clear Laravel caches
          php artisan config:clear
          php artisan cache:clear
          
          # Use migrate:fresh to ensure clean database state
          php artisan migrate:fresh --force

      - name: Run tests
        run: |
          # Add your test commands here when ready
          echo "‚úÖ Database prepared for testing"
          echo "üß™ Tests would run here: php artisan test"
          # php artisan test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-build-

      - name: Configure Composer authentication for GitHub
        run: composer config --global github-oauth.github.com ${{ secrets.GITHUB_TOKEN }}

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Setup minimal environment for asset publishing
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Publish Filament assets
        run: php artisan vendor:publish --tag=filament-assets --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Deploy to Hostinger
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 300s
          command_timeout: 30s
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment to Hostinger..."
            echo "üìÖ Deployment started at: $(date)"
            
            # Debug: Show current user and working directory
            echo "üîç Debug Information:"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "Home directory: $HOME"
            
            # Debug: Show full directory structure
            echo "üìÅ Directory structure from home:"
            cd $HOME
            find . -maxdepth 3 -type d -name "*html*" -o -name "*www*" -o -name "*htdocs*" 2>/dev/null | head -20 || echo "No web directories found"
            
            # Show current location
            echo "üìç Current location contents:"
            ls -la
            
            # Use APP_DIR from environment variable with validation
            RAW_APP_DIR="${{ env.APP_DIR }}"
            echo "üîç DEBUG: Raw APP_DIR from environment: '$RAW_APP_DIR'"
            
            # Determine correct base path based on what exists
            APP_DIR=""
            if [ -d "$HOME/domains/dokterkuklinik.com" ]; then
                APP_DIR="$HOME/domains/dokterkuklinik.com/public_html/dokterku"
                echo "‚úÖ Found domains structure"
            elif [ -d "$HOME/public_html" ]; then
                APP_DIR="$HOME/public_html/dokterku"
                echo "‚úÖ Found public_html structure"
            elif [ -d "$HOME/htdocs" ]; then
                APP_DIR="$HOME/htdocs/dokterku"
                echo "‚úÖ Found htdocs structure"
            elif [ -d "$HOME/www" ]; then
                APP_DIR="$HOME/www/dokterku"
                echo "‚úÖ Found www structure"
            else
                echo "‚ö†Ô∏è No standard web directory found, creating default structure"
                APP_DIR="$HOME/domains/dokterkuklinik.com/public_html/dokterku"
            fi
            
            echo "üéØ Selected deployment path: $APP_DIR"
            
            # Backup directory
            BACKUP_DIR="/tmp/dokterku-backup-$(date +%Y%m%d_%H%M%S)"
            
            # Final validation
            if [ -z "$APP_DIR" ]; then
                echo "‚ùå APP_DIR is empty after detection"
                exit 1
            fi
            
            echo "üìÅ Creating deployment directory: $APP_DIR"
            
            # Function to handle errors
            handle_error() {
                echo "‚ùå Error occurred during deployment!"
                echo "üîç Error details: $1"
                echo "üîÑ Attempting to restore from backup if available..."
                if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
                    echo "üìÅ Restoring from backup..."
                    mkdir -p "$APP_DIR"
                    cd "$BACKUP_DIR"
                    rsync -av --exclude='.env' --exclude='storage/app' --exclude='storage/logs' . "$APP_DIR/"
                    echo "‚úÖ Backup restored"
                else
                    echo "‚ÑπÔ∏è No backup available to restore"
                fi
                exit 1
            }
            
            # Set error trap
            trap handle_error ERR
            
            # Create parent directories with better error handling
            echo "üìÅ Creating parent directories..."
            PARENT_DIR=$(dirname "$APP_DIR")
            
            # Ensure parent directory exists
            if [ ! -d "$PARENT_DIR" ]; then
                echo "üî® Creating parent directory: $PARENT_DIR"
                if ! mkdir -p "$PARENT_DIR"; then
                    echo "‚ùå Failed to create parent directory: $PARENT_DIR"
                    echo "üîç Current permissions:"
                    ls -la $(dirname "$PARENT_DIR") 2>/dev/null || echo "Cannot access parent of parent"
                    exit 1
                fi
            fi
            
            # Check write permissions
            if [ ! -w "$PARENT_DIR" ]; then
                echo "‚ùå No write permission for parent directory: $PARENT_DIR"
                echo "üîç Directory permissions:"
                ls -ld "$PARENT_DIR"
                exit 1
            fi
            
            # Now create the app directory
            echo "üìÅ Creating app directory: $APP_DIR"
            if ! mkdir -p "$APP_DIR"; then
                echo "‚ùå Failed to create app directory: $APP_DIR"
                echo "üîç Parent directory contents:"
                ls -la "$PARENT_DIR"
                exit 1
            fi
            
            # Set proper permissions
            chmod 755 "$APP_DIR"
            
            # Verify directory was created and is accessible
            echo "üîç Verifying directory access..."
            if [ ! -d "$APP_DIR" ]; then
                echo "‚ùå Directory does not exist after creation: $APP_DIR"
                exit 1
            fi
            
            if [ ! -w "$APP_DIR" ]; then
                echo "‚ùå No write permission for app directory: $APP_DIR"
                ls -ld "$APP_DIR"
                exit 1
            fi
            
            echo "‚úÖ App directory ready: $APP_DIR"
            
            # Navigate to app directory
            echo "üö∂ Changing to app directory..."
            cd "$APP_DIR" || { 
                echo "‚ùå Cannot change to app directory: $APP_DIR"
                exit 1
            }
            
            echo "‚úÖ Successfully changed to: $(pwd)"
            
            # Initialize git repository if it doesn't exist
            if [ ! -d ".git" ]; then
                echo "üîß Initializing git repository..."
                git init
                git remote add origin https://github.com/yakey01/klinik-app.git
                git fetch origin main
                git checkout -b main origin/main
            fi
            
            # Create backup only if there are existing files
            if [ -f "composer.json" ] || [ -f ".env" ]; then
                echo "üíæ Creating backup of existing deployment..."
                mkdir -p "$BACKUP_DIR"
                rsync -av --exclude='.git' --exclude='node_modules' --exclude='vendor' . "$BACKUP_DIR/" || {
                    echo "‚ö†Ô∏è Backup failed, but continuing deployment"
                }
            else
                echo "‚ÑπÔ∏è No existing deployment to backup, proceeding with fresh deployment"
            fi
            
            echo "üì• Pulling latest changes..."
            # Ensure we have the latest from origin
            git stash push -m "Auto-stash before deployment $(date)" 2>/dev/null || echo "No changes to stash"
            git fetch origin main
            git reset --hard origin/main
            
            echo "üì¶ Installing Composer dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
            
            echo "üîß Running Laravel setup..."
            php artisan package:discover --ansi
            
            # Check if .env exists, create from example if not
            if [ ! -f .env ]; then
                echo "üîß Creating .env from example..."
                cp .env.example .env
                php artisan key:generate --force
            fi
            
            echo "üóÑÔ∏è Running database operations..."
            php artisan migrate --force
            
            # Optional: Run seeders if needed (uncomment next line)
            # php artisan db:seed --force
            
            echo "üßπ Optimizing application..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan filament:cache-components
            
            echo "üîê Setting permissions..."
            find storage -type f -exec chmod 644 {} \;
            find storage -type d -exec chmod 755 {} \;
            find bootstrap/cache -type f -exec chmod 644 {} \;
            find bootstrap/cache -type d -exec chmod 755 {} \;
            
            # Clean up old backups (keep only last 5)
            find /tmp -name "dokterku-backup-*" -type d -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üìÖ Deployment finished at: $(date)"
            echo "üåê Your application is now live at: https://dokterkuklinik.com"
            echo "üíæ Backup stored at: $BACKUP_DIR"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üîç Running post-deployment health check..."
            
            # Check if the application is responding
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com || echo "000")
            
            if [ "$response" = "200" ]; then
                echo "‚úÖ Application is responding correctly (HTTP $response)"
            else
                echo "‚ö†Ô∏è Application returned HTTP $response"
                echo "üîç Checking Laravel logs..."
                tail -20 domains/dokterkuklinik.com/public_html/dokterku/storage/logs/laravel.log || echo "No logs found"
            fi

      - name: Notify deployment status
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üìä Deployment Summary"
            echo "===================="
            echo "Repository: ${{ github.repository }}"
            echo "Commit: ${{ github.sha }}"
            echo "Author: ${{ github.actor }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Workflow: ${{ github.workflow }}"
            echo "Status: ${{ job.status }}"
            echo "Date: $(date)"
            
            # Optional: Send to Discord/Slack webhook if configured
            # if [ ! -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            #   curl -H "Content-Type: application/json" \
            #        -d '{"content":"üöÄ Deployment completed for Dokterku App"}' \
            #        "${{ secrets.DISCORD_WEBHOOK }}"
            # fi
