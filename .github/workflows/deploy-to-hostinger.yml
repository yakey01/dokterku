name: Deploy to Hostinger

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-progress --no-interaction

      - name: Setup test environment
        run: |
          cp .env.example .env
          php artisan key:generate
          touch database/database.sqlite
          
      - name: Configure SQLite for testing
        run: |
          echo "# Override database config for CI testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=$(pwd)/database/database.sqlite" >> .env
          echo "CACHE_STORE=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env

      - name: Run tests
        run: |
          php artisan config:clear
          php artisan migrate --force
          # Add your test commands here
          # php artisan test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-build-

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Setup minimal environment for asset publishing
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Publish Filament assets
        run: php artisan vendor:publish --tag=filament-assets --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Deploy to Hostinger
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 300s
          command_timeout: 30s
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment to Hostinger..."
            echo "üìÖ Deployment started at: $(date)"
            
            # Set deployment variables
            APP_DIR="domains/dokterkuklinik.com/public_html/dokterku"
            BACKUP_DIR="/tmp/dokterku-backup-$(date +%Y%m%d_%H%M%S)"
            
            # Function to handle errors
            handle_error() {
                echo "‚ùå Error occurred during deployment!"
                echo "üîÑ Attempting to restore from backup if available..."
                if [ -d "$BACKUP_DIR" ]; then
                    echo "üìÅ Ensuring app directory exists for restore..."
                    mkdir -p "$APP_DIR"
                    cd "$BACKUP_DIR"
                    rsync -av --exclude='.env' --exclude='storage/app' --exclude='storage/logs' . "$APP_DIR/"
                    echo "‚úÖ Backup restored"
                fi
                exit 1
            }
            
            # Set error trap
            trap handle_error ERR
            
            # Ensure app directory exists
            echo "üìÅ Ensuring app directory exists..."
            mkdir -p "$APP_DIR"
            
            # Verify directory was created and is accessible
            if [ ! -d "$APP_DIR" ]; then
                echo "‚ùå Failed to create app directory: $APP_DIR"
                exit 1
            fi
            
            echo "‚úÖ App directory verified: $APP_DIR"
            
            # Navigate to app directory
            cd "$APP_DIR" || { echo "‚ùå Cannot access app directory: $APP_DIR"; exit 1; }
            
            echo "üíæ Creating backup..."
            mkdir -p "$BACKUP_DIR"
            rsync -av --exclude='.git' --exclude='node_modules' --exclude='vendor' . "$BACKUP_DIR/"
            
            echo "üì• Pulling latest changes..."
            git stash push -m "Auto-stash before deployment $(date)"
            git fetch origin main
            git reset --hard origin/main
            
            echo "üì¶ Installing Composer dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
            
            echo "üîß Running Laravel setup..."
            php artisan package:discover --ansi
            
            # Check if .env exists, create from example if not
            if [ ! -f .env ]; then
                echo "üîß Creating .env from example..."
                cp .env.example .env
                php artisan key:generate --force
            fi
            
            echo "üóÑÔ∏è Running database operations..."
            php artisan migrate --force
            
            # Optional: Run seeders if needed (uncomment next line)
            # php artisan db:seed --force
            
            echo "üßπ Optimizing application..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan filament:cache-components
            
            echo "üîê Setting permissions..."
            find storage -type f -exec chmod 644 {} \;
            find storage -type d -exec chmod 755 {} \;
            find bootstrap/cache -type f -exec chmod 644 {} \;
            find bootstrap/cache -type d -exec chmod 755 {} \;
            
            # Clean up old backups (keep only last 5)
            find /tmp -name "dokterku-backup-*" -type d -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üìÖ Deployment finished at: $(date)"
            echo "üåê Your application is now live at: https://dokterkuklinik.com"
            echo "üíæ Backup stored at: $BACKUP_DIR"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üîç Running post-deployment health check..."
            
            # Check if the application is responding
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com || echo "000")
            
            if [ "$response" = "200" ]; then
                echo "‚úÖ Application is responding correctly (HTTP $response)"
            else
                echo "‚ö†Ô∏è Application returned HTTP $response"
                echo "üîç Checking Laravel logs..."
                tail -20 domains/dokterkuklinik.com/public_html/dokterku/storage/logs/laravel.log || echo "No logs found"
            fi

      - name: Notify deployment status
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üìä Deployment Summary"
            echo "===================="
            echo "Repository: ${{ github.repository }}"
            echo "Commit: ${{ github.sha }}"
            echo "Author: ${{ github.actor }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Workflow: ${{ github.workflow }}"
            echo "Status: ${{ job.status }}"
            echo "Date: $(date)"
            
            # Optional: Send to Discord/Slack webhook if configured
            # if [ ! -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            #   curl -H "Content-Type: application/json" \
            #        -d '{"content":"üöÄ Deployment completed for Dokterku App"}' \
            #        "${{ secrets.DISCORD_WEBHOOK }}"
            # fi
