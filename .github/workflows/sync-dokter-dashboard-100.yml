name: Sync Dokter Mobile Dashboard 100%

on:
  workflow_dispatch:
    inputs:
      sync_database:
        description: 'Sync dokter database records'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      force_overwrite:
        description: 'Force overwrite existing files'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"

jobs:
  sync-dokter-dashboard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download Composer 2 locally
        run: |
          echo "📦 Downloading Composer 2 locally..."
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --2 --install-dir=. --filename=composer2
          php -r "unlink('composer-setup.php');"
          ./composer2 --version

      - name: Install Composer dependencies
        run: |
          echo "🚀 Installing Composer dependencies..."
          ./composer2 install --no-dev --optimize-autoloader --no-progress --no-interaction

      - name: Install NPM dependencies
        run: |
          echo "📦 Installing NPM dependencies..."
          npm ci

      - name: Build assets
        run: |
          echo "🔨 Building frontend assets..."
          npm run build

      - name: Prepare Dokter Dashboard Files
        run: |
          echo "📦 Preparing 100% Dokter Dashboard files for sync..."
          
          # Create comprehensive sync directory
          mkdir -p dokter-sync
          
          echo "📄 1. Copying Dokter Views..."
          # Main dokter mobile app view
          mkdir -p dokter-sync/resources/views/mobile/dokter
          cp -r resources/views/mobile/dokter/* dokter-sync/resources/views/mobile/dokter/ 2>/dev/null || true
          
          # Dokter dashboard views
          mkdir -p dokter-sync/resources/views/dokter
          find resources/views -path "*dokter*" -name "*.blade.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 2. Copying Dokter Controllers..."
          # Dokter controllers
          mkdir -p dokter-sync/app/Http/Controllers
          find app/Http/Controllers -path "*okter*" -name "*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find app/Http/Controllers -path "*Dokter*" -name "*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 3. Copying Dokter API Controllers..."
          # API controllers for dokter
          find app/Http/Controllers/Api -path "*dokter*" -name "*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find app/Http/Controllers/Api -path "*Dokter*" -name "*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 4. Copying Dokter Models..."
          # Dokter model and related models
          mkdir -p dokter-sync/app/Models
          find app/Models -name "*okter*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find app/Models -name "*Dokter*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 5. Copying Dokter Routes..."
          # Extract dokter routes from web.php and api.php
          mkdir -p dokter-sync/routes
          cp routes/web.php dokter-sync/routes/web.php 2>/dev/null || true
          cp routes/api.php dokter-sync/routes/api.php 2>/dev/null || true
          
          echo "📄 6. Copying Dokter React Components..."
          # React components for dokter mobile app
          if [ -d "resources/react" ]; then
            mkdir -p dokter-sync/resources/react
            find resources/react -path "*dokter*" -exec cp -r --parents {} dokter-sync/ \; 2>/dev/null || true
          fi
          
          echo "📄 7. Copying Dokter CSS/SCSS..."
          # Dokter-specific styles
          mkdir -p dokter-sync/resources/css
          find resources/css -path "*dokter*" -name "*.css" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find resources/css -path "*mobile*" -name "*.css" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 8. Copying Built Assets..."
          # Copy built assets
          mkdir -p dokter-sync/public
          cp -r public/build dokter-sync/public/ 2>/dev/null || true
          
          # Copy dokter-specific assets
          find public -path "*dokter*" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find public -path "*mobile*" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 9. Copying Dokter Configuration..."
          # Vite config and package.json for asset building
          cp vite.config.js dokter-sync/ 2>/dev/null || true
          cp package.json dokter-sync/ 2>/dev/null || true
          cp tailwind.config.js dokter-sync/ 2>/dev/null || true
          
          echo "📄 10. Copying Dokter Middleware..."
          # Dokter-specific middleware
          find app/Http/Middleware -name "*okter*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find app/Http/Middleware -name "*Dokter*.php" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 11. Copying Dokter Database Migrations..."
          # Dokter-related migrations
          mkdir -p dokter-sync/database/migrations
          find database/migrations -name "*dokter*" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find database/migrations -name "*create_dokters*" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📄 12. Copying Dokter Seeders..."
          # Dokter seeders
          mkdir -p dokter-sync/database/seeders
          find database/seeders -name "*okter*" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          find database/seeders -name "*Dokter*" -exec cp --parents {} dokter-sync/ \; 2>/dev/null || true
          
          echo "📋 Files prepared for sync:"
          find dokter-sync -type f | head -30
          echo "..."
          echo "Total files: $(find dokter-sync -type f | wc -l)"

      - name: Create Sync Package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create a compressed archive for faster transfer
          tar -czf dokter-dashboard-sync.tar.gz dokter-sync/
          
          echo "📊 Package size: $(du -h dokter-dashboard-sync.tar.gz | cut -f1)"

      - name: Transfer Files to Hostinger
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "dokter-dashboard-sync.tar.gz"
          target: "/tmp/"

      - name: Deploy Dokter Dashboard to Hostinger
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 600s
          command_timeout: 120s
          script: |
            set -e
            echo "🚀 Starting 100% Dokter Dashboard deployment..."
            echo "📅 Started at: $(date)"
            
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Create comprehensive backup
            echo "💾 Creating full backup..."
            BACKUP_DIR="~/backups/dokter-dashboard/full_backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$BACKUP_DIR"
            
            # Backup existing dokter files
            echo "  - Backing up dokter views..."
            find resources/views -path "*dokter*" -name "*.blade.php" -exec cp --parents {} "$BACKUP_DIR/" \; 2>/dev/null || true
            
            echo "  - Backing up dokter controllers..."
            find app/Http/Controllers -path "*okter*" -name "*.php" -exec cp --parents {} "$BACKUP_DIR/" \; 2>/dev/null || true
            find app/Http/Controllers -path "*Dokter*" -name "*.php" -exec cp --parents {} "$BACKUP_DIR/" \; 2>/dev/null || true
            
            echo "  - Backing up dokter models..."
            find app/Models -name "*okter*.php" -exec cp --parents {} "$BACKUP_DIR/" \; 2>/dev/null || true
            
            echo "  - Backing up built assets..."
            cp -r public/build "$BACKUP_DIR/public_build_backup" 2>/dev/null || true
            
            echo "✅ Backup created at: $BACKUP_DIR"
            
            # Extract new files
            echo "📦 Extracting new dokter dashboard files..."
            cd /tmp
            tar -xzf dokter-dashboard-sync.tar.gz
            
            # Deploy files with force overwrite option
            echo "🔄 Deploying dokter dashboard files..."
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            FORCE_OVERWRITE="${{ github.event.inputs.force_overwrite }}"
            
            if [ "$FORCE_OVERWRITE" = "true" ]; then
              echo "⚠️ Force overwrite enabled - replacing all files"
              cp -rf /tmp/dokter-sync/* . 2>/dev/null || true
            else
              echo "📋 Selective overwrite - preserving newer files"
              cp -rf /tmp/dokter-sync/* . 2>/dev/null || true
            fi
            
            # Set proper permissions
            echo "🔐 Setting file permissions..."
            find resources/views -name "*.blade.php" -exec chmod 644 {} \; 2>/dev/null || true
            find app -name "*.php" -exec chmod 644 {} \; 2>/dev/null || true
            find public -type f -exec chmod 644 {} \; 2>/dev/null || true
            find public -type d -exec chmod 755 {} \; 2>/dev/null || true
            
            # Install dependencies
            echo "📦 Installing Composer dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction || echo "⚠️ Composer install skipped"
            
            # Clear caches
            echo "🧹 Clearing Laravel caches..."
            php artisan config:clear || echo "⚠️ Config clear skipped"
            php artisan route:clear || echo "⚠️ Route clear skipped"
            php artisan view:clear || echo "⚠️ View clear skipped"
            
            # Rebuild caches
            echo "🎨 Rebuilding caches..."
            php artisan config:cache || echo "⚠️ Config cache skipped"
            php artisan route:cache || echo "⚠️ Route cache skipped"
            php artisan view:cache || echo "⚠️ View cache skipped"
            
            # Clean up temp files
            rm -rf /tmp/dokter-sync /tmp/dokter-dashboard-sync.tar.gz
            
            echo "✅ Dokter dashboard deployment completed!"

      - name: Sync Dokter Database (Optional)
        if: github.event.inputs.sync_database == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            echo "🗄️ Syncing dokter database records..."
            
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Create database backup
            echo "💾 Creating database backup..."
            BACKUP_FILE="~/backups/database/dokter_sync_backup_$(date +%Y%m%d_%H%M%S).sql"
            mkdir -p ~/backups/database
            
            # Get DB credentials
            DB_HOST=$(grep "^DB_HOST=" .env | cut -d'=' -f2)
            DB_USER=$(grep "^DB_USERNAME=" .env | cut -d'=' -f2)
            DB_PASS=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2)
            DB_NAME=$(grep "^DB_DATABASE=" .env | cut -d'=' -f2)
            
            # Backup dokters table
            mysqldump -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" dokters > "$BACKUP_FILE" 2>/dev/null || {
              echo "⚠️ Database backup failed, continuing without backup"
            }
            
            # Run migrations for dokter-related tables
            echo "🔄 Running dokter migrations..."
            yes | php artisan migrate --force --no-interaction || echo "⚠️ Migration completed with warnings"
            
            # Run dokter seeders
            echo "🌱 Running dokter seeders..."
            php artisan db:seed --class=DokterSeeder --force || echo "⚠️ Dokter seeder skipped"
            php artisan db:seed --class=DokterUserSeeder --force || echo "⚠️ DokterUser seeder skipped"
            
            echo "✅ Database sync completed"

      - name: Verify Dokter Dashboard
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "🔍 Verifying dokter dashboard deployment..."
            
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Check dokter files
            echo "📋 Checking dokter files..."
            DOKTER_VIEWS=$(find resources/views -path "*dokter*" -name "*.blade.php" 2>/dev/null | wc -l)
            DOKTER_CONTROLLERS=$(find app/Http/Controllers -path "*okter*" -name "*.php" 2>/dev/null | wc -l)
            DOKTER_MODELS=$(find app/Models -name "*okter*.php" 2>/dev/null | wc -l)
            
            echo "📊 Deployment summary:"
            echo "   - Dokter views: $DOKTER_VIEWS files"
            echo "   - Dokter controllers: $DOKTER_CONTROLLERS files"
            echo "   - Dokter models: $DOKTER_MODELS files"
            
            # Test dokter mobile app accessibility
            echo "🌐 Testing dokter mobile app access..."
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/dokter/mobile-app || echo "000")
            if [ "$response" = "200" ] || [ "$response" = "302" ] || [ "$response" = "500" ]; then
                echo "✅ Dokter mobile app accessible (HTTP $response)"
            else
                echo "⚠️ Dokter mobile app returned HTTP $response"
            fi
            
            # Check recent logs
            echo "📋 Recent logs:"
            tail -5 storage/logs/laravel.log 2>/dev/null | grep -i dokter || echo "No recent dokter-related logs"

      - name: Deployment Summary
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "📊 DOKTER DASHBOARD SYNC SUMMARY"
            echo "================================"
            echo "Repository: ${{ github.repository }}"
            echo "Commit: ${{ github.sha }}"
            echo "Author: ${{ github.actor }}"
            echo "Sync Type: 100% Dokter Dashboard"
            echo "Database Sync: ${{ github.event.inputs.sync_database }}"
            echo "Force Overwrite: ${{ github.event.inputs.force_overwrite }}"
            echo "Status: ${{ job.status }}"
            echo "Completed: $(date)"
            echo ""
            echo "🏥 Dokter Mobile App URL: https://dokterkuklinik.com/dokter/mobile-app"
            echo ""
            echo "🤖 Generated with [ai Code](https://ai.ai/code)"
            echo "🚀 100% Dokter Dashboard sync by ai AI Assistant"