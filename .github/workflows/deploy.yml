name: Auto Deploy to Hostinger

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: üöÄ Deploy to Hostinger
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        timeout: 30s
        command_timeout: 15m
        script: |
          cd domains/dokterkuklinik.com/public_html
          echo "üîÑ Pulling latest code..."
          git pull origin main
          
          echo "üîß Setting up production environment..."
          if [ -f ".env.hostinger" ]; then
            cp .env.hostinger .env
            echo "‚úÖ Copied .env.hostinger to .env"
          elif [ ! -f ".env" ]; then
            echo "‚ùå No .env file found, creating basic one..."
            cat > .env << 'EOF'
APP_NAME="Dokterku Klinik"
APP_ENV=production
APP_DEBUG=false
APP_URL=https://dokterkuklinik.com
DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=u454362045_klinik
DB_USERNAME=u454362045_klinik
DB_PASSWORD=LaTahzan@01
CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_CONNECTION=sync
EOF
          fi
          
          echo "üîß Testing database connections..."
          
          # Test multiple database patterns
          DB_PATTERNS=(
            "u454362045_klinik:u454362045_klinik"
            "u454362045_dokterkuklinik:u454362045_dokterkuklinik"
            "u454362045_u45436245_kli:u454362045_u45436245_kli"
            "u454362045_klinik_app:u454362045_klinik_app"
          )
          
          WORKING_DB=""
          for pattern in "${DB_PATTERNS[@]}"; do
            IFS=':' read -r db_name db_user <<< "$pattern"
            echo "Testing: $db_name"
            if mysql -h localhost -u "$db_user" -p"LaTahzan@01" -e "SELECT 1;" 2>/dev/null; then
              echo "‚úÖ Working database found: $db_name"
              WORKING_DB="$db_name"
              WORKING_USER="$db_user"
              break
            fi
          done
          
          if [ -z "$WORKING_DB" ]; then
            echo "‚ùå No working database found. Using fallback..."
            WORKING_DB="u454362045_klinik"
            WORKING_USER="u454362045_klinik"
          fi
          
          # Update .env with working database
          sed -i "s/^DB_DATABASE=.*/DB_DATABASE=$WORKING_DB/" .env
          sed -i "s/^DB_USERNAME=.*/DB_USERNAME=$WORKING_USER/" .env
          sed -i 's/^DB_HOST=.*/DB_HOST=localhost/' .env
          sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=LaTahzan@01/' .env
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env
          
          echo "üìã Current database config:"
          grep "^DB_" .env || echo "No DB config found"
          
          echo "üßπ Clearing all caches..."
          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear
          
          echo "üîå Testing Laravel database connection..."
          php artisan migrate:status || {
            echo "‚ùå Migration status failed, trying to fix..."
            php artisan config:cache
            php artisan migrate:status || echo "‚ö†Ô∏è Still failed but continuing..."
          }
          
          echo "üóÑÔ∏è Running migrations..."
          php artisan migrate --force || echo "‚ö†Ô∏è Migrations failed but continuing..."
          
          echo "üîß Building assets..."
          npm install --production || echo "‚ö†Ô∏è NPM install failed but continuing..."
          npm run build || echo "‚ö†Ô∏è Build failed but continuing..."
          
          echo "‚ö° Optimizing..."
          php artisan optimize
          
          echo "üè• Testing health endpoint..."
          curl -f http://localhost/health || echo "‚ö†Ô∏è Health check failed but continuing..."
          
          echo "‚úÖ Deployment completed!"