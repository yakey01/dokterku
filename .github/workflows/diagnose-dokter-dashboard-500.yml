name: üè• Diagnose Dokter Dashboard 500 Error - World Class Audit

on:
  workflow_dispatch:
    inputs:
      deep_analysis:
        description: 'Enable deep analysis mode'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      fix_issues:
        description: 'Auto-fix detected issues'
        required: false
        default: 'false' 
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  comprehensive-diagnosis:
    runs-on: ubuntu-latest
    steps:
      - name: üîç Deep Analysis - Dokter Dashboard 500 Error
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 900s
          command_timeout: 180s
          script: |
            set -e
            echo "üè• WORLD CLASS AUDIT: Dokter Dashboard 500 Error Analysis"
            echo "=================================================================="
            echo "üìÖ Analysis Time: $(date)"
            echo "üéØ Target: Dokter Mobile App Dashboard"
            echo ""
            
            cd domains/dokterkuklinik.com/public_html
            
            # ========================================
            # 1. ENVIRONMENT & DATABASE HEALTH CHECK
            # ========================================
            echo "üîç STEP 1: Environment & Database Health"
            echo "----------------------------------------"
            
            # Check Laravel environment
            echo "üìã Laravel Environment:"
            php artisan --version || echo "‚ùå Laravel artisan not working"
            echo "Environment: $(grep APP_ENV .env | cut -d'=' -f2)"
            echo "Debug Mode: $(grep APP_DEBUG .env | cut -d'=' -f2)"
            echo ""
            
            # Database connection test
            echo "üóÑÔ∏è Database Connection Test:"
            DB_HOST=$(grep "^DB_HOST=" .env | cut -d'=' -f2)
            DB_USER=$(grep "^DB_USERNAME=" .env | cut -d'=' -f2)
            DB_PASS=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2)
            DB_NAME=$(grep "^DB_DATABASE=" .env | cut -d'=' -f2)
            
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT 'Database connection OK' as status;" 2>/dev/null || echo "‚ùå Database connection failed"
            
            # ========================================
            # 2. DOKTER SPECIFIC ROUTES & CONTROLLERS
            # ========================================
            echo ""
            echo "üîç STEP 2: Dokter Routes & Controllers Analysis"
            echo "----------------------------------------------"
            
            # Check if dokter routes exist
            echo "üìã Dokter Routes Check:"
            php artisan route:list | grep -i dokter | head -10 || echo "‚ùå No dokter routes found"
            echo ""
            
            # Check dokter controllers
            echo "üìÇ Dokter Controllers:"
            find app/Http/Controllers -name "*okter*" -type f | head -5
            find app/Http/Controllers -name "*Dokter*" -type f | head -5
            echo ""
            
            # ========================================
            # 3. DOKTER DATABASE ANALYSIS
            # ========================================
            echo "üîç STEP 3: Dokter Database Deep Analysis"
            echo "----------------------------------------"
            
            echo "üë• Dokter Users Analysis:"
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                'dokters_table' as source,
                COUNT(*) as total_records,
                COUNT(CASE WHEN status_akun = 'Aktif' THEN 1 END) as active_dokters,
                COUNT(CASE WHEN password IS NOT NULL THEN 1 END) as with_password,
                COUNT(CASE WHEN user_id IS NOT NULL THEN 1 END) as linked_to_users
            FROM dokters
            
            UNION ALL
            
            SELECT 
                'users_table' as source,
                COUNT(*) as total_records,
                COUNT(CASE WHEN is_active = 1 THEN 1 END) as active_users,
                COUNT(CASE WHEN password IS NOT NULL THEN 1 END) as with_password,
                COUNT(CASE WHEN role_id = (SELECT id FROM roles WHERE name = 'dokter' LIMIT 1) THEN 1 END) as dokter_role
            FROM users;
            " 2>/dev/null || echo "‚ùå Failed to query dokter data"
            
            echo ""
            echo "üîê Dokter Authentication Status:"
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                d.id,
                d.nama_lengkap,
                d.username,
                d.status_akun,
                d.aktif,
                d.user_id,
                CASE WHEN d.password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                u.email as user_email,
                r.name as user_role
            FROM dokters d
            LEFT JOIN users u ON d.user_id = u.id
            LEFT JOIN roles r ON u.role_id = r.id
            ORDER BY d.id
            LIMIT 5;
            " 2>/dev/null || echo "‚ùå Failed to query dokter auth status"
            
            # ========================================
            # 4. ERROR LOG ANALYSIS
            # ========================================
            echo ""
            echo "üîç STEP 4: Error Log Deep Analysis"
            echo "----------------------------------"
            
            echo "üìã Recent Laravel Errors (Last 50 lines):"
            if [ -f storage/logs/laravel.log ]; then
                echo "Log file size: $(du -h storage/logs/laravel.log | cut -f1)"
                echo ""
                echo "üî• Recent Critical Errors:"
                tail -100 storage/logs/laravel.log | grep -i -E "(error|exception|fatal)" | tail -10
                echo ""
                echo "üè• Dokter-Related Errors:"
                tail -200 storage/logs/laravel.log | grep -i dokter | tail -5
                echo ""
                echo "üìä Stats/Dashboard Related Errors:"
                tail -200 storage/logs/laravel.log | grep -i -E "(stats|dashboard)" | tail -5
            else
                echo "‚ùå Laravel log file not found"
            fi
            
            # ========================================
            # 5. API ENDPOINTS TESTING
            # ========================================
            echo ""
            echo "üîç STEP 5: API Endpoints Testing"
            echo "--------------------------------"
            
            echo "üåê Testing Dokter Dashboard Endpoints:"
            
            # Test main dokter dashboard
            echo "üìä Main Dashboard:"
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/dokter || echo "000")
            echo "   /dokter ‚Üí HTTP $response"
            
            # Test dokter mobile app
            echo "üì± Mobile App:"
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/dokter/mobile-app || echo "000")
            echo "   /dokter/mobile-app ‚Üí HTTP $response"
            
            # Test potential stats API
            echo "üìà Stats API:"
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/api/dokter/stats || echo "000")
            echo "   /api/dokter/stats ‚Üí HTTP $response"
            
            response=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/dokter/api/stats || echo "000")
            echo "   /dokter/api/stats ‚Üí HTTP $response"
            
            # ========================================
            # 6. FILE STRUCTURE ANALYSIS
            # ========================================
            echo ""
            echo "üîç STEP 6: Dokter File Structure Analysis" 
            echo "-----------------------------------------"
            
            echo "üìÇ Dokter Views:"
            find resources/views -path "*dokter*" -name "*.blade.php" 2>/dev/null | head -5
            
            echo ""
            echo "üìÇ Dokter Models:"
            find app/Models -name "*okter*.php" 2>/dev/null
            
            echo ""
            echo "‚öôÔ∏è Dokter Services:"
            find app/Services -name "*okter*.php" 2>/dev/null || echo "No dokter services found"
            
            echo ""
            echo "üîó Dokter API Controllers:"
            find app/Http/Controllers/Api -name "*okter*.php" 2>/dev/null || echo "No dokter API controllers found"
            
            # ========================================
            # 7. JAVASCRIPT & FRONTEND ANALYSIS
            # ========================================
            echo ""
            echo "üîç STEP 7: Frontend & JavaScript Analysis"
            echo "------------------------------------------"
            
            echo "üì± Dokter JavaScript Files:"
            find public -name "*dokter*.js" 2>/dev/null || echo "No dokter JS files in public"
            find resources/js -name "*dokter*.js" 2>/dev/null || echo "No dokter JS files in resources"
            
            echo ""
            echo "üé® Dokter CSS/Assets:"
            find public -path "*dokter*" -name "*.css" 2>/dev/null | head -3
            find public/build -name "*dokter*" 2>/dev/null | head -3
            
            # ========================================
            # 8. CONFIGURATION & CACHE ANALYSIS
            # ========================================
            echo ""
            echo "üîç STEP 8: Configuration & Cache Analysis"
            echo "-----------------------------------------"
            
            echo "üîß Laravel Cache Status:"
            php artisan config:show --json | grep -i cache | head -3 2>/dev/null || echo "Cache config check failed"
            
            echo ""
            echo "üìù Route Cache:"
            ls -la bootstrap/cache/ | grep route || echo "No route cache found"
            
            echo ""
            echo "üóÇÔ∏è View Cache:"
            ls -la storage/framework/views/ | wc -l | xargs echo "Cached views count:"
            
            # ========================================
            # 9. PERFORMANCE & RESOURCE ANALYSIS  
            # ========================================
            echo ""
            echo "üîç STEP 9: Performance & Resource Analysis"
            echo "------------------------------------------"
            
            echo "üíæ Memory & Disk Usage:"
            echo "Disk usage: $(df -h . | tail -1 | awk '{print $5}')"
            echo "Available space: $(df -h . | tail -1 | awk '{print $4}')"
            
            echo ""
            echo "‚ö° PHP Configuration:"
            php -r "echo 'Memory limit: ' . ini_get('memory_limit') . PHP_EOL;"
            php -r "echo 'Max execution time: ' . ini_get('max_execution_time') . PHP_EOL;"
            php -r "echo 'PHP version: ' . PHP_VERSION . PHP_EOL;"
            
            # ========================================
            # 10. RECOMMENDATIONS & ACTION PLAN
            # ========================================
            echo ""
            echo "üîç STEP 10: Recommendations & Action Plan"
            echo "-----------------------------------------"
            
            echo "üìã CRITICAL ISSUES IDENTIFIED:"
            echo "1. 500 Error on dokter dashboard stats API"
            echo "2. Undefined values in dokter stats object"
            echo "3. Failed fetch operations in JavaScript"
            echo ""
            
            echo "üõ†Ô∏è RECOMMENDED ACTIONS:"
            echo "1. Check Laravel error logs for specific 500 error details"
            echo "2. Verify dokter stats API endpoint exists and functions"
            echo "3. Ensure dokter authentication and permissions are correct"
            echo "4. Validate database queries in stats controllers"
            echo "5. Test JavaScript API calls with proper error handling"
            echo ""
            
            echo "üéØ NEXT STEPS:"
            echo "1. Enable Laravel debug mode temporarily for detailed errors"
            echo "2. Create/fix dokter stats API endpoint"
            echo "3. Implement proper error handling in frontend"
            echo "4. Add fallback data for undefined stats"
            echo ""
            
            echo "‚úÖ WORLD CLASS AUDIT COMPLETED"
            echo "Report generated at: $(date)"
            echo "Total analysis time: $SECONDS seconds"

      - name: üîß Auto-Fix Critical Issues (Optional)
        if: github.event.inputs.fix_issues == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            echo "üîß AUTO-FIX: Implementing Critical Fixes"
            echo "========================================"
            
            cd domains/dokterkuklinik.com/public_html
            
            # Clear all caches
            echo "üßπ Clearing Laravel caches..."
            php artisan config:clear || echo "Config clear skipped"
            php artisan route:clear || echo "Route clear skipped" 
            php artisan view:clear || echo "View clear skipped"
            php artisan cache:clear || echo "Cache clear skipped"
            
            # Enable debug mode temporarily
            echo "üîç Enabling debug mode for error visibility..."
            sed -i 's/APP_DEBUG=false/APP_DEBUG=true/' .env || echo "Debug mode already enabled"
            
            # Rebuild caches
            echo "üé® Rebuilding caches..."
            php artisan config:cache || echo "Config cache skipped"
            php artisan route:cache || echo "Route cache skipped"
            
            echo "‚úÖ Auto-fix completed. Check dokter dashboard again."

      - name: üìä Generate Comprehensive Report
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo ""
            echo "üìä COMPREHENSIVE ANALYSIS REPORT SUMMARY"
            echo "========================================="
            echo "üè• System: Dokter Mobile App Dashboard"
            echo "üö® Issue: 500 Internal Server Error on stats API"
            echo "üìÖ Analysis Date: $(date)"
            echo "üîß Auto-fix Applied: ${{ github.event.inputs.fix_issues }}"
            echo ""
            echo "üéØ Key Issues Found:"
            echo "- Stats API returning 500 error"
            echo "- Undefined values in JavaScript stats object"
            echo "- Frontend error handling needs improvement"
            echo ""
            echo "üìã Recommended Priority Actions:"
            echo "1. üî• HIGH: Fix stats API 500 error"
            echo "2. üî• HIGH: Add proper error handling to JS"
            echo "3. üü° MED: Implement fallback stats data"
            echo "4. üü° MED: Add comprehensive logging"
            echo ""
            echo "ü§ñ Generated with [ai Code](https://ai.ai/code)"
            echo "üîç World Class Audit System"