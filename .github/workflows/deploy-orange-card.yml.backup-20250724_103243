name: Deploy Orange Card to Hostinger

on:
  push:
    branches:
      - main
    paths:
      - 'resources/js/components/dokter/JadwalJaga.tsx'
      - 'resources/js/components/dokter/**'
      - 'resources/views/mobile/dokter/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Orange Card Implementation
    
    steps:
      - name: üîΩ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üìã Check if deployment needed
        id: check_changes
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "üîÑ Force deployment requested"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            # Check if relevant files changed
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "Changed files: $CHANGED_FILES"
            
            if echo "$CHANGED_FILES" | grep -E "(resources/js/components/dokter|resources/views/mobile/dokter|JadwalJaga\.tsx)" > /dev/null; then
              echo "‚úÖ Orange card related files changed, deployment needed"
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è No orange card related changes detected"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: üèóÔ∏è Setup Node.js
        if: steps.check_changes.outputs.should_deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install NPM dependencies
        if: steps.check_changes.outputs.should_deploy == 'true'
        run: |
          echo "üì¶ Installing dependencies for React/TypeScript build..."
          npm ci --production=false

      - name: üé® Build frontend assets
        if: steps.check_changes.outputs.should_deploy == 'true'
        run: |
          echo "üé® Building assets with Vite..."
          npm run build
          echo "‚úÖ Build completed"
          
          # Verify build output
          if [ -d "public/build" ]; then
            echo "üìä Build directory contents:"
            ls -la public/build/
          else
            echo "‚ö†Ô∏è Build directory not found, checking for alternative paths..."
            find public -name "*.js" -o -name "*.css" | head -10
          fi

      - name: üöÄ Deploy to Hostinger
        if: steps.check_changes.outputs.should_deploy == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 180s
          script: |
            set -e
            echo "üü† Starting Orange Card Implementation Deployment"
            echo "üìÖ Started at: $(date)"
            
            # Navigate to project directory
            cd ~/domains/dokterkuklinic.com/public_html
            
            # Create backup of current assets
            echo "üíæ Creating backup of current assets..."
            if [ -d "public/build" ]; then
              cp -r public/build public/build.backup.$(date +%Y%m%d_%H%M%S) || echo "Backup creation failed"
            fi
            
            # Pull latest changes
            echo "üì• Pulling latest changes from repository..."
            git fetch origin main
            git checkout main
            git pull origin main
            
            # Check if orange card file exists and has expected content
            echo "üîç Verifying orange card implementation..."
            if [ -f "resources/js/components/dokter/JadwalJaga.tsx" ]; then
              if grep -q "from-orange-50 to-orange-100" resources/js/components/dokter/JadwalJaga.tsx; then
                echo "‚úÖ Orange card implementation found in JadwalJaga.tsx"
              else
                echo "‚ö†Ô∏è Orange card styling not found, checking file content..."
                grep -n "jadwal.length === 0" resources/js/components/dokter/JadwalJaga.tsx || echo "Empty state condition not found"
              fi
            else
              echo "‚ùå JadwalJaga.tsx file not found!"
              exit 1
            fi
            
            # Install/update Node.js dependencies if needed
            echo "üì¶ Checking Node.js dependencies..."
            if [ -f "package.json" ]; then
              # Check if node_modules is up to date
              if [ ! -d "node_modules" ] || [ "package.json" -nt "node_modules" ]; then
                echo "üì¶ Installing Node.js dependencies..."
                npm ci --production=false || {
                  echo "‚ùå npm ci failed, trying npm install..."
                  npm install
                }
              else
                echo "‚úÖ Node.js dependencies are up to date"
              fi
            fi
            
            # Build frontend assets
            echo "üé® Building frontend assets with orange card changes..."
            npm run build || {
              echo "‚ùå Build failed! Checking for errors..."
              echo "üìã Package.json scripts:"
              cat package.json | grep -A 10 '"scripts"' || echo "No scripts found"
              echo "üìã Vite config:"
              head -20 vite.config.js || echo "No vite config found"
              exit 1
            }
            
            # Verify build output
            echo "üîç Verifying build output..."
            if [ -d "public/build" ]; then
              echo "‚úÖ Build directory created successfully"
              echo "üìä Build contents:"
              ls -la public/build/ | head -10
              
              # Check for specific dokter app assets
              DOKTER_ASSETS=$(find public/build -name "*dokter*" -o -name "*JadwalJaga*" 2>/dev/null | head -5)
              if [ -n "$DOKTER_ASSETS" ]; then
                echo "‚úÖ Dokter-specific assets found:"
                echo "$DOKTER_ASSETS"
              else
                echo "‚ÑπÔ∏è No dokter-specific asset names found (this is normal with hashed filenames)"
                echo "üìä Latest assets:"
                ls -lat public/build/assets/ | head -5 || echo "No assets directory"
              fi
            else
              echo "‚ùå Build directory not created!"
              exit 1
            fi
            
            # Clear Laravel caches to ensure new assets are served
            echo "üßπ Clearing Laravel caches..."
            php artisan view:clear || echo "‚ö†Ô∏è View cache clear failed"
            php artisan cache:clear || echo "‚ö†Ô∏è Cache clear failed"
            
            # Test if the mobile app page is accessible
            echo "üîç Testing mobile app accessibility..."
            MOBILE_APP_TEST=$(curl -s -o /dev/null -w "%{http_code}" "https://dokterkuklinik.com/dokter/mobile-app" || echo "000")
            if [ "$MOBILE_APP_TEST" = "200" ]; then
              echo "‚úÖ Mobile app page is accessible (HTTP $MOBILE_APP_TEST)"
            else
              echo "‚ö†Ô∏è Mobile app page returned HTTP $MOBILE_APP_TEST"
              echo "üîç Checking Laravel logs for errors..."
              if [ -f "storage/logs/laravel.log" ]; then
                tail -10 storage/logs/laravel.log | grep -E "(ERROR|CRITICAL|Exception)" || echo "No recent errors in logs"
              fi
            fi
            
            echo "‚úÖ Orange Card Deployment Completed Successfully!"
            echo "üü† Orange card for 'tidak ada jadwal jaga' is now live"
            echo "üåê URL: https://dokterkuklinic.com/dokter/mobile-app"
            echo "üìÖ Completed at: $(date)"

      - name: üîç Post-deployment verification
        if: steps.check_changes.outputs.should_deploy == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üîç Running post-deployment verification..."
            
            # Check if the orange card implementation is in the built assets
            cd ~/domains/dokterkuklinic.com/public_html
            
            # Look for orange-related styles in built assets
            echo "üü† Checking for orange card styles in built assets..."
            if [ -d "public/build/assets" ]; then
              ORANGE_FOUND=$(grep -r "from-orange-50\|orange-100\|bg-orange" public/build/assets/ 2>/dev/null | head -3)
              if [ -n "$ORANGE_FOUND" ]; then
                echo "‚úÖ Orange card styles found in built assets:"
                echo "$ORANGE_FOUND"
              else
                echo "‚ÑπÔ∏è Orange styles not found in minified assets (this is normal for optimized builds)"
              fi
            fi
            
            # Final health check
            echo "üè• Final health check..."
            HEALTH_STATUS=$(curl -s -w "%{http_code}" -o /tmp/health_response "https://dokterkuklinic.com/health" 2>/dev/null || echo "000")
            if [ "$HEALTH_STATUS" = "200" ]; then
              echo "‚úÖ Application health check passed (HTTP $HEALTH_STATUS)"
              if [ -f "/tmp/health_response" ]; then
                echo "üìä Health response preview:"
                head -3 /tmp/health_response 2>/dev/null || echo "Could not read health response"
              fi
            else
              echo "‚ö†Ô∏è Health check returned HTTP $HEALTH_STATUS"
            fi
            
            echo ""
            echo "üéâ Orange Card Deployment Summary:"
            echo "================================="
            echo "‚úÖ Repository: ${{ github.repository }}"
            echo "‚úÖ Commit: ${{ github.sha }}"
            echo "‚úÖ Branch: ${{ github.ref_name }}"
            echo "‚úÖ Orange card implementation deployed"
            echo "‚úÖ Assets built and cached"
            echo "‚úÖ Application accessible"
            echo ""
            echo "üü† The orange 'tidak ada jadwal jaga' card is now live!"
            echo "üì± Visit: https://dokterkuklinic.com/dokter/mobile-app"

      - name: üìù Skip deployment notification
        if: steps.check_changes.outputs.should_deploy == 'false'
        run: |
          echo "‚ÑπÔ∏è Deployment skipped - no relevant changes detected"
          echo "Files that trigger deployment:"
          echo "  - resources/js/components/dokter/JadwalJaga.tsx"
          echo "  - resources/js/components/dokter/**"
          echo "  - resources/views/mobile/dokter/**"
          echo ""
          echo "To force deployment, use workflow_dispatch with force_deploy=true"