name: üèÜ World-Class Root Analysis - Hostinger vs Local Deep Comparison

on:
  workflow_dispatch:
    inputs:
      analysis_depth:
        description: 'Analysis depth level'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - 'comprehensive'
          - 'ultra_deep'
          - 'forensic'

jobs:
  world-class-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üî¨ Forensic Analysis - Hostinger Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 900s
          script: |
            set -e
            echo "üèÜ WORLD-CLASS ROOT ANALYSIS: Dokter Dashboard"
            echo "=============================================="
            echo "üìÖ Analysis Time: $(date)"
            echo "üéØ Environment: Hostinger Production"
            echo ""
            
            cd domains/dokterkuklinik.com/public_html
            
            # ===============================================
            # 1. CRITICAL FILE EXISTENCE & INTEGRITY CHECK
            # ===============================================
            echo "üîç SECTION 1: Critical File Integrity Analysis"
            echo "----------------------------------------------"
            
            echo "üìÇ Controller Files:"
            if [ -f "app/Http/Controllers/Api/DokterStatsController.php" ]; then
                echo "‚úÖ DokterStatsController.php EXISTS"
                echo "   Size: $(stat -c%s app/Http/Controllers/Api/DokterStatsController.php) bytes"
                echo "   Modified: $(stat -c%y app/Http/Controllers/Api/DokterStatsController.php)"
                echo "   Permissions: $(stat -c%a app/Http/Controllers/Api/DokterStatsController.php)"
                
                # Check if it has the stats method
                if grep -q "public function stats" app/Http/Controllers/Api/DokterStatsController.php; then
                    echo "‚úÖ stats() method found in controller"
                else
                    echo "‚ùå stats() method NOT found in controller"
                fi
                
                # Check for syntax errors
                echo "üîç PHP Syntax Check:"
                php -l app/Http/Controllers/Api/DokterStatsController.php || echo "‚ùå PHP syntax error in controller"
                
            else
                echo "‚ùå DokterStatsController.php MISSING"
            fi
            
            echo ""
            echo "üìÇ Route Files:"
            if [ -f "routes/api.php" ]; then
                echo "‚úÖ routes/api.php EXISTS"
                echo "   Size: $(stat -c%s routes/api.php) bytes"
                echo "   Modified: $(stat -c%y routes/api.php)"
                
                # Check route content
                echo "üîç Route Analysis:"
                if grep -q "DokterStatsController" routes/api.php; then
                    echo "‚úÖ DokterStatsController routes found"
                    echo "üìã Found routes:"
                    grep -n "DokterStatsController\|/dokter" routes/api.php | head -5
                else
                    echo "‚ùå DokterStatsController routes NOT found"
                fi
            else
                echo "‚ùå routes/api.php MISSING"
            fi
            
            # ===============================================
            # 2. LARAVEL ENVIRONMENT DEEP ANALYSIS
            # ===============================================
            echo ""
            echo "üîç SECTION 2: Laravel Environment Deep Analysis"
            echo "----------------------------------------------"
            
            echo "üîß Laravel Status:"
            php artisan --version || echo "‚ùå Laravel artisan not working"
            
            echo ""
            echo "üóÇÔ∏è Environment Configuration:"
            echo "APP_ENV: $(grep '^APP_ENV=' .env | cut -d'=' -f2)"
            echo "APP_DEBUG: $(grep '^APP_DEBUG=' .env | cut -d'=' -f2)"
            echo "APP_URL: $(grep '^APP_URL=' .env | cut -d'=' -f2)"
            
            echo ""
            echo "üìã Route Cache Status:"
            if [ -f "bootstrap/cache/routes-v7.php" ]; then
                echo "‚úÖ Route cache exists"
                echo "   Size: $(stat -c%s bootstrap/cache/routes-v7.php) bytes"
                echo "   Modified: $(stat -c%y bootstrap/cache/routes-v7.php)"
            else
                echo "‚ùå Route cache missing"
            fi
            
            echo ""
            echo "üîç Config Cache Status:"
            if [ -f "bootstrap/cache/config.php" ]; then
                echo "‚úÖ Config cache exists"
                echo "   Size: $(stat -c%s bootstrap/cache/config.php) bytes"
                echo "   Modified: $(stat -c%y bootstrap/cache/config.php)"
            else
                echo "‚ùå Config cache missing"
            fi
            
            # ===============================================
            # 3. ACTUAL ROUTE REGISTRATION TEST
            # ===============================================
            echo ""
            echo "üîç SECTION 3: Route Registration Forensics"
            echo "------------------------------------------"
            
            echo "üìã Laravel Route List (Dokter related):"
            php artisan route:list --compact 2>/dev/null | grep -i dokter || echo "‚ùå No dokter routes found in route:list"
            
            echo ""
            echo "üìã All API Routes:"
            php artisan route:list --compact 2>/dev/null | grep "api/" | head -10 || echo "‚ùå No API routes found"
            
            # ===============================================
            # 4. DIRECT CONTROLLER INSTANTIATION TEST
            # ===============================================
            echo ""
            echo "üîç SECTION 4: Controller Instantiation Test"
            echo "-------------------------------------------"
            
            echo "üß™ Testing controller instantiation:"
            php -r "
            require 'vendor/autoload.php';
            \$app = require_once 'bootstrap/app.php';
            \$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();
            
            try {
                \$controller = new App\Http\Controllers\Api\DokterStatsController();
                echo '‚úÖ Controller instantiated successfully\n';
                
                if (method_exists(\$controller, 'stats')) {
                    echo '‚úÖ stats() method exists\n';
                    
                    // Test method call
                    try {
                        \$response = \$controller->stats();
                        echo '‚úÖ stats() method callable\n';
                        echo 'Response type: ' . get_class(\$response) . \"\n\";
                    } catch (Exception \$e) {
                        echo '‚ùå stats() method call failed: ' . \$e->getMessage() . \"\n\";
                    }
                } else {
                    echo '‚ùå stats() method does not exist\n';
                }
            } catch (Exception \$e) {
                echo '‚ùå Controller instantiation failed: ' . \$e->getMessage() . \"\n\";
            }
            " || echo "‚ùå Controller test script failed"
            
            # ===============================================
            # 5. WEB SERVER & PHP ANALYSIS
            # ===============================================
            echo ""
            echo "üîç SECTION 5: Web Server & PHP Environment"
            echo "------------------------------------------"
            
            echo "üîß PHP Configuration:"
            php -r "echo 'PHP Version: ' . PHP_VERSION . \"\n\";"
            php -r "echo 'Memory Limit: ' . ini_get('memory_limit') . \"\n\";"
            php -r "echo 'Max Execution Time: ' . ini_get('max_execution_time') . \"\n\";"
            php -r "echo 'Error Reporting: ' . error_reporting() . \"\n\";"
            
            echo ""
            echo "üìÅ Laravel Permissions:"
            echo "storage/ permissions: $(stat -c%a storage/)"
            echo "bootstrap/cache/ permissions: $(stat -c%a bootstrap/cache/)"
            
            # ===============================================
            # 6. ERROR LOG FORENSIC ANALYSIS
            # ===============================================
            echo ""
            echo "üîç SECTION 6: Error Log Forensic Analysis"
            echo "-----------------------------------------"
            
            echo "üìã Recent Laravel Errors (Last 20 lines):"
            if [ -f "storage/logs/laravel.log" ]; then
                echo "Log file size: $(stat -c%s storage/logs/laravel.log) bytes"
                echo ""
                echo "üî• Most Recent Errors:"
                tail -50 storage/logs/laravel.log | grep -E "(ERROR|CRITICAL|FATAL)" | tail -10 || echo "No recent errors found"
                
                echo ""
                echo "ü©∫ Dokter-Related Errors:"
                tail -100 storage/logs/laravel.log | grep -i dokter | tail -5 || echo "No dokter-related errors found"
                
                echo ""
                echo "üîç 500 Error Traces:"
                tail -100 storage/logs/laravel.log | grep -A 5 -B 5 "500\|Internal Server Error" | tail -20 || echo "No 500 error traces found"
            else
                echo "‚ùå Laravel log file not found"
            fi
            
            # ===============================================
            # 7. DIRECT HTTP TEST VIA INTERNAL CURL
            # ===============================================
            echo ""
            echo "üîç SECTION 7: Internal HTTP Testing"
            echo "-----------------------------------"
            
            echo "üåê Testing endpoints from server:"
            
            # Test different endpoint variations
            endpoints=(
                "http://localhost/api/dokter/stats"
                "http://localhost/dokter/stats" 
                "http://localhost/dokter"
                "http://localhost/api/public/dokter/stats"
            )
            
            for endpoint in "${endpoints[@]}"; do
                echo "Testing: $endpoint"
                response=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint" 2>/dev/null || echo "000")
                echo "   Response: HTTP $response"
                
                if [ "$response" = "200" ]; then
                    echo "   ‚úÖ SUCCESS - Testing response content:"
                    curl -s "$endpoint" | head -c 100 || echo "   Failed to get content"
                elif [ "$response" = "500" ]; then
                    echo "   ‚ùå 500 ERROR - This is our problem!"
                fi
            done
            
            # ===============================================
            # 8. COMPOSER & AUTOLOAD ANALYSIS
            # ===============================================
            echo ""
            echo "üîç SECTION 8: Composer & Autoload Analysis"
            echo "------------------------------------------"
            
            echo "üì¶ Composer Status:"
            if [ -f "composer.json" ]; then
                echo "‚úÖ composer.json exists"
                echo "Laravel version: $(grep '"laravel/framework"' composer.json | head -1)"
            fi
            
            if [ -f "vendor/autoload.php" ]; then
                echo "‚úÖ Composer autoload exists"
                echo "   Size: $(stat -c%s vendor/autoload.php) bytes"
                echo "   Modified: $(stat -c%y vendor/autoload.php)"
            else
                echo "‚ùå Composer autoload missing - Run composer install!"
            fi
            
            echo ""
            echo "üîç Class Autoload Test:"
            php -r "
            require 'vendor/autoload.php';
            if (class_exists('App\Http\Controllers\Api\DokterStatsController')) {
                echo '‚úÖ DokterStatsController class can be autoloaded\n';
            } else {
                echo '‚ùå DokterStatsController class CANNOT be autoloaded\n';
            }
            " || echo "‚ùå Autoload test failed"
            
            # ===============================================
            # 9. FINAL DIAGNOSIS & RECOMMENDATIONS
            # ===============================================
            echo ""
            echo "üîç SECTION 9: Root Cause Diagnosis"
            echo "----------------------------------"
            
            echo "üéØ CRITICAL FINDINGS SUMMARY:"
            echo "1. File deployment status"
            echo "2. Laravel environment integrity" 
            echo "3. Route registration success/failure"
            echo "4. Controller instantiation capability"
            echo "5. Autoloading functionality"
            echo "6. Specific error patterns in logs"
            echo ""
            
            echo "üìã NEXT ACTIONS REQUIRED:"
            echo "Based on the above analysis, the root cause will be identified"
            echo "and specific fix recommendations will be provided."
            echo ""
            echo "‚úÖ WORLD-CLASS ANALYSIS COMPLETED"
            echo "Total analysis time: $SECONDS seconds"

      - name: üß™ Comparative Analysis with Local Environment
        run: |
          echo "üî¨ LOCAL ENVIRONMENT ANALYSIS FOR COMPARISON"
          echo "============================================"
          
          # Test local controller
          echo "üìÇ Local Controller Status:"
          if [ -f "app/Http/Controllers/Api/DokterStatsController.php" ]; then
              echo "‚úÖ Local DokterStatsController.php exists"
              echo "   Size: $(stat -f%z app/Http/Controllers/Api/DokterStatsController.php) bytes"
              
              # Test syntax
              php -l app/Http/Controllers/Api/DokterStatsController.php
          else
              echo "‚ùå Local DokterStatsController.php missing"
          fi
          
          echo ""
          echo "üìÇ Local Routes:"
          if [ -f "routes/api.php" ]; then
              echo "‚úÖ Local routes/api.php exists"
              if grep -q "DokterStatsController" routes/api.php; then
                  echo "‚úÖ DokterStatsController routes found in local"
                  echo "üìã Local routes:"
                  grep -n "DokterStatsController\|/dokter" routes/api.php | head -3
              fi
          fi
          
          echo ""
          echo "üîç Local Laravel Environment:"
          if [ -f "artisan" ]; then
              php artisan --version || echo "Local Laravel not available"
              
              echo "üìã Local Routes Test:"
              php artisan route:list --compact | grep -i dokter || echo "No local dokter routes"
          fi

      - name: üìä Generate World-Class Recommendations
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo ""
            echo "üèÜ WORLD-CLASS ANALYSIS SUMMARY & RECOMMENDATIONS"
            echo "=================================================="
            echo "üìÖ Analysis Completed: $(date)"
            echo "üéØ Status: Comprehensive forensic analysis completed"
            echo ""
            echo "üîç ROOT CAUSE ANALYSIS FINDINGS:"
            echo "1. File integrity check results"
            echo "2. Laravel environment status"
            echo "3. Route registration analysis"
            echo "4. Controller instantiation tests"
            echo "5. Error log forensics"
            echo "6. HTTP endpoint testing"
            echo ""
            echo "üõ†Ô∏è WORLD-CLASS SOLUTIONS:"
            echo "Based on analysis results, targeted fixes will be implemented"
            echo ""
            echo "üìà EXPECTED OUTCOME:"
            echo "‚úÖ 500 errors eliminated"
            echo "‚úÖ Stats API functioning correctly"
            echo "‚úÖ undefined values resolved"
            echo "‚úÖ Dashboard fully operational"
            echo ""
            echo "ü§ñ Generated with [ai Code](https://ai.ai/code)"
            echo "üèÜ World-Class Root Analysis Complete"