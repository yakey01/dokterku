name: Fix Hostinger Admin Login

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'diagnose'
        type: choice
        options:
          - diagnose
          - fix-password
          - fix-all
          - reset-admin
      admin_password:
        description: 'New admin password (if resetting)'
        required: false
        default: 'admin123'

jobs:
  fix-hostinger-login:
    runs-on: ubuntu-latest
    steps:
      - name: Fix Hostinger Admin Login
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            echo "🔧 Fixing Hostinger Admin Login..."
            echo "Action: ${{ github.event.inputs.action }}"
            echo "=========================================="
            
            cd domains/dokterkuklinic.com/public_html/dokterku
            
            echo "🔧 PREPARING ENVIRONMENT"
            echo "========================"
            
            # Check if artisan exists
            if [ ! -f "artisan" ]; then
              echo "❌ Laravel artisan not found in $(pwd)"
              ls -la
              exit 1
            fi
            
            # Install/update composer dependencies
            echo "Installing composer dependencies..."
            composer install --no-interaction --prefer-dist --optimize-autoloader 2>&1 || echo "⚠️  Composer install had issues, continuing..."
            
            # Fix permissions
            echo "Fixing permissions..."
            chmod -R 775 storage/ 2>/dev/null || echo "⚠️  Cannot fix storage permissions"
            chmod -R 775 bootstrap/cache/ 2>/dev/null || echo "⚠️  Cannot fix bootstrap cache permissions"
            
            # Clear Laravel caches first
            echo "Clearing Laravel caches..."
            php artisan config:clear 2>&1 || echo "⚠️  Cannot clear config"
            php artisan cache:clear 2>&1 || echo "⚠️  Cannot clear cache"
            php artisan route:clear 2>&1 || echo "⚠️  Cannot clear routes"
            php artisan view:clear 2>&1 || echo "⚠️  Cannot clear views"
            
            # Get DB credentials from .env
            if [ ! -f ".env" ]; then
              echo "❌ .env file not found"
              exit 1
            fi
            
            DB_HOST=$(grep "^DB_HOST=" .env | cut -d'=' -f2)
            DB_USER=$(grep "^DB_USERNAME=" .env | cut -d'=' -f2)
            DB_PASS=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2)
            DB_NAME=$(grep "^DB_DATABASE=" .env | cut -d'=' -f2)
            
            echo "✅ Environment prepared"
            echo "Database: $DB_NAME"
            echo "Host: $DB_HOST"
            echo ""
            
            # DIAGNOSE - Check current admin status
            if [ "${{ github.event.inputs.action }}" = "diagnose" ] || [ "${{ github.event.inputs.action }}" = "fix-all" ]; then
              echo "🔍 DIAGNOSIS - Checking Admin User Status"
              echo "========================================"
              
              echo "1. Checking users table for admin..."
              mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
              SELECT 
                  id, 
                  name, 
                  username, 
                  email, 
                  role_id, 
                  is_active,
                  CASE WHEN password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                  LENGTH(password) as password_length,
                  created_at,
                  updated_at
              FROM users 
              WHERE username = 'admin' 
                 OR email = 'admin@dokterku.com'
                 OR email LIKE '%admin%'
              ORDER BY id;
              " 2>/dev/null || echo "❌ Failed to query users table"
              
              echo ""
              echo "2. Checking available roles..."
              mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
              SELECT id, name, display_name FROM roles ORDER BY id;
              " 2>/dev/null || echo "❌ Failed to query roles table"
              
              echo ""
              echo "3. Testing Laravel artisan..."
              if [ -f "artisan" ]; then
                php artisan --version 2>/dev/null || echo "❌ Cannot run artisan"
              else
                echo "❌ Laravel artisan not found"
              fi
              
              echo ""
              echo "4. Checking Laravel logs..."
              if [ -f "storage/logs/laravel.log" ]; then
                echo "Recent auth-related errors:"
                tail -20 storage/logs/laravel.log | grep -i "auth\|login\|password" || echo "No recent auth errors"
              else
                echo "❌ No Laravel log file found"
              fi
            fi
            
            # FIX PASSWORD - Update admin password
            if [ "${{ github.event.inputs.action }}" = "fix-password" ] || [ "${{ github.event.inputs.action }}" = "fix-all" ]; then
              echo ""
              echo "🔧 FIXING ADMIN PASSWORD"
              echo "========================"
              
              # Ensure admin role exists
              echo "Ensuring admin role exists..."
              ADMIN_ROLE_ID=$(mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT id FROM roles WHERE name = 'admin' LIMIT 1;" -s -N 2>/dev/null)
              if [ -z "$ADMIN_ROLE_ID" ]; then
                echo "Creating admin role..."
                mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "INSERT INTO roles (name, display_name, created_at, updated_at) VALUES ('admin','Administrator',NOW(),NOW());" 2>/dev/null || echo "⚠️  Failed to create admin role"
                ADMIN_ROLE_ID=$(mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT id FROM roles WHERE name = 'admin' LIMIT 1;" -s -N 2>/dev/null || echo "1")
              fi
              echo "✅ Admin role ID: $ADMIN_ROLE_ID"
              
              # Check if admin exists
              ADMIN_EXISTS=$(mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT COUNT(*) FROM users WHERE email = 'admin@dokterku.com';" -s -N 2>/dev/null || echo "0")
              
              if [ "$ADMIN_EXISTS" -gt 0 ]; then
                echo "Updating existing admin password..."
                
                # Update admin password using Laravel hash with better error handling
                TINKER_RESULT=$(php artisan tinker --execute="
                try {
                  DB::table('users')->where('email', 'admin@dokterku.com')->update([
                    'password' => Hash::make('${{ github.event.inputs.admin_password }}'),
                    'role_id' => $ADMIN_ROLE_ID,
                    'is_active' => 1,
                    'updated_at' => now()
                  ]);
                  echo 'SUCCESS: Admin password updated';
                } catch (Exception \$e) {
                  echo 'ERROR: ' . \$e->getMessage();
                }
                " 2>&1)
                
                echo "$TINKER_RESULT"
                if [[ "$TINKER_RESULT" == *"SUCCESS"* ]]; then
                  echo "✅ Admin password updated successfully"
                else
                  echo "❌ Failed to update password via tinker: $TINKER_RESULT"
                  # Fallback to direct MySQL update
                  echo "Trying direct MySQL update..."
                  PASSWORD_HASH=$(php -r "echo password_hash('${{ github.event.inputs.admin_password }}', PASSWORD_BCRYPT);")
                  mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "UPDATE users SET password='$PASSWORD_HASH', role_id=$ADMIN_ROLE_ID, is_active=1, updated_at=NOW() WHERE email='admin@dokterku.com';" 2>/dev/null && echo "✅ Password updated via MySQL" || echo "❌ MySQL update also failed"
                fi
                
              else
                echo "Creating new admin user..."
                
                # Create new admin using Laravel with better error handling
                TINKER_RESULT=$(php artisan tinker --execute="
                try {
                  DB::table('users')->insert([
                    'name' => 'Administrator',
                    'username' => 'admin',
                    'email' => 'admin@dokterku.com',
                    'password' => Hash::make('${{ github.event.inputs.admin_password }}'),
                    'role_id' => $ADMIN_ROLE_ID,
                    'is_active' => 1,
                    'email_verified_at' => now(),
                    'created_at' => now(),
                    'updated_at' => now()
                  ]);
                  echo 'SUCCESS: New admin user created';
                } catch (Exception \$e) {
                  echo 'ERROR: ' . \$e->getMessage();
                }
                " 2>&1)
                
                echo "$TINKER_RESULT"
                if [[ "$TINKER_RESULT" == *"SUCCESS"* ]]; then
                  echo "✅ New admin user created successfully"
                else
                  echo "❌ Failed to create admin via tinker: $TINKER_RESULT"
                  # Fallback to direct MySQL insert
                  echo "Trying direct MySQL insert..."
                  PASSWORD_HASH=$(php -r "echo password_hash('${{ github.event.inputs.admin_password }}', PASSWORD_BCRYPT);")
                  mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "INSERT INTO users (name, username, email, password, role_id, is_active, email_verified_at, created_at, updated_at) VALUES ('Administrator', 'admin', 'admin@dokterku.com', '$PASSWORD_HASH', $ADMIN_ROLE_ID, 1, NOW(), NOW(), NOW());" 2>/dev/null && echo "✅ Admin created via MySQL" || echo "❌ MySQL insert also failed"
                fi
              fi
              
              # Verify password with better error handling
              echo "Verifying admin password..."
              VERIFY_RESULT=$(php artisan tinker --execute="
              try {
                \$admin = DB::table('users')->where('email', 'admin@dokterku.com')->first();
                if (\$admin && Hash::check('${{ github.event.inputs.admin_password }}', \$admin->password)) {
                  echo 'SUCCESS: Password verification passed';
                } else {
                  echo 'ERROR: Password verification failed';
                }
              } catch (Exception \$e) {
                echo 'ERROR: ' . \$e->getMessage();
              }
              " 2>&1)
              
              echo "$VERIFY_RESULT"
              if [[ "$VERIFY_RESULT" == *"SUCCESS"* ]]; then
                echo "✅ Password verification: SUCCESS"
              else
                echo "❌ Password verification: FAILED - $VERIFY_RESULT"
              fi
            fi
            
            # RESET ADMIN - Complete reset
            if [ "${{ github.event.inputs.action }}" = "reset-admin" ]; then
              echo ""
              echo "🔄 RESETTING ADMIN USER COMPLETELY"
              echo "==================================="
              
              # Ensure admin role exists
              echo "Ensuring admin role exists..."
              ADMIN_ROLE_ID=$(mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT id FROM roles WHERE name = 'admin' LIMIT 1;" -s -N 2>/dev/null)
              if [ -z "$ADMIN_ROLE_ID" ]; then
                echo "Creating admin role..."
                mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "INSERT INTO roles (name, display_name, created_at, updated_at) VALUES ('admin','Administrator',NOW(),NOW());" 2>/dev/null || echo "⚠️  Failed to create admin role"
                ADMIN_ROLE_ID=$(mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT id FROM roles WHERE name = 'admin' LIMIT 1;" -s -N 2>/dev/null || echo "1")
              fi
              echo "✅ Admin role ID: $ADMIN_ROLE_ID"
              
              # Delete existing admin users
              echo "Deleting existing admin users..."
              mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "DELETE FROM users WHERE email = 'admin@dokterku.com' OR username = 'admin';" 2>/dev/null && echo "✅ Existing admins deleted" || echo "⚠️  Failed to delete existing admin"
              
              # Create fresh admin with better error handling
              echo "Creating fresh admin user..."
              RESET_RESULT=$(php artisan tinker --execute="
              try {
                DB::table('users')->insert([
                  'name' => 'Administrator',
                  'username' => 'admin',
                  'email' => 'admin@dokterku.com',
                  'password' => Hash::make('${{ github.event.inputs.admin_password }}'),
                  'role_id' => $ADMIN_ROLE_ID,
                  'is_active' => 1,
                  'email_verified_at' => now(),
                  'created_at' => now(),
                  'updated_at' => now()
                ]);
                \$admin = DB::table('users')->where('email', 'admin@dokterku.com')->first();
                echo 'SUCCESS: Admin completely reset - ID: ' . \$admin->id;
              } catch (Exception \$e) {
                echo 'ERROR: ' . \$e->getMessage();
              }
              " 2>&1)
              
              echo "$RESET_RESULT"
              if [[ "$RESET_RESULT" == *"SUCCESS"* ]]; then
                echo "✅ Admin user completely reset"
              else
                echo "❌ Failed to reset admin via tinker: $RESET_RESULT"
                # Fallback to direct MySQL insert
                echo "Trying direct MySQL insert..."
                PASSWORD_HASH=$(php -r "echo password_hash('${{ github.event.inputs.admin_password }}', PASSWORD_BCRYPT);")
                mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "INSERT INTO users (name, username, email, password, role_id, is_active, email_verified_at, created_at, updated_at) VALUES ('Administrator', 'admin', 'admin@dokterku.com', '$PASSWORD_HASH', $ADMIN_ROLE_ID, 1, NOW(), NOW(), NOW());" 2>/dev/null && echo "✅ Admin reset via MySQL" || echo "❌ MySQL reset also failed"
              fi
            fi
            
            # CLEAR CACHES - For fix-all option
            if [ "${{ github.event.inputs.action }}" = "fix-all" ]; then
              echo ""
              echo "🧹 CLEARING CACHES AND OPTIMIZING"
              echo "=================================="
              
              php artisan cache:clear 2>/dev/null || echo "❌ Cannot clear cache"
              php artisan config:clear 2>/dev/null || echo "❌ Cannot clear config"
              php artisan route:clear 2>/dev/null || echo "❌ Cannot clear routes"
              php artisan view:clear 2>/dev/null || echo "❌ Cannot clear views"
              
              echo "✅ Caches cleared"
              
              # Fix permissions
              chmod -R 775 storage/ 2>/dev/null || echo "❌ Cannot fix storage permissions"
              chmod -R 775 bootstrap/cache/ 2>/dev/null || echo "❌ Cannot fix bootstrap cache permissions"
              
              echo "✅ Permissions fixed"
            fi
            
            # FINAL STATUS CHECK
            echo ""
            echo "📋 FINAL ADMIN STATUS"
            echo "===================="
            
            mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "
            SELECT 
                id, 
                name, 
                username, 
                email, 
                role_id, 
                is_active,
                CASE WHEN password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                created_at
            FROM users 
            WHERE email = 'admin@dokterku.com'
            ORDER BY id;
            " 2>/dev/null || echo "❌ Failed to check final status"
            
            echo ""
            echo "🎉 ADMIN LOGIN FIX COMPLETED!"
            echo "============================="
            echo "✅ Try logging in with:"
            echo "   Email: admin@dokterku.com"
            echo "   Password: ${{ github.event.inputs.admin_password }}"
            echo "   URL: https://dokterkuklinik.com/login"