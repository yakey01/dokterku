name: üîß Hostinger Admin Fix - Direct SSH

on:
  workflow_dispatch:
    inputs:
      admin_email:
        description: 'New admin email'
        required: false
        default: 'admin@dokterku.com'
        type: string
      admin_name:
        description: 'New admin name'
        required: false
        default: 'Administrator'
        type: string
      confirm_replacement:
        description: 'Type "REPLACE_ADMIN_USERS" to confirm'
        required: true
        type: string

jobs:
  hostinger-admin-replacement:
    runs-on: ubuntu-latest
    steps:
      - name: Security Check
        run: |
          if [ "${{ github.event.inputs.confirm_replacement }}" != "REPLACE_ADMIN_USERS" ]; then
            echo "‚ùå Security check failed: Expected 'REPLACE_ADMIN_USERS'"
            echo "Received: '${{ github.event.inputs.confirm_replacement }}'"
            exit 1
          fi
          echo "‚úÖ Security confirmation validated"
          echo "Target: ${{ github.event.inputs.admin_email }}"

      - name: Setup SSH Tools
        run: |
          echo "üîß Installing SSH tools..."
          sudo apt-get update
          sudo apt-get install -y sshpass mysql-client
          
          echo "üîê Creating SSH config..."
          mkdir -p ~/.ssh
          cat > ~/.ssh/config << 'EOF'
          Host hostinger
            HostName 153.92.8.132
            User u454362045
            Port 65002
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
            ConnectTimeout 30
            ServerAliveInterval 60
          EOF
          chmod 600 ~/.ssh/config
          echo "‚úÖ SSH tools ready"

      - name: Test SSH Connection
        run: |
          echo "üîó Testing SSH connection to Hostinger..."
          echo "Host: 153.92.8.132"
          echo "User: u454362045"
          echo "Port: 65002"
          
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            -p 65002 \
            u454362045@153.92.8.132 \
            "echo 'SSH connection successful!' && whoami && pwd && echo 'Server time:' && date"

      - name: Find Project Directory
        run: |
          echo "üìÇ Looking for project directory..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "echo 'Home directory contents:' && ls -la && \
             echo '' && \
             echo 'Looking for domains directory:' && \
             if [ -d 'domains' ]; then \
               echo 'Found domains directory' && ls -la domains/; \
             else \
               echo 'No domains directory found'; \
             fi && \
             echo '' && \
             echo 'Looking for dokterku project:' && \
             find . -name '*dokter*' -type d 2>/dev/null | head -5 || echo 'No dokterku directories found'"

      - name: Access Project Directory
        run: |
          echo "üéØ Accessing project directory..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "PROJECT_PATH='domains/dokterkuklinik.com/public_html/dokterku' && \
             if [ -d \"\$PROJECT_PATH\" ]; then \
               echo \"‚úÖ Found project at: \$PROJECT_PATH\" && \
               cd \"\$PROJECT_PATH\" && \
               echo \"Current directory: \$(pwd)\" && \
               echo \"Project contents:\" && ls -la | head -10 && \
               echo \"Checking .env file:\" && \
               if [ -f '.env' ]; then \
                 echo \"‚úÖ .env file exists\" && ls -la .env; \
               else \
                 echo \"‚ùå .env file not found\" && \
                 if [ -f '.env.example' ]; then echo \"Found .env.example\"; fi; \
               fi; \
             else \
               echo \"‚ùå Project directory not found: \$PROJECT_PATH\" && \
               exit 1; \
             fi"

      - name: Create Database Backup
        run: |
          echo "üíæ Creating database backup..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "cd domains/dokterkuklinik.com/public_html/dokterku && \
             BACKUP_DIR=\"~/admin_backup_\$(date +%Y%m%d_%H%M%S)\" && \
             mkdir -p \"\$BACKUP_DIR\" && \
             echo \"Backup directory: \$BACKUP_DIR\" && \
             if [ -f .env ]; then \
               DB_USER=\$(grep '^DB_USERNAME=' .env | cut -d'=' -f2 | tr -d '\"') && \
               DB_PASS=\$(grep '^DB_PASSWORD=' .env | cut -d'=' -f2 | tr -d '\"') && \
               DB_NAME=\$(grep '^DB_DATABASE=' .env | cut -d'=' -f2 | tr -d '\"') && \
               DB_HOST=\$(grep '^DB_HOST=' .env | cut -d'=' -f2 | tr -d '\"') && \
               echo \"Database: \$DB_NAME on \$DB_HOST\" && \
               mysqldump -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" users roles > \"\$BACKUP_DIR/admin_backup.sql\" 2>/dev/null && \
               echo \"‚úÖ Database backup created\" && ls -lh \"\$BACKUP_DIR\"; \
             else \
               echo \"‚ö†Ô∏è No .env file, skipping database backup\"; \
             fi"

      - name: Update Codebase
        run: |
          echo "üì¶ Updating codebase..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "echo \"Preparing codebase update...\" && \
             cd domains/dokterkuklinik.com/public_html && \
             echo \"Current location: \$(pwd)\" && \
             echo \"Directory contents before update:\" && ls -la && \
             echo \"Removing old dokterku directory...\" && \
             rm -rf dokterku && \
             echo \"Testing git and network connectivity...\" && \
             git --version && \
             echo \"Attempting to clone repository...\" && \
             git clone https://github.com/yakey01/klinik-app.git dokterku || { \
               echo \"‚ùå Git clone failed, trying alternative methods...\"; \
               echo \"Attempting with different clone options...\"; \
               git clone --depth 1 https://github.com/yakey01/klinik-app.git dokterku || { \
                 echo \"‚ùå Shallow clone also failed\"; \
                 echo \"Attempting wget download...\"; \
                 wget -O main.zip https://github.com/yakey01/klinik-app/archive/refs/heads/main.zip && \
                 unzip -q main.zip && \
                 mv klinik-app-main dokterku && \
                 rm main.zip && \
                 echo \"‚úÖ Downloaded via wget\" || { \
                   echo \"‚ùå All download methods failed\"; \
                   exit 1; \
                 }; \
               }; \
             } && \
             echo \"‚úÖ Repository download completed\" && \
             echo \"Verifying download success...\" && \
             if [ ! -d dokterku ]; then \
               echo \"‚ùå dokterku directory not created\"; \
               exit 1; \
             fi && \
             cd dokterku && \
             echo \"Project directory: \$(pwd)\" && \
             echo \"Directory contents:\" && ls -la && \
             echo \"File count: \$(find . -type f | wc -l)\" && \
             echo \"Directory size: \$(du -sh .)\" && \
             echo \"Checking essential files:\" && \
             if [ -f composer.json ]; then \
               echo \"‚úÖ composer.json found\" && \
               echo \"Composer.json preview:\" && head -10 composer.json; \
             else \
               echo \"‚ùå composer.json missing!\" && \
               echo \"Available files:\" && find . -name '*.json' -o -name '*.php' | head -10 && \
               exit 1; \
             fi && \
             if [ -f artisan ]; then \
               echo \"‚úÖ artisan found\"; \
             else \
               echo \"‚ùå artisan missing!\" && \
               echo \"Available PHP files:\" && find . -name '*.php' | head -10 && \
               exit 1; \
             fi && \
             echo \"‚úÖ All essential files verified\""

      - name: Setup Environment
        run: |
          echo "‚öôÔ∏è Setting up environment..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "cd domains/dokterkuklinik.com/public_html/dokterku && \
             echo \"Verifying project structure...\" && \
             echo \"Current directory: \$(pwd)\" && \
             if [ ! -f composer.json ]; then \
               echo \"‚ùå composer.json not found, aborting.\" && \
               echo \"Directory contents:\" && ls -la && \
               exit 1; \
             fi && \
             echo \"‚úÖ composer.json found\" && \
             if [ ! -f artisan ]; then \
               echo \"‚ùå artisan file not found, aborting.\" && \
               echo \"Directory contents:\" && ls -la && \
               exit 1; \
             fi && \
             echo \"‚úÖ artisan file found\" && \
             echo \"Installing dependencies with Composer 2...\" && \
             if [ ! -f composer2 ]; then \
               echo \"Downloading Composer 2...\" && \
               php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \
               php composer-setup.php --2 --install-dir=. --filename=composer2 && \
               php -r \"unlink('composer-setup.php');\" && \
               chmod +x composer2 && \
               echo \"‚úÖ Composer 2 installed\"; \
             else \
               echo \"‚úÖ Composer 2 already exists\"; \
             fi && \
             echo \"Verifying Composer 2 version...\" && \
             ./composer2 --version && \
             echo \"Using Composer 2 for dependencies...\" && \
             ./composer2 install --no-dev --optimize-autoloader --no-interaction --prefer-dist && \
             echo \"‚úÖ Dependencies installed\" && \
             echo \"Setting up .env file...\" && \
             if [ ! -f .env ]; then \
               if [ -f .env.example ]; then \
                 cp .env.example .env && \
                 echo \"‚úÖ .env created from .env.example\"; \
               else \
                 echo \"‚ö†Ô∏è No .env.example found\"; \
               fi; \
             else \
               echo \"‚úÖ .env file already exists\"; \
             fi && \
             echo \"Clearing caches...\" && \
             php artisan config:clear && \
             php artisan cache:clear && \
             echo \"Testing artisan functionality...\" && \
             php artisan --version && \
             echo \"Running migrations...\" && \
             php artisan migrate --force --no-interaction && \
             echo \"‚úÖ Environment setup completed\""

      - name: Check Current Admin Users
        run: |
          echo "üë• Checking current admin users..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "cd domains/dokterkuklinik.com/public_html/dokterku && \
             DB_USER=\$(grep '^DB_USERNAME=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_PASS=\$(grep '^DB_PASSWORD=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_NAME=\$(grep '^DB_DATABASE=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_HOST=\$(grep '^DB_HOST=' .env | cut -d'=' -f2 | tr -d '\"') && \
             echo \"Current admin users:\" && \
             mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -e \"
               SELECT u.id, u.name, u.email, u.username, r.name as role_name 
               FROM users u 
               LEFT JOIN roles r ON u.role_id = r.id 
               WHERE r.name = 'admin' OR u.email LIKE '%admin%' 
               ORDER BY u.id;
             \" 2>/dev/null || echo \"Error checking users\""

      - name: Execute Direct Admin Replacement
        run: |
          echo "üî• Executing direct admin replacement..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "cd domains/dokterkuklinik.com/public_html/dokterku && \
             DB_USER=\$(grep '^DB_USERNAME=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_PASS=\$(grep '^DB_PASSWORD=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_NAME=\$(grep '^DB_DATABASE=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_HOST=\$(grep '^DB_HOST=' .env | cut -d'=' -f2 | tr -d '\"') && \
             NEW_PASSWORD=\$(php -r \"echo password_hash('dokterku_admin_\$(date +%Y)', PASSWORD_BCRYPT);\") && \
             echo \"Step 1: Ensure admin role exists...\" && \
             mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -e \"
               INSERT IGNORE INTO roles (name, display_name, created_at, updated_at) 
               VALUES ('admin', 'Administrator', NOW(), NOW());
             \" && \
             ADMIN_ROLE_ID=\$(mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -s -N -e \"SELECT id FROM roles WHERE name = 'admin' LIMIT 1;\") && \
             echo \"Admin role ID: \$ADMIN_ROLE_ID\" && \
             echo \"Step 2: Delete existing admin users...\" && \
             mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -e \"
               DELETE FROM users WHERE role_id = \$ADMIN_ROLE_ID OR email LIKE '%admin%' OR username = 'admin';
             \" && \
             echo \"Step 3: Create new admin user...\" && \
             mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -e \"
               INSERT INTO users (name, username, email, password, role_id, is_active, email_verified_at, created_at, updated_at) 
               VALUES (
                 '${{ github.event.inputs.admin_name }}',
                 'admin',
                 '${{ github.event.inputs.admin_email }}',
                 '\$NEW_PASSWORD',
                 \$ADMIN_ROLE_ID,
                 1,
                 NOW(),
                 NOW(),
                 NOW()
               );
             \" && \
             echo \"‚úÖ Admin user replacement completed\""

      - name: Verify New Admin
        run: |
          echo "üîç Verifying new admin user..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "cd domains/dokterkuklinik.com/public_html/dokterku && \
             DB_USER=\$(grep '^DB_USERNAME=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_PASS=\$(grep '^DB_PASSWORD=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_NAME=\$(grep '^DB_DATABASE=' .env | cut -d'=' -f2 | tr -d '\"') && \
             DB_HOST=\$(grep '^DB_HOST=' .env | cut -d'=' -f2 | tr -d '\"') && \
             echo \"New admin user verification:\" && \
             mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -e \"
               SELECT u.id, u.name, u.email, u.username, r.name as role_name, 
                      CASE WHEN u.password IS NOT NULL THEN 'YES' ELSE 'NO' END as has_password,
                      u.is_active, u.created_at 
               FROM users u 
               LEFT JOIN roles r ON u.role_id = r.id 
               WHERE u.email = '${{ github.event.inputs.admin_email }}';
             \" && \
             USER_COUNT=\$(mysql -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" -s -N -e \"SELECT COUNT(*) FROM users WHERE email = '${{ github.event.inputs.admin_email }}';\") && \
             if [ \"\$USER_COUNT\" -eq 1 ]; then \
               echo \"‚úÖ Admin verification successful\"; \
             else \
               echo \"‚ùå Admin verification failed\"; \
               exit 1; \
             fi"

      - name: Optimize Application
        run: |
          echo "‚ö° Optimizing application..."
          sshpass -p "LaTahzan@01" ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -p 65002 \
            u454362045@153.92.8.132 \
            "cd domains/dokterkuklinik.com/public_html/dokterku && \
             php artisan config:cache && \
             php artisan route:cache && \
             chmod -R 755 storage bootstrap/cache && \
             echo \"‚úÖ Application optimized\""

      - name: Final Success Summary
        run: |
          echo ""
          echo "üéâ HOSTINGER ADMIN REPLACEMENT SUCCESSFUL!"
          echo "========================================"
          echo "‚úÖ SSH connection established"
          echo "‚úÖ Database backup created"
          echo "‚úÖ Codebase updated"
          echo "‚úÖ Dependencies installed"
          echo "‚úÖ Admin users replaced"
          echo "‚úÖ Verification completed"
          echo "‚úÖ Application optimized"
          echo ""
          echo "üîê NEW ADMIN CREDENTIALS:"
          echo "========================"
          echo "Email: ${{ github.event.inputs.admin_email }}"
          echo "Name: ${{ github.event.inputs.admin_name }}"
          echo "Username: admin"
          echo "Password: dokterku_admin_$(date +%Y)"
          echo "URL: https://dokterkuklinik.com/admin"
          echo ""
          echo "‚ö†Ô∏è IMPORTANT: Login and change password immediately!"
          echo "üïê Completed at: $(date)"