name: üóÑÔ∏è Hostinger Database Migration

on:
  workflow_dispatch:
    inputs:
      migration_type:
        description: 'Type of migration to run'
        required: true
        default: 'migrate'
        type: choice
        options:
          - migrate
          - migrate-fresh
          - migrate-fresh-seed
          - migrate-rollback
          - migrate-status
      confirm_destructive:
        description: 'CONFIRM destructive operations (fresh/rollback)'
        required: false
        default: false
        type: boolean

env:
  HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
  HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
  HOSTINGER_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
  DEPLOY_PATH: ${{ secrets.HOSTINGER_DEPLOY_PATH }}

jobs:
  migrate-database:
    name: üóÑÔ∏è Run Database Migration
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate destructive operations
        if: (github.event.inputs.migration_type == 'migrate-fresh' || github.event.inputs.migration_type == 'migrate-fresh-seed' || github.event.inputs.migration_type == 'migrate-rollback') && github.event.inputs.confirm_destructive != 'true'
        run: |
          echo "‚ùå DESTRUCTIVE OPERATION BLOCKED"
          echo "================================"
          echo ""
          echo "‚ö†Ô∏è  You selected: ${{ github.event.inputs.migration_type }}"
          echo "üö® This operation will DELETE existing data!"
          echo ""
          echo "üîí To proceed, you must:"
          echo "1. Re-run this workflow"
          echo "2. Set 'confirm_destructive' to TRUE"
          echo ""
          echo "üí° For safety, this workflow has been stopped."
          exit 1

      - name: Install sshpass
        run: |
          echo "üîß Installing sshpass..."
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Check server connection
        run: |
          echo "üîç Testing connection to Hostinger..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 -o ConnectTimeout=10 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "echo 'Connection successful!' && cd ${DEPLOY_PATH} && pwd"

      - name: Backup database (for destructive operations)
        if: github.event.inputs.migration_type == 'migrate-fresh' || github.event.inputs.migration_type == 'migrate-fresh-seed'
        run: |
          echo "üíæ Creating database backup before destructive operation..."
          BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).sql"
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan db:backup ${BACKUP_NAME} || echo 'Backup command not available'"
          
          echo "‚úÖ Backup attempted (if available)"

      - name: Run Migration - Standard
        if: github.event.inputs.migration_type == 'migrate'
        run: |
          echo "üóÑÔ∏è Running standard database migration..."
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate --force"
          
          echo "‚úÖ Standard migration completed"

      - name: Run Migration - Fresh
        if: github.event.inputs.migration_type == 'migrate-fresh'
        run: |
          echo "üóÑÔ∏è Running fresh migration (DROP ALL TABLES)..."
          echo "‚ö†Ô∏è  This will DELETE all existing data!"
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:fresh --force"
          
          echo "‚úÖ Fresh migration completed"

      - name: Run Migration - Fresh with Seed
        if: github.event.inputs.migration_type == 'migrate-fresh-seed'
        run: |
          echo "üóÑÔ∏è Running fresh migration with seeding..."
          echo "‚ö†Ô∏è  This will DELETE all data and reseed!"
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:fresh --seed --force"
          
          echo "‚úÖ Fresh migration with seeding completed"

      - name: Run Migration - Rollback
        if: github.event.inputs.migration_type == 'migrate-rollback'
        run: |
          echo "üóÑÔ∏è Rolling back last migration batch..."
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:rollback --force"
          
          echo "‚úÖ Migration rollback completed"

      - name: Check Migration Status
        if: github.event.inputs.migration_type == 'migrate-status'
        run: |
          echo "üóÑÔ∏è Checking migration status..."
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan migrate:status"
          
          echo "‚úÖ Migration status displayed"

      - name: Post-migration cache clear
        if: github.event.inputs.migration_type != 'migrate-status'
        run: |
          echo "üßπ Clearing caches after migration..."
          
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan config:clear && php artisan cache:clear"
          
          echo "‚úÖ Caches cleared"

      - name: Migration summary
        if: always()
        run: |
          echo "üóÑÔ∏è Migration Summary"
          echo "==================="
          echo "‚úÖ Server: ${HOSTINGER_HOST}"
          echo "‚úÖ Path: ${DEPLOY_PATH}"
          echo "‚úÖ Operation: ${{ github.event.inputs.migration_type }}"
          echo "‚úÖ Timestamp: $(date)"
          echo ""
          if [ "${{ github.event.inputs.migration_type }}" = "migrate-fresh" ] || [ "${{ github.event.inputs.migration_type }}" = "migrate-fresh-seed" ]; then
            echo "‚ö†Ô∏è  DESTRUCTIVE operation completed"
            echo "üíæ Database backup was attempted"
          fi
          echo ""
          echo "üöÄ Database migration completed successfully!"