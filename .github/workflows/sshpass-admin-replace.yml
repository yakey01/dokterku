name: üîß Admin Replacement - Full SSHPass

on:
  workflow_dispatch:
    inputs:
      admin_email:
        description: 'New admin email'
        required: false
        default: 'admin@dokterku.com'
        type: string
      admin_name:
        description: 'New admin name'
        required: false
        default: 'Administrator'
        type: string
      confirm_replacement:
        description: 'Type "REPLACE_ADMIN_USERS" to confirm'
        required: true
        type: string

env:
  HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
  HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
  HOSTINGER_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
  DEPLOY_PATH: ${{ secrets.HOSTINGER_DEPLOY_PATH }}

jobs:
  sshpass-admin-replacement:
    runs-on: ubuntu-latest
    steps:
      - name: Security Validation
        run: |
          if [ "${{ github.event.inputs.confirm_replacement }}" != "REPLACE_ADMIN_USERS" ]; then
            echo "‚ùå Security check failed: Expected 'REPLACE_ADMIN_USERS'"
            echo "Received: '${{ github.event.inputs.confirm_replacement }}'"
            exit 1
          fi
          echo "‚úÖ Security confirmation validated"
          echo "üéØ Admin Email: ${{ github.event.inputs.admin_email }}"
          echo "üìù Admin Name: ${{ github.event.inputs.admin_name }}"

      - name: Install SSHPass
        run: |
          echo "üîß Installing sshpass..."
          sudo apt-get update
          sudo apt-get install -y sshpass
          echo "‚úÖ SSHPass installed"

      - name: Verify Environment Variables
        run: |
          echo "üîç Verifying environment variables..."
          if [ -z "${HOSTINGER_HOST}" ] || [ -z "${HOSTINGER_USERNAME}" ] || [ -z "${HOSTINGER_PASSWORD}" ] || [ -z "${DEPLOY_PATH}" ]; then
            echo "‚ùå Missing required environment variables!"
            echo "HOSTINGER_HOST: ${HOSTINGER_HOST:-'NOT_SET'}"
            echo "HOSTINGER_USERNAME: ${HOSTINGER_USERNAME:-'NOT_SET'}"
            echo "DEPLOY_PATH: ${DEPLOY_PATH:-'NOT_SET'}"
            echo "Password set: $([ -n "${HOSTINGER_PASSWORD}" ] && echo 'YES' || echo 'NO')"
            exit 1
          fi
          echo "‚úÖ All environment variables are set"

      - name: Configure SSH
        run: |
          echo "üîê Configuring SSH..."
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          echo "‚úÖ SSH configured"

      - name: Test Server Connection
        run: |
          echo "üîó Testing server connection..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "echo '‚úÖ SSH connection successful' && pwd"

      - name: Create Database Backup
        run: |
          echo "üíæ Creating database backup..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             BACKUP_DIR=\"~/admin_backup_\$(date +%Y%m%d_%H%M%S)\" && \
             mkdir -p \"\$BACKUP_DIR\" && \
             echo \"Creating backup in: \$BACKUP_DIR\" && \
             if [ -f .env ]; then \
               DB_USER=\$(grep '^DB_USERNAME=' .env | cut -d'=' -f2 | tr -d '\"') && \
               DB_PASS=\$(grep '^DB_PASSWORD=' .env | cut -d'=' -f2 | tr -d '\"') && \
               DB_NAME=\$(grep '^DB_DATABASE=' .env | cut -d'=' -f2 | tr -d '\"') && \
               DB_HOST=\$(grep '^DB_HOST=' .env | cut -d'=' -f2 | tr -d '\"') && \
               mysqldump -h \"\$DB_HOST\" -u \"\$DB_USER\" -p\"\$DB_PASS\" \"\$DB_NAME\" users roles > \"\$BACKUP_DIR/admin_backup.sql\" 2>/dev/null || echo 'Backup failed, continuing...' && \
               echo \"‚úÖ Database backup created in: \$BACKUP_DIR\"; \
             else \
               echo '‚ö†Ô∏è No .env file found, skipping backup'; \
             fi"

      - name: Update Codebase
        run: |
          echo "üì¶ Updating codebase from GitHub..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             echo \"Current directory: \$(pwd)\" && \
             git fetch origin && \
             git reset --hard origin/main && \
             git clean -fd && \
             echo \"‚úÖ Codebase updated\""

      - name: Install Dependencies
        run: |
          echo "üîß Installing composer dependencies..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             if [ -f composer2 ]; then \
               echo \"Using composer2...\" && \
               ./composer2 install --no-dev --optimize-autoloader --no-interaction --prefer-dist || composer install --no-dev --optimize-autoloader --no-interaction; \
             else \
               echo \"Using regular composer...\" && \
               composer install --no-dev --optimize-autoloader --no-interaction; \
             fi && \
             echo \"‚úÖ Dependencies installed\""

      - name: Setup Environment
        run: |
          echo "‚öôÔ∏è Setting up environment..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             if [ ! -f .env ]; then \
               cp .env.example .env && \
               php artisan key:generate --force; \
             fi && \
             echo \"\" >> .env && \
             echo \"# Production Admin Credentials (Added by GitHub Actions)\" >> .env && \
             echo \"PRODUCTION_ADMIN_EMAIL=${{ github.event.inputs.admin_email }}\" >> .env && \
             echo \"PRODUCTION_ADMIN_NAME=\\\"${{ github.event.inputs.admin_name }}\\\"\" >> .env && \
             echo \"PRODUCTION_ADMIN_PASSWORD=dokterku_admin_\$(date +%Y)\" >> .env && \
             echo \"‚úÖ Environment configured\""

      - name: Clear Caches
        run: |
          echo "üßπ Clearing Laravel caches..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             php artisan config:clear && \
             php artisan cache:clear && \
             php artisan view:clear && \
             php artisan route:clear && \
             echo \"‚úÖ Caches cleared\""

      - name: Test Environment
        run: |
          echo "üîç Testing Laravel environment..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             echo \"Testing artisan...\" && \
             php artisan --version && \
             echo \"Testing database connection...\" && \
             php artisan tinker --execute=\"DB::connection()->getPdo(); echo 'Database connection: OK';\" --no-interaction && \
             echo \"‚úÖ Environment tests passed\""

      - name: Run Migrations
        run: |
          echo "üóÑÔ∏è Running database migrations..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             php artisan migrate --force --no-interaction && \
             echo \"‚úÖ Migrations completed\""

      - name: Check Admin Command
        run: |
          echo "üîç Checking admin:replace command availability..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             ADMIN_COMMANDS=\$(php artisan list | grep admin || echo '') && \
             if [ -z \"\$ADMIN_COMMANDS\" ]; then \
               echo \"‚ùå No admin commands found!\" && \
               echo \"Available commands:\" && \
               php artisan list | head -20 && \
               exit 1; \
             else \
               echo \"‚úÖ Admin commands found:\" && \
               echo \"\$ADMIN_COMMANDS\"; \
             fi"

      - name: Execute Admin Replacement
        run: |
          echo "üë§ Executing admin user replacement..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             php artisan admin:replace --force --email=\"${{ github.event.inputs.admin_email }}\" --name=\"${{ github.event.inputs.admin_name }}\" || { \
               echo \"‚ùå Admin replacement failed!\"; \
               echo \"Attempting rollback...\"; \
               php artisan admin:replace --rollback --force || echo \"Rollback also failed\"; \
               exit 1; \
             } && \
             echo \"‚úÖ Admin replacement completed\""

      - name: Verify Admin Replacement
        run: |
          echo "üîé Verifying admin replacement..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             php artisan admin:replace --verify || { \
               echo \"‚ùå Admin verification failed!\"; \
               exit 1; \
             } && \
             echo \"‚úÖ Admin verification successful\""

      - name: Optimize Application
        run: |
          echo "‚ö° Optimizing application for production..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             php artisan config:cache && \
             php artisan route:cache && \
             chmod -R 755 storage bootstrap/cache && \
             echo \"‚úÖ Application optimized\""

      - name: Final Application Test
        run: |
          echo "üåê Testing application accessibility..."
          sshpass -p "${HOSTINGER_PASSWORD}" ssh -p 65002 \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && \
             APP_STATUS=\$(curl -s -o /dev/null -w \"%{http_code}\" https://dokterkuklinik.com || echo \"000\") && \
             ADMIN_STATUS=\$(curl -s -o /dev/null -w \"%{http_code}\" https://dokterkuklinik.com/admin || echo \"000\") && \
             echo \"Application Status: HTTP \$APP_STATUS\" && \
             echo \"Admin Panel Status: HTTP \$ADMIN_STATUS\" && \
             echo \"‚úÖ Application accessibility test completed\""

      - name: Success Summary
        run: |
          echo ""
          echo "üéâ ADMIN REPLACEMENT COMPLETED SUCCESSFULLY!"
          echo "==========================================="
          echo "‚úÖ Database backup created"
          echo "‚úÖ Codebase updated from GitHub"
          echo "‚úÖ Dependencies installed"
          echo "‚úÖ Environment configured"
          echo "‚úÖ Migrations executed"
          echo "‚úÖ Admin users replaced"
          echo "‚úÖ Verification successful"
          echo "‚úÖ Application optimized"
          echo ""
          echo "üîê New Admin Credentials:"
          echo "Email: ${{ github.event.inputs.admin_email }}"
          echo "Name: ${{ github.event.inputs.admin_name }}"
          echo "Password: dokterku_admin_$(date +%Y)"
          echo "Login URL: https://dokterkuklinik.com/admin"
          echo ""
          echo "‚ö†Ô∏è IMPORTANT: Login and change password immediately!"
          echo "üïê Process completed at: $(date)"