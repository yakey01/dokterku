name: üöÄ Deploy to Hostinger (No Migrate)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests before deploy'
        required: false
        default: false
        type: boolean

env:
  SSH_HOST: 153.92.8.132
  SSH_USER: u454362045
  SSH_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
  DEPLOY_PATH: public_html

jobs:
  deploy-hostinger:
    name: üöÄ Deploy to Hostinger
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          tools: composer:v2

      - name: Install Composer dependencies
        run: |
          echo "üì¶ Installing PHP dependencies..."
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          echo "‚úÖ Composer dependencies installed"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install NPM dependencies and build assets
        run: |
          echo "üì¶ Installing NPM dependencies..."
          npm ci
          echo "üèóÔ∏è Building production assets..."
          npm run build
          echo "‚úÖ Assets built successfully"

      - name: Run tests (if not skipped)
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "üß™ Running tests before deployment..."
          # Create testing database
          touch database/database.sqlite
          php artisan migrate --database=sqlite --force
          
          # Run tests
          if php artisan test --stop-on-failure; then
            echo "‚úÖ All tests passed!"
          else
            echo "‚ùå Tests failed - deployment will continue anyway"
            echo "‚ö†Ô∏è Please check tests after deployment"
          fi
        continue-on-error: true

      - name: Prepare deployment package
        run: |
          echo "üì¶ Preparing deployment package..."
          
          # Remove development files
          rm -rf tests/
          rm -rf node_modules/
          rm -rf .git/
          rm -f .env.example
          rm -f *.md
          rm -f phpunit.xml
          rm -f vite.config.js
          rm -f package*.json
          
          # Create deployment info
          echo "Deployed at: $(date)" > deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt
          
          echo "‚úÖ Deployment package prepared"

      - name: Install sshpass
        run: |
          echo "üîß Installing sshpass..."
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Deploy to Hostinger via RSYNC
        run: |
          echo "üöÄ Deploying to Hostinger..."
          
          # Create .ssh directory and configure
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Deploy files using rsync with sshpass
          sshpass -p "${SSH_PASSWORD}" rsync -avz -e "ssh -p 65002" \
            --delete \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='bootstrap/cache/*' \
            --exclude='.env' \
            ./ "${SSH_USER}@${SSH_HOST}:${DEPLOY_PATH}/"
          
          echo "‚úÖ Files deployed successfully"

      - name: Post-deployment setup (No Migration)
        run: |
          echo "‚öôÔ∏è Running post-deployment setup..."
          
          # Run Artisan commands on server (NO MIGRATION)
          sshpass -p "${SSH_PASSWORD}" ssh -p 65002 -o StrictHostKeyChecking=no \
            "${SSH_USER}@${SSH_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan config:cache"
          
          sshpass -p "${SSH_PASSWORD}" ssh -p 65002 -o StrictHostKeyChecking=no \
            "${SSH_USER}@${SSH_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan route:cache"
          
          sshpass -p "${SSH_PASSWORD}" ssh -p 65002 -o StrictHostKeyChecking=no \
            "${SSH_USER}@${SSH_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan view:cache"
          
          sshpass -p "${SSH_PASSWORD}" ssh -p 65002 -o StrictHostKeyChecking=no \
            "${SSH_USER}@${SSH_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan storage:link"
          
          echo "‚úÖ Post-deployment setup completed (NO MIGRATION)"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Check if files exist on server
          sshpass -p "${SSH_PASSWORD}" ssh -p 65002 -o StrictHostKeyChecking=no \
            "${SSH_USER}@${SSH_HOST}" \
            "cd ${DEPLOY_PATH} && ls -la && php artisan --version"
          
          echo "‚úÖ Deployment verification completed"

      - name: Deployment summary
        if: always()
        run: |
          echo "üéâ Hostinger Deployment Summary"
          echo "==============================="
          echo "‚úÖ Repository: ${{ github.repository }}"
          echo "‚úÖ Branch: ${{ github.ref_name }}"
          echo "‚úÖ Commit: ${{ github.sha }}"
          echo "‚úÖ Deploy Path: ${DEPLOY_PATH}"
          echo "‚ö†Ô∏è  Migration: SKIPPED (run manually via sshpass)"
          echo "‚ö†Ô∏è  Environment: Please verify .env file manually"
          echo ""
          echo "üîß To run migrations manually:"
          echo "sshpass -p 'LaTahzan@01' ssh -p 65002 u454362045@153.92.8.132 'cd public_html && php artisan migrate'"
          echo ""
          echo "üöÄ Deployment completed successfully!"

  # ============================================================================
  # NOTIFY MIGRATION NEEDED
  # ============================================================================
  migration-reminder:
    name: üì¢ Migration Reminder
    runs-on: ubuntu-latest
    needs: deploy-hostinger
    if: always()
    
    steps:
      - name: Migration reminder
        run: |
          echo "‚ö†Ô∏è  MIGRATION REMINDER"
          echo "====================="
          echo ""
          echo "üóÑÔ∏è  Database migrations were NOT run automatically."
          echo "üîß To run migrations manually, use:"
          echo ""
          echo "sshpass -p 'LaTahzan@01' ssh -p 65002 \\"
          echo "  'u454362045@153.92.8.132' \\"
          echo "  'cd public_html && php artisan migrate --force'"
          echo ""
          echo "üìù Or create a separate migration workflow if needed."
          echo ""
          echo "‚úÖ Code deployment completed successfully!"