name: Replace Admin Users (Production Only)

on:
  workflow_dispatch:
    inputs:
      admin_email:
        description: 'New admin email'
        required: false
        default: 'admin@dokterku.com'
        type: string
      admin_name:
        description: 'New admin name'
        required: false
        default: 'Administrator'
        type: string
      confirm_replacement:
        description: 'Type "REPLACE_ADMIN_USERS" to confirm'
        required: true
        type: string
      enable_rollback:
        description: 'Enable rollback on failure'
        required: false
        default: true
        type: boolean

env:
  PHP_VERSION: "8.3"

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation input
        run: |
          if [ "${{ github.event.inputs.confirm_replacement }}" != "REPLACE_ADMIN_USERS" ]; then
            echo "‚ùå Security check failed: Confirmation text does not match"
            echo "Expected: REPLACE_ADMIN_USERS"
            echo "Received: ${{ github.event.inputs.confirm_replacement }}"
            exit 1
          fi
          echo "‚úÖ Security confirmation validated"

      - name: Environment validation
        run: |
          echo "üîç Deployment Environment Check:"
          echo "Target: Production (Hostinger)"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Admin Email: ${{ github.event.inputs.admin_email }}"
          echo "Admin Name: ${{ github.event.inputs.admin_name }}"
          echo "Rollback Enabled: ${{ github.event.inputs.enable_rollback }}"

  backup-and-prepare:
    needs: security-check
    runs-on: ubuntu-latest
    steps:
      - name: Create pre-deployment backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 300s
          script: |
            set -e
            echo "üöÄ Starting admin replacement backup process..."
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Create backup directory
            mkdir -p ~/backups/admin_replacement
            BACKUP_DIR="~/backups/admin_replacement/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$BACKUP_DIR"
            
            echo "üíæ Creating comprehensive database backup..."
            if grep -q "DB_CONNECTION=mysql" .env; then
              DB_USER=$(grep "^DB_USERNAME=" .env | cut -d'=' -f2 | tr -d '"')
              DB_PASS=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2 | tr -d '"')
              DB_NAME=$(grep "^DB_DATABASE=" .env | cut -d'=' -f2 | tr -d '"')
              DB_HOST=$(grep "^DB_HOST=" .env | cut -d'=' -f2 | tr -d '"')
              
              # Full database backup
              mysqldump -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" > "$BACKUP_DIR/full_database_backup.sql"
              
              # Specific admin tables backup
              mysqldump -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" users roles role_user model_has_roles > "$BACKUP_DIR/admin_tables_backup.sql"
              
              echo "‚úÖ Database backup created: $BACKUP_DIR"
              echo "üìä Backup size:"
              ls -lh "$BACKUP_DIR"
            else
              echo "‚ö†Ô∏è Non-MySQL database detected, skipping MySQL backup"
            fi
            
            # Backup current application state
            cp .env "$BACKUP_DIR/env_backup" || echo "No .env to backup"
            
            echo "üîç Preparing admin replacement environment..."
            echo "========================================"
            
            # Step 1: Verify directory and basic setup
            echo "üìÇ Current working directory: $(pwd)"
            echo "üìã Directory contents:"
            ls -la | head -10
            
            # Step 2: Check Laravel installation
            echo ""
            echo "üèóÔ∏è Checking Laravel installation..."
            if [ ! -f "artisan" ]; then
              echo "‚ùå CRITICAL: Laravel artisan file not found!"
              echo "üìÇ Current directory contents:"
              ls -la
              exit 1
            fi
            echo "‚úÖ Laravel artisan found"
            
            # Step 3: Check .env file
            echo ""
            echo "üîß Checking environment configuration..."
            if [ ! -f ".env" ]; then
              echo "‚ùå CRITICAL: .env file not found!"
              if [ -f ".env.example" ]; then
                echo "üìã Copying .env.example to .env..."
                cp .env.example .env
                echo "üîë Generating application key..."
                php artisan key:generate --force --no-interaction
              else
                echo "‚ùå No .env.example found either!"
                exit 1
              fi
            fi
            echo "‚úÖ Environment file exists"
            
            # Step 4: Install/update composer dependencies
            echo ""
            echo "üì¶ Installing/updating composer dependencies..."
            
            # Check if composer2 exists, if not use regular composer
            if [ -f "composer2" ]; then
              echo "Using composer2..."
              ./composer2 install --no-dev --optimize-autoloader --no-interaction --prefer-dist 2>&1 || {
                echo "‚ùå Composer2 install failed, trying regular composer...";
                composer install --no-dev --optimize-autoloader --no-interaction 2>&1 || {
                  echo "‚ùå CRITICAL: Both composer2 and composer failed!";
                  exit 1;
                }
              }
            else
              echo "Using regular composer..."
              composer install --no-dev --optimize-autoloader --no-interaction 2>&1 || {
                echo "‚ùå CRITICAL: Composer install failed!";
                echo "üìã Composer error output above";
                exit 1;
              }
            fi
            echo "‚úÖ Composer dependencies installed"
            
            # Step 5: Test basic artisan functionality
            echo ""
            echo "üéØ Testing basic artisan functionality..."
            php artisan --version 2>&1 || {
              echo "‚ùå CRITICAL: Artisan is not working!";
              echo "üìã PHP version:";
              php -v;
              echo "üìã PHP modules:";
              php -m | head -20;
              exit 1;
            }
            echo "‚úÖ Artisan is working"
            
            # Step 6: Test database connection
            echo ""
            echo "üóÑÔ∏è Testing database connection..."
            php artisan tinker --execute="
              try {
                DB::connection()->getPdo();
                echo 'SUCCESS: Database connection established\n';
                echo 'Database: ' . DB::connection()->getDatabaseName() . '\n';
              } catch (Exception \$e) {
                echo 'ERROR: Database connection failed: ' . \$e->getMessage() . '\n';
                exit(1);
              }
            " --no-interaction 2>&1 || {
              echo "‚ùå CRITICAL: Database connection failed!";
              echo "üìã Database configuration from .env:";
              grep "^DB_" .env || echo "No DB_ variables found in .env";
              exit 1;
            }
            echo "‚úÖ Database connection successful"
            
            # Step 7: Run migrations if needed
            echo ""
            echo "üóÑÔ∏è Ensuring database schema is up to date..."
            php artisan migrate --force --no-interaction 2>&1 || {
              echo "‚ö†Ô∏è Migration had issues, checking status...";
              php artisan migrate:status --no-interaction || echo "Cannot check migration status";
            }
            echo "‚úÖ Database schema checked"
            
            # Step 8: Check if admin command exists
            echo ""
            echo "üîç Checking for admin:replace command..."
            ADMIN_COMMANDS=$(php artisan list | grep admin || echo "")
            if [ -z "$ADMIN_COMMANDS" ]; then
              echo "‚ùå CRITICAL: No admin commands found!";
              echo "üìã Available artisan commands:";
              php artisan list | head -20;
              echo "üìÇ Checking Console Commands directory:";
              ls -la app/Console/Commands/ || echo "Console Commands directory not found";
              exit 1;
            fi
            echo "‚úÖ Admin commands found:";
            echo "$ADMIN_COMMANDS"
            
            # Step 9: Run admin verification with comprehensive error handling
            echo ""
            echo "üìä Running admin verification with detailed diagnostics..."
            echo "========================================================"
            
            # Run admin verification with simple approach
            php artisan admin:replace --verify --no-interaction -v 2>&1 || {
              echo "";
              echo "‚ùå ADMIN VERIFICATION FAILED - COMPREHENSIVE DEBUGGING";
              echo "=====================================================";
              
              echo "üìã Laravel Application Log (last 30 lines):";
              if [ -f "storage/logs/laravel.log" ]; then
                tail -30 storage/logs/laravel.log;
              else
                echo "No Laravel log file found";
              fi;
              
              echo "";
              echo "üìã PHP Error Log (if available):";
              if [ -f "/var/log/php_errors.log" ]; then
                tail -10 /var/log/php_errors.log;
              elif [ -f "storage/logs/php_errors.log" ]; then
                tail -10 storage/logs/php_errors.log;
              else
                echo "No PHP error log found";
              fi;
              
              echo "";
              echo "üìã System Information:";
              echo "PHP Version: $(php -v | head -1)";
              echo "Laravel Version: $(php artisan --version)";
              echo "Current User: $(whoami)";
              echo "Disk Space: $(df -h . | tail -1)";
              
              echo "";
              echo "üìã File Permissions:";
              echo "artisan: $(ls -la artisan)";
              echo "storage: $(ls -ld storage)";
              echo "bootstrap/cache: $(ls -ld bootstrap/cache)";
              
              
              echo "";
              echo "‚ùå STOPPING WORKFLOW DUE TO VERIFICATION FAILURE";
              exit 1;
            }
            
            
            echo ""
            echo "üéâ PRE-DEPLOYMENT VERIFICATION COMPLETED SUCCESSFULLY!"
            echo "====================================================="

  replace-admin-users:
    needs: backup-and-prepare
    runs-on: ubuntu-latest
    steps:
      - name: Deploy code and replace admin users
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 600s
          command_timeout: 120s
          script: |
            set -e
            echo "üöÄ Starting admin user replacement deployment..."
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Step 1: Pull latest code from GitHub
            echo "üì¶ Updating codebase from GitHub..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd
            
            # Step 2: Install/update dependencies
            echo "üì¶ Installing dependencies..."
            if [ ! -f composer2 ]; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              php composer-setup.php --2 --install-dir=. --filename=composer2
              php -r "unlink('composer-setup.php');"
            fi
            
            ./composer2 install --no-dev --optimize-autoloader --no-interaction --prefer-dist
            
            # Step 3: Environment setup
            echo "üîß Setting up environment variables..."
            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate --force
            fi
            
            # Add production admin credentials to environment
            echo "" >> .env
            echo "# Production Admin Credentials (Added by GitHub Actions)" >> .env
            echo "PRODUCTION_ADMIN_EMAIL=${{ github.event.inputs.admin_email }}" >> .env
            echo "PRODUCTION_ADMIN_NAME=\"${{ github.event.inputs.admin_name }}\"" >> .env
            echo "PRODUCTION_ADMIN_USERNAME=admin" >> .env
            echo "PRODUCTION_ADMIN_PASSWORD=dokterku_admin_$(date +%Y)" >> .env
            
            # Step 4: Clear caches
            echo "üßπ Clearing application caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            
            # Step 5: Test database connection
            echo "üîç Testing database connection..."
            php -r "
              require 'vendor/autoload.php';
              \$app = require_once 'bootstrap/app.php';
              \$kernel = \$app->make('Illuminate\\Contracts\\Console\\Kernel');
              \$kernel->bootstrap();
              try {
                \$pdo = DB::connection()->getPdo();
                echo 'SUCCESS: Database connection established' . PHP_EOL;
                echo 'Database: ' . DB::connection()->getDatabaseName() . PHP_EOL;
              } catch (Exception \$e) {
                echo 'ERROR: ' . \$e->getMessage() . PHP_EOL;
                exit(1);
              }
            "
            
            # Step 6: Run admin replacement command
            echo "üë§ Executing admin user replacement..."
            php artisan admin:replace --force --email="${{ github.event.inputs.admin_email }}" --name="${{ github.event.inputs.admin_name }}" || {
              echo "‚ùå Admin replacement failed!"
              
              if [ "${{ github.event.inputs.enable_rollback }}" = "true" ]; then
                echo "üîÑ Attempting automatic rollback..."
                php artisan admin:replace --rollback --force || echo "Rollback also failed"
              fi
              
              exit 1
            }
            
            # Step 7: Verify admin replacement
            echo "üîç Verifying admin replacement..."
            php artisan admin:replace --verify || {
              echo "‚ùå Admin verification failed!"
              exit 1
            }
            
            # Step 8: Optimize for production
            echo "‚ö° Optimizing for production..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache || echo "View cache skipped"
            
            # Step 9: Set permissions
            echo "üîê Setting file permissions..."
            chmod -R 755 storage bootstrap/cache
            chmod 644 .env
            
            echo "‚úÖ Admin user replacement completed successfully!"

  verify-replacement:
    needs: replace-admin-users
    runs-on: ubuntu-latest
    steps:
      - name: Post-deployment verification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 120s
          script: |
            echo "üîç Running post-deployment verification..."
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Test admin panel access
            echo "üåê Testing admin panel accessibility..."
            ADMIN_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com/admin || echo "000")
            
            if [ "$ADMIN_RESPONSE" = "200" ]; then
              echo "‚úÖ Admin panel is accessible (HTTP $ADMIN_RESPONSE)"
            else
              echo "‚ö†Ô∏è Admin panel returned HTTP $ADMIN_RESPONSE"
            fi
            
            # Verify admin user in database
            echo "üë§ Verifying admin user in database..."
            php artisan admin:replace --verify
            
            # Check application health
            echo "‚ù§Ô∏è Application health check..."
            APP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://dokterkuklinik.com || echo "000")
            
            if [ "$APP_RESPONSE" = "200" ]; then
              echo "‚úÖ Application is healthy (HTTP $APP_RESPONSE)"
            else
              echo "‚ö†Ô∏è Application health check: HTTP $APP_RESPONSE"
              echo "üìã Recent logs:"
              tail -10 storage/logs/laravel.log || echo "No logs available"
            fi
            
            # Display new admin credentials
            echo ""
            echo "üéâ ADMIN REPLACEMENT SUCCESSFUL!"
            echo "=================================="
            echo "üîê New Admin Credentials:"
            echo "Email: ${{ github.event.inputs.admin_email }}"
            echo "Name: ${{ github.event.inputs.admin_name }}"
            echo "Panel: https://dokterkuklinik.com/admin"
            echo ""
            echo "‚ö†Ô∏è IMPORTANT: Please login and change the password immediately!"

  notify-completion:
    needs: [verify-replacement]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment notification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üìä Admin Replacement Summary"
            echo "============================"
            echo "Repository: ${{ github.repository }}"
            echo "Triggered by: ${{ github.actor }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Status: ${{ job.status }}"
            echo "Admin Email: ${{ github.event.inputs.admin_email }}"
            echo "Admin Name: ${{ github.event.inputs.admin_name }}"
            echo "Rollback Enabled: ${{ github.event.inputs.enable_rollback }}"
            echo "Timestamp: $(date)"
            echo ""
            echo "ü§ñ Admin replacement automated by Claude AI"
            echo "üîó Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  rollback-on-failure:
    needs: [replace-admin-users]
    runs-on: ubuntu-latest
    if: failure() && github.event.inputs.enable_rollback == 'true'
    steps:
      - name: Emergency rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 300s
          script: |
            echo "üö® EMERGENCY ROLLBACK INITIATED"
            echo "==============================="
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            echo "üîÑ Attempting to rollback admin users..."
            php artisan admin:replace --rollback --force || {
              echo "‚ùå Automatic rollback failed!"
              echo "üÜò Manual intervention required!"
              echo ""
              echo "Manual Recovery Steps:"
              echo "1. Check ~/backups/admin_replacement/ for database backups"
              echo "2. Restore from latest backup if needed"
              echo "3. Verify admin panel access"
              echo "4. Contact system administrator"
              exit 1
            }
            
            echo "‚úÖ Emergency rollback completed"
            echo "üîç Verifying rollback..."
            php artisan admin:replace --verify
            
            echo "üìß Please check admin panel access immediately!"