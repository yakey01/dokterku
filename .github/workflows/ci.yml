name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  php-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, gd
        coverage: xdebug

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Setup environment
      run: |
        cp .env.example .env
        echo "APP_ENV=testing" >> .env
        echo "APP_DEBUG=true" >> .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/testing.sqlite" >> .env
      
    - name: Generate application key
      run: php artisan key:generate --no-interaction --force

    - name: Validate artisan commands
      run: |
        php artisan --version
        php artisan list --format=txt | head -10

    - name: Setup SQLite database
      run: |
        mkdir -p database
        touch database/testing.sqlite

    - name: Run database migrations
      run: php artisan migrate --no-interaction --force
      env:
        APP_ENV: testing
        DB_CONNECTION: sqlite
        DB_DATABASE: database/testing.sqlite

    - name: Run PHP tests
      run: php artisan test --parallel
      env:
        APP_ENV: testing
        DB_CONNECTION: sqlite
        DB_DATABASE: database/testing.sqlite

  javascript-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting (if available)
      run: |
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi

    - name: Run JavaScript tests (if available)
      run: |
        if npm run | grep -q "test"; then
          npm test
        else
          echo "No test script found, skipping..."
        fi

    - name: Build assets
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: |
        composer audit
        npm audit --audit-level high

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        tools: phpstan, php-cs-fixer

    - name: Install dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Setup environment for static analysis
      run: |
        cp .env.example .env
        php artisan key:generate --no-interaction --force

    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Check PHP CS Fixer
      run: ./vendor/bin/php-cs-fixer fix --dry-run --diff