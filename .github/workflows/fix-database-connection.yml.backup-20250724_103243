name: Fix Database Connection

on:
  workflow_dispatch:
    inputs:
      db_host:
        description: 'Database host (leave empty to auto-detect)'
        required: false
        default: ''
        type: string
      db_database:
        description: 'Database name'
        required: false
        default: 'u454362045_u45436245_kli'
        type: string
      db_username:
        description: 'Database username'
        required: false
        default: 'u454362045_u45436245_kli'
        type: string
      run_migrations:
        description: 'Run migrations after fixing connection'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'  
          - 'false'

env:
  PHP_VERSION: "8.3"

jobs:
  fix-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Diagnose and Fix Database Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 300s
          script: |
            set +e
            echo "üîç Diagnosing Database Connection Issues..."
            echo "================================================="
            
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            # Backup current .env
            echo "üíæ Backing up current .env..."
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
            
            # Database parameters from workflow input or defaults
            DB_HOST="${{ github.event.inputs.db_host }}"
            DB_DATABASE="${{ github.event.inputs.db_database }}"
            DB_USERNAME="${{ github.event.inputs.db_username }}"
            
            echo "üîß Database Configuration:"
            echo "   Host: ${DB_HOST:-'Auto-detect'}"
            echo "   Database: $DB_DATABASE"
            echo "   Username: $DB_USERNAME"
            echo ""
            
            # Get password from current .env or use default
            if [ -f .env ]; then
              DB_PASSWORD=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2 | tr -d '"')
            fi
            DB_PASSWORD=${DB_PASSWORD:-"LaTahzan@01"}
            
            # Create comprehensive database test script
            cat > fix-db-connection.php << 'EOPHP'
            <?php
            echo "üîç Comprehensive Database Connection Test\n";
            echo "=========================================\n";
            
            $database = $argv[1] ?? 'u454362045_u45436245_kli';
            $username = $argv[2] ?? 'u454362045_u45436245_kli';
            $password = $argv[3] ?? 'LaTahzan@01';
            $inputHost = $argv[4] ?? '';
            
            echo "Testing with:\n";
            echo "  Database: $database\n";
            echo "  Username: $username\n";
            echo "  Password: " . str_repeat('*', strlen($password)) . "\n\n";
            
            // Test different connection methods
            $testConfigs = [];
            
            // If host specified, test that first
            if (!empty($inputHost)) {
                $testConfigs[] = [
                    'name' => "Specified Host: $inputHost",
                    'dsn' => "mysql:host=$inputHost;port=3306;dbname=$database",
                    'host' => $inputHost
                ];
            }
            
            // Socket connections (preferred for shared hosting)
            $socketPaths = [
                '/var/lib/mysql/mysql.sock',
                '/tmp/mysql.sock', 
                '/var/run/mysqld/mysqld.sock',
                '/opt/lampp/var/mysql/mysql.sock'
            ];
            
            foreach ($socketPaths as $socket) {
                if (file_exists($socket)) {
                    $testConfigs[] = [
                        'name' => "Socket: $socket",
                        'dsn' => "mysql:unix_socket=$socket;dbname=$database",
                        'socket' => $socket
                    ];
                }
            }
            
            // TCP connections
            $hosts = [
                'localhost',
                '127.0.0.1',
                'mysql.hostinger.com',
                'mysql.' . gethostname() . '.com',
                gethostname() . '.mysql.database',
                'mysql'
            ];
            
            foreach ($hosts as $host) {
                $testConfigs[] = [
                    'name' => "TCP: $host:3306",
                    'dsn' => "mysql:host=$host;port=3306;dbname=$database",
                    'host' => $host
                ];
            }
            
            $workingConfig = null;
            
            foreach ($testConfigs as $config) {
                echo "\nüîÑ Testing: {$config['name']}\n";
                
                // For TCP, test port connectivity first
                if (isset($config['host']) && $config['host'] !== 'localhost' && $config['host'] !== '127.0.0.1') {
                    $fp = @fsockopen($config['host'], 3306, $errno, $errstr, 5);
                    if (!$fp) {
                        echo "‚ùå Port 3306 not reachable: $errstr\n";
                        continue;
                    }
                    fclose($fp);
                    echo "‚úÖ Port 3306 accessible\n";
                }
                
                try {
                    $options = [
                        PDO::ATTR_TIMEOUT => 10,
                        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                        PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4"
                    ];
                    
                    $pdo = new PDO($config['dsn'], $username, $password, $options);
                    
                    // Test basic query
                    $stmt = $pdo->query("SELECT VERSION() as version, DATABASE() as current_db, USER() as current_user");
                    $result = $stmt->fetch(PDO::FETCH_ASSOC);
                    
                    echo "‚úÖ Connection successful!\n";
                    echo "   MySQL Version: {$result['version']}\n";
                    echo "   Connected DB: {$result['current_db']}\n";
                    echo "   Connected User: {$result['current_user']}\n";
                    
                    // Test permissions
                    try {
                        $pdo->exec("CREATE TABLE IF NOT EXISTS connection_test (id INT) ENGINE=InnoDB");
                        $pdo->exec("INSERT INTO connection_test (id) VALUES (1)");
                        $pdo->exec("SELECT * FROM connection_test LIMIT 1");
                        $pdo->exec("DROP TABLE connection_test");
                        echo "‚úÖ Full database permissions confirmed\n";
                    } catch (Exception $e) {
                        echo "‚ö†Ô∏è Limited permissions: " . $e->getMessage() . "\n";
                    }
                    
                    $workingConfig = $config;
                    break;
                    
                } catch (PDOException $e) {
                    echo "‚ùå Connection failed: " . $e->getMessage() . "\n";
                    
                    // Analyze error
                    if (strpos($e->getMessage(), 'Access denied') !== false) {
                        echo "   ‚ö†Ô∏è This is an authentication error\n";
                    } elseif (strpos($e->getMessage(), "Can't connect") !== false) {
                        echo "   ‚ö†Ô∏è This is a connection/network error\n";
                    } elseif (strpos($e->getMessage(), 'Unknown database') !== false) {
                        echo "   ‚ö†Ô∏è Database does not exist\n";
                    }
                }
            }
            
            if ($workingConfig) {
                echo "\nüéâ SUCCESS! Working configuration found:\n";
                echo "   Method: {$workingConfig['name']}\n";
                
                // Output .env configuration
                echo "\nüìù .env configuration to use:\n";
                echo "DB_CONNECTION=mysql\n";
                
                if (isset($workingConfig['socket'])) {
                    echo "DB_HOST=localhost\n";
                    echo "DB_SOCKET={$workingConfig['socket']}\n";
                } else {
                    echo "DB_HOST={$workingConfig['host']}\n";
                    if (isset($workingConfig['socket'])) {
                        echo "# Remove DB_SOCKET if present\n";
                    }
                }
                
                echo "DB_PORT=3306\n";
                echo "DB_DATABASE=$database\n";
                echo "DB_USERNAME=$username\n";
                echo "DB_PASSWORD=$password\n";
                
                // Write to file for shell script to read
                file_put_contents('/tmp/db_config.txt', json_encode($workingConfig));
                
                exit(0);
            } else {
                echo "\n‚ùå FAILED: No working database configuration found!\n";
                echo "\nüîß Troubleshooting steps:\n";
                echo "1. Verify database exists in Hostinger control panel\n";
                echo "2. Check username and password are correct\n";
                echo "3. Ensure user has privileges on the database\n";
                echo "4. Contact Hostinger support for correct connection details\n";
                
                exit(1);
            }
            EOPHP
            
            # Run the comprehensive test
            echo "üîç Running comprehensive database test..."
            if php fix-db-connection.php "$DB_DATABASE" "$DB_USERNAME" "$DB_PASSWORD" "$DB_HOST"; then
              echo ""
              echo "‚úÖ Working database configuration found!"
              
              # Read the working config
              if [ -f /tmp/db_config.txt ]; then
                echo "üîß Updating .env file with working configuration..."
                
                # Update .env based on working config
                DB_CONFIG=$(cat /tmp/db_config.txt)
                
                # Parse the working config and update .env
                if echo "$DB_CONFIG" | grep -q "socket"; then
                  SOCKET_PATH=$(echo "$DB_CONFIG" | php -r "
                    \$config = json_decode(file_get_contents('php://stdin'), true);
                    echo \$config['socket'] ?? '';
                  ")
                  
                  if [ -n "$SOCKET_PATH" ]; then
                    echo "Using socket connection: $SOCKET_PATH"
                    sed -i "s/^DB_HOST=.*/DB_HOST=localhost/" .env
                    
                    if grep -q "^DB_SOCKET=" .env; then
                      sed -i "s|^DB_SOCKET=.*|DB_SOCKET=$SOCKET_PATH|" .env
                    else
                      echo "DB_SOCKET=$SOCKET_PATH" >> .env
                    fi
                  fi
                else
                  WORKING_HOST=$(echo "$DB_CONFIG" | php -r "
                    \$config = json_decode(file_get_contents('php://stdin'), true);
                    echo \$config['host'] ?? 'localhost';
                  ")
                  
                  echo "Using TCP connection: $WORKING_HOST"
                  sed -i "s/^DB_HOST=.*/DB_HOST=$WORKING_HOST/" .env
                  
                  # Remove socket if present
                  sed -i '/^DB_SOCKET=/d' .env
                fi
                
                # Update other DB settings
                sed -i "s/^DB_DATABASE=.*/DB_DATABASE=$DB_DATABASE/" .env
                sed -i "s/^DB_USERNAME=.*/DB_USERNAME=$DB_USERNAME/" .env
                sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
                
                echo "‚úÖ .env file updated successfully"
                
                echo ""
                echo "üìã Current database configuration:"
                grep "^DB_" .env
              fi
              
              # Test Laravel connection
              echo ""
              echo "üîç Testing Laravel database connection..."
              php artisan config:clear
              
              if php artisan tinker --execute="
                try {
                  \$pdo = DB::connection()->getPdo();
                  echo 'Laravel DB connection: SUCCESS' . PHP_EOL;
                  echo 'Database: ' . DB::connection()->getDatabaseName() . PHP_EOL;
                } catch (Exception \$e) {
                  echo 'Laravel DB connection failed: ' . \$e->getMessage() . PHP_EOL;
                  exit(1);
                }
              "; then
                echo "‚úÖ Laravel can connect to database!"
                DB_CONNECTED=true
              else
                echo "‚ùå Laravel still cannot connect"
                DB_CONNECTED=false
              fi
              
            else
              echo "‚ùå No working database configuration found"
              echo ""
              echo "üîß Manual steps required:"
              echo "1. Check Hostinger control panel for correct database details"
              echo "2. Verify database user permissions in phpMyAdmin"
              echo "3. Contact Hostinger support if needed"
              DB_CONNECTED=false
            fi
            
            # Clean up
            rm -f fix-db-connection.php /tmp/db_config.txt
            
            # Run migrations if requested and database is connected
            if [ "${{ github.event.inputs.run_migrations }}" = "true" ] && [ "$DB_CONNECTED" = "true" ]; then
              echo ""
              echo "üóÑÔ∏è Running database migrations..."
              
              # Create backup first
              echo "üíæ Creating database backup..."
              BACKUP_FILE="~/backups/database/pre_migration_$(date +%Y%m%d_%H%M%S).sql"
              mkdir -p ~/backups/database
              
              mysqldump -h "$(grep '^DB_HOST=' .env | cut -d'=' -f2)" \
                        -u "$(grep '^DB_USERNAME=' .env | cut -d'=' -f2)" \
                        -p"$(grep '^DB_PASSWORD=' .env | cut -d'=' -f2)" \
                        "$(grep '^DB_DATABASE=' .env | cut -d'=' -f2)" > "$BACKUP_FILE" 2>/dev/null || {
                echo "‚ö†Ô∏è Backup failed, continuing with migrations..."
              }
              
              # Run migrations
              if php artisan migrate --force; then
                echo "‚úÖ Migrations completed successfully!"
              else
                echo "‚ùå Migrations failed"
                echo "üí° You may need to run migrations manually"
              fi
            fi
            
            echo ""
            echo "üéâ Database connection fix completed!"
            echo "üìä Status: $([ "$DB_CONNECTED" = "true" ] && echo "‚úÖ Connected" || echo "‚ùå Still needs manual fix")"
            
            exit 0

      - name: Verify Fix Results
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            echo "üîç Verification Results"
            echo "======================"
            
            echo "üìã Current .env database settings:"
            grep "^DB_" .env
            
            echo ""
            echo "üîó Testing final connection..."
            if php artisan tinker --execute="
              try {
                \$pdo = DB::connection()->getPdo();
                echo '‚úÖ Final verification: Database connection working!' . PHP_EOL;
                echo 'Database: ' . DB::connection()->getDatabaseName() . PHP_EOL;
                echo 'Tables count: ' . DB::select('SHOW TABLES') . PHP_EOL;
              } catch (Exception \$e) {
                echo '‚ùå Final verification failed: ' . \$e->getMessage() . PHP_EOL;
              }
            "; then
              
              echo ""
              echo "üé® Rebuilding application caches..."
              php artisan config:cache
              php artisan route:cache
              php artisan view:cache
              
              echo ""
              echo "‚úÖ Database connection successfully fixed!"
              echo "üåê Your application should now work properly"
              
            else
              echo ""
              echo "‚ùå Database connection still not working"
              echo "üìû Please contact Hostinger support with these details:"
              echo "   - Database name: $(grep '^DB_DATABASE=' .env | cut -d'=' -f2)"
              echo "   - Username: $(grep '^DB_USERNAME=' .env | cut -d'=' -f2)"
              echo "   - Attempted hosts: localhost, 127.0.0.1, mysql.hostinger.com"
            fi

      - name: Summary Report
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üìä Database Fix Summary"
            echo "======================"
            echo "Date: $(date)"
            echo "Inputs:"
            echo "  - Host: ${{ github.event.inputs.db_host }}"
            echo "  - Database: ${{ github.event.inputs.db_database }}"
            echo "  - Username: ${{ github.event.inputs.db_username }}"
            echo "  - Run Migrations: ${{ github.event.inputs.run_migrations }}"
            echo ""
            
            cd domains/dokterkuklinik.com/public_html/dokterku
            
            echo "Final .env database config:"
            grep "^DB_" .env
            echo ""
            
            echo "ü§ñ Generated with [Claude Code](https://claude.ai/code)"
            echo "üîß Database connection diagnostic and fix workflow"