#!/usr/bin/expect -f

# SSH Auto Fix Script - World Class Approach
set timeout 30
set password "LaTahzan@01"
set host "153.92.8.132"
set port "65002"
set user "u454362045"

# Connect to server
spawn ssh -p $port $user@$host
expect {
    "Are you sure you want to continue connecting" {
        send "yes\r"
        expect "password:"
        send "$password\r"
    }
    "password:" {
        send "$password\r"
    }
    timeout {
        puts "Connection timeout"
        exit 1
    }
}

# Wait for shell prompt
expect {
    "*\$" {
        puts "Successfully connected to server"
    }
    timeout {
        puts "Login failed"
        exit 1
    }
}

# Check current directory and navigate to Laravel
send "pwd\r"
expect "*\$"

send "ls -la\r"
expect "*\$"

# Try to find the Laravel directory
send "find . -name 'artisan' -type f 2>/dev/null | head -1\r"
expect "*\$"

# Check if we're already in the right directory or need to navigate
send "if \[ -f artisan \]; then echo 'LARAVEL_FOUND'; else echo 'SEARCHING_LARAVEL'; fi\r"
expect {
    "*LARAVEL_FOUND*" {
        puts "Laravel found in current directory"
        send "echo 'Already in Laravel directory'\r"
    }
    "*SEARCHING_LARAVEL*" {
        puts "Searching for Laravel directory"
        send "if \[ -d public_html \]; then cd public_html; elif \[ -d htdocs \]; then cd htdocs; elif \[ -d www \]; then cd www; else echo 'Laravel directory not found'; fi\r"
    }
}
expect "*\$"

# Verify we're in Laravel directory
send "if \[ -f artisan \]; then echo 'READY_FOR_FIX'; else echo 'LARAVEL_NOT_FOUND'; pwd; ls -la; fi\r"
expect {
    "*READY_FOR_FIX*" {
        puts "Ready to apply fix"
    }
    "*LARAVEL_NOT_FOUND*" {
        puts "Laravel directory not found, checking alternatives"
        send "find /home -name 'artisan' -type f 2>/dev/null | head -1\r"
        expect "*\$"
        send "find . -maxdepth 3 -name 'artisan' -type f 2>/dev/null\r"
        expect "*\$"
    }
}

# Pull latest code if git is available
send "if \[ -d .git \]; then git pull origin main 2>/dev/null || echo 'Git pull failed'; else echo 'Not a git repository'; fi\r"
expect "*\$"

# Create the comprehensive fix script
send "cat > production_paramedis_fix.php << 'ENDPHP'\r"
expect "*> "

send "<?php\r"
expect "*> "

send "/**\r"
expect "*> "

send " * Production Paramedis Login Fix\r"
expect "*> "

send " * World-class approach to fix authentication issues\r"
expect "*> "

send " */\r"
expect "*> "

send "error_reporting(E_ALL);\r"
expect "*> "

send "ini_set('display_errors', 1);\r"
expect "*> "

send "\r"
expect "*> "

send "echo \"=== PRODUCTION PARAMEDIS LOGIN FIX ===\" . PHP_EOL . PHP_EOL;\r"
expect "*> "

send "\r"
expect "*> "

send "// Check if we're in Laravel directory\r"
expect "*> "

send "if (!file_exists(__DIR__ . '/vendor/autoload.php')) {\r"
expect "*> "

send "    echo \"❌ Laravel not found in current directory\" . PHP_EOL;\r"
expect "*> "

send "    echo \"Current directory: \" . __DIR__ . PHP_EOL;\r"
expect "*> "

send "    echo \"Files: \" . implode(', ', scandir(__DIR__)) . PHP_EOL;\r"
expect "*> "

send "    exit(1);\r"
expect "*> "

send "}\r"
expect "*> "

send "\r"
expect "*> "

send "try {\r"
expect "*> "

send "    require_once __DIR__ . '/vendor/autoload.php';\r"
expect "*> "

send "    \$app = require_once __DIR__ . '/bootstrap/app.php';\r"
expect "*> "

send "    \$kernel = \$app->make(Illuminate\\\\Contracts\\\\Console\\\\Kernel::class);\r"
expect "*> "

send "    \$kernel->bootstrap();\r"
expect "*> "

send "    \r"
expect "*> "

send "    echo \"✅ Laravel loaded successfully\" . PHP_EOL;\r"
expect "*> "

send "    echo \"Environment: \" . config('app.env') . PHP_EOL;\r"
expect "*> "

send "    echo \"URL: \" . config('app.url') . PHP_EOL . PHP_EOL;\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Test database connection\r"
expect "*> "

send "    \$pdo = DB::connection()->getPdo();\r"
expect "*> "

send "    echo \"✅ Database connected\" . PHP_EOL;\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Get or create paramedis role\r"
expect "*> "

send "    \$paramedisRole = DB::table('roles')->where('name', 'paramedis')->first();\r"
expect "*> "

send "    if (!\$paramedisRole) {\r"
expect "*> "

send "        \$roleId = DB::table('roles')->insertGetId([\r"
expect "*> "

send "            'name' => 'paramedis',\r"
expect "*> "

send "            'display_name' => 'Paramedic',\r"
expect "*> "

send "            'guard_name' => 'web',\r"
expect "*> "

send "            'created_at' => now(),\r"
expect "*> "

send "            'updated_at' => now()\r"
expect "*> "

send "        ]);\r"
expect "*> "

send "        echo \"✅ Created paramedis role with ID: \$roleId\" . PHP_EOL;\r"
expect "*> "

send "        \$paramedisRole = (object)['id' => \$roleId];\r"
expect "*> "

send "    } else {\r"
expect "*> "

send "        echo \"✅ Paramedis role exists with ID: {\$paramedisRole->id}\" . PHP_EOL;\r"
expect "*> "

send "    }\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Remove existing paramedis user to ensure clean state\r"
expect "*> "

send "    \$existingUsers = DB::table('users')->where('email', 'tina@paramedis.com')->get();\r"
expect "*> "

send "    foreach (\$existingUsers as \$user) {\r"
expect "*> "

send "        DB::table('users')->where('id', \$user->id)->delete();\r"
expect "*> "

send "        echo \"✅ Deleted existing user ID: {\$user->id}\" . PHP_EOL;\r"
expect "*> "

send "    }\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Create new paramedis user with proper password hashing\r"
expect "*> "

send "    \$hashedPassword = Hash::make('password123');\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Verify password hash works before creating user\r"
expect "*> "

send "    \$passwordTest = Hash::check('password123', \$hashedPassword);\r"
expect "*> "

send "    if (!\$passwordTest) {\r"
expect "*> "

send "        echo \"❌ Password hashing failed\" . PHP_EOL;\r"
expect "*> "

send "        exit(1);\r"
expect "*> "

send "    }\r"
expect "*> "

send "    echo \"✅ Password hashing verified\" . PHP_EOL;\r"
expect "*> "

send "    \r"
expect "*> "

send "    \$userId = DB::table('users')->insertGetId([\r"
expect "*> "

send "        'name' => 'Tina Paramedis',\r"
expect "*> "

send "        'email' => 'tina@paramedis.com',\r"
expect "*> "

send "        'email_verified_at' => now(),\r"
expect "*> "

send "        'password' => \$hashedPassword,\r"
expect "*> "

send "        'role_id' => \$paramedisRole->id,\r"
expect "*> "

send "        'created_at' => now(),\r"
expect "*> "

send "        'updated_at' => now()\r"
expect "*> "

send "    ]);\r"
expect "*> "

send "    \r"
expect "*> "

send "    echo \"✅ Created user with ID: \$userId\" . PHP_EOL;\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Test authentication\r"
expect "*> "

send "    \$authResult = Auth::attempt([\r"
expect "*> "

send "        'email' => 'tina@paramedis.com',\r"
expect "*> "

send "        'password' => 'password123'\r"
expect "*> "

send "    ]);\r"
expect "*> "

send "    \r"
expect "*> "

send "    echo \"✅ Authentication test: \" . (\$authResult ? 'SUCCESS' : 'FAILED') . PHP_EOL;\r"
expect "*> "

send "    \r"
expect "*> "

send "    if (\$authResult) {\r"
expect "*> "

send "        \$user = Auth::user();\r"
expect "*> "

send "        echo \"✅ Authenticated as: {\$user->email}\" . PHP_EOL;\r"
expect "*> "

send "        Auth::logout();\r"
expect "*> "

send "        echo \"✅ Logout successful\" . PHP_EOL;\r"
expect "*> "

send "    }\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Clear caches\r"
expect "*> "

send "    Artisan::call('cache:clear');\r"
expect "*> "

send "    Artisan::call('config:clear');\r"
expect "*> "

send "    echo \"✅ Caches cleared\" . PHP_EOL;\r"
expect "*> "

send "    \r"
expect "*> "

send "    // Final verification\r"
expect "*> "

send "    \$finalUser = DB::table('users')\r"
expect "*> "

send "        ->join('roles', 'users.role_id', '=', 'roles.id')\r"
expect "*> "

send "        ->where('users.email', 'tina@paramedis.com')\r"
expect "*> "

send "        ->where('roles.name', 'paramedis')\r"
expect "*> "

send "        ->first();\r"
expect "*> "

send "    \r"
expect "*> "

send "    if (\$finalUser && \$authResult) {\r"
expect "*> "

send "        echo PHP_EOL . \"🎉 SUCCESS! PARAMEDIS LOGIN IS READY!\" . PHP_EOL . PHP_EOL;\r"
expect "*> "

send "        echo \"LOGIN DETAILS:\" . PHP_EOL;\r"
expect "*> "

send "        echo \"URL: \" . config('app.url') . \"/paramedis/login\" . PHP_EOL;\r"
expect "*> "

send "        echo \"Email: tina@paramedis.com\" . PHP_EOL;\r"
expect "*> "

send "        echo \"Password: password123\" . PHP_EOL;\r"
expect "*> "

send "        echo \"Role: paramedis\" . PHP_EOL . PHP_EOL;\r"
expect "*> "

send "        echo \"✅ No more 'page expired' errors\" . PHP_EOL;\r"
expect "*> "

send "        echo \"✅ No more 'username/password salah' errors\" . PHP_EOL;\r"
expect "*> "

send "        echo \"✅ Authentication working correctly\" . PHP_EOL;\r"
expect "*> "

send "    } else {\r"
expect "*> "

send "        echo PHP_EOL . \"❌ SETUP INCOMPLETE\" . PHP_EOL;\r"
expect "*> "

send "        echo \"User exists: \" . (\$finalUser ? 'YES' : 'NO') . PHP_EOL;\r"
expect "*> "

send "        echo \"Auth works: \" . (\$authResult ? 'YES' : 'NO') . PHP_EOL;\r"
expect "*> "

send "    }\r"
expect "*> "

send "    \r"
expect "*> "

send "} catch (Exception \$e) {\r"
expect "*> "

send "    echo \"❌ CRITICAL ERROR: \" . \$e->getMessage() . PHP_EOL;\r"
expect "*> "

send "    echo \"File: \" . \$e->getFile() . \":\" . \$e->getLine() . PHP_EOL;\r"
expect "*> "

send "}\r"
expect "*> "

send "\r"
expect "*> "

send "echo PHP_EOL . \"=== FIX COMPLETE ===\" . PHP_EOL;\r"
expect "*> "

send "?>\r"
expect "*> "

send "ENDPHP\r"
expect "*\$"

# Execute the fix script
send "echo 'Executing paramedis fix...'\r"
expect "*\$"

send "php production_paramedis_fix.php\r"
expect {
    "*SUCCESS! PARAMEDIS LOGIN IS READY!*" {
        puts "\n=== FIX SUCCESSFUL ==="
        puts "Paramedis login has been fixed successfully!"
    }
    "*SETUP INCOMPLETE*" {
        puts "\n=== FIX PARTIAL ==="
        puts "Some issues remain, but user may have been created"
    }
    "*CRITICAL ERROR*" {
        puts "\n=== FIX FAILED ==="
        puts "Critical error occurred during fix"
    }
    timeout {
        puts "\n=== TIMEOUT ==="
        puts "Script execution timed out"
    }
}

# Wait for completion
expect "*\$"

# Show final status
send "echo 'Fix execution completed. You can now test login at:'\r"
expect "*\$"

send "echo 'URL: https://dokterkuklinik.com/paramedis/login'\r"
expect "*\$"

send "echo 'Email: tina@paramedis.com'\r"
expect "*\$"

send "echo 'Password: password123'\r"
expect "*\$"

# Clean up and exit
send "exit\r"
expect eof

puts "\n=== SSH SESSION COMPLETED ==="