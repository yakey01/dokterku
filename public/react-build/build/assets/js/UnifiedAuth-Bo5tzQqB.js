var f=Object.defineProperty;var k=(s,e,t)=>e in s?f(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var h=(s,e,t)=>k(s,typeof e!="symbol"?e+"":e,t);const l=class l{static getInstance(){return l.instance||(l.instance=new l),l.instance}getAuthHeaders(){const e={Accept:"application/json","Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"},t=this.getToken();return t&&(e.Authorization=`Bearer ${t}`),e}getToken(){const e=localStorage.getItem("dokterku_auth_token")||sessionStorage.getItem("dokterku_auth_token")||localStorage.getItem("api_token")||sessionStorage.getItem("api_token");if(e&&e.trim())return e.trim();const t=this.extractTokenFromMeta();return t?(this.setToken(t),console.log("‚úÖ Token extracted and stored from meta tag"),t):null}extractTokenFromMeta(){try{const e=document.querySelector('meta[name="api-token"]');if(!e)return console.warn("‚ö†Ô∏è No api-token meta tag found"),null;const t=e.getAttribute("content");if(!t||!t.trim())return console.warn("‚ö†Ô∏è api-token meta tag is empty"),null;const n=t.trim();return n.length<10?(console.warn("‚ö†Ô∏è api-token appears to be too short:",n.substring(0,5)+"..."),null):(console.log("‚úÖ Valid token extracted from meta tag:",n.substring(0,10)+"..."),n)}catch(e){return console.error("üî• Error extracting token from meta tag:",e),null}}setToken(e,t=!0){t?(localStorage.setItem("dokterku_auth_token",e),localStorage.setItem("api_token",e)):(sessionStorage.setItem("dokterku_auth_token",e),sessionStorage.setItem("api_token",e))}clearToken(){localStorage.removeItem("dokterku_auth_token"),sessionStorage.removeItem("dokterku_auth_token"),localStorage.removeItem("api_token"),sessionStorage.removeItem("api_token")}async isAuthenticated(){try{return this.getToken()?(await this.makeRequest("/api/v2/auth/me")).ok?!0:(await this.makeRequest("/api/user")).ok:!1}catch{return!1}}async login(e,t,n){var c,i,o;try{const a=await fetch("/api/v2/auth/login",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"},body:JSON.stringify({login:e,password:t,device_id:n||`web-${Date.now()}`,device_name:"Web Browser",client_type:"web_app",device_type:"desktop",platform:"web"})}),r=await a.json();return a.ok&&r.success&&((i=(c=r.data)==null?void 0:c.authentication)!=null&&i.token)?(this.setToken(r.data.authentication.token),{success:!0,data:r.data}):a.ok&&r.success&&((o=r.data)!=null&&o.token)?(this.setToken(r.data.token),{success:!0,data:r.data}):{success:!1,error:r.message||"Login failed"}}catch(a){return console.error("Login error:",a),{success:!1,error:"Network error during login"}}}async logout(){try{await this.makeRequest("/api/v2/auth/logout",{method:"POST"})}catch{}finally{this.clearToken()}}async makeRequest(e,t={}){const n={...this.getAuthHeaders(),...t.headers};return fetch(e,{...t,headers:n,credentials:"include"})}async makeJsonRequest(e,t={},n=0){try{const i=await this.makeRequest(e,t);if(!i.ok){if(i.status===401&&n<2){console.log("üîÑ 401 Unauthorized - attempting token refresh and retry"),this.clearToken();const m=this.extractTokenFromMeta();if(m)return this.setToken(m),console.log("‚úÖ Fresh token extracted from meta tag, retrying request"),this.makeJsonRequest(e,t,n+1);if(window.location.pathname.includes("/dokter"))throw console.log("üö® No valid token found, redirecting to login"),window.location.href="/login?redirect="+encodeURIComponent(window.location.pathname),new Error("Authentication required - redirecting to login")}let o={};try{o=await i.json()}catch{o={message:`HTTP ${i.status}: ${i.statusText}`}}let a=o.message||o.error||`Request failed: ${i.status}`;o.code&&(a=`${o.code}: ${a}`),console.error("üî• API Request failed:",{url:e,status:i.status,statusText:i.statusText,error:a,errorCode:o.code,errorDetails:o,retryCount:n});const r=new Error(a);throw r.code=o.code,r.details=o,r}return i.json()}catch(i){if(n<2&&this.isRetryableError(i))return console.log("üîÑ Network error - retrying request"),await this.delay(1e3*(n+1)),this.makeJsonRequest(e,t,n+1);throw i}}isRetryableError(e){var t;return!!(e instanceof TypeError&&e.message.includes("fetch")||(t=e.message)!=null&&t.includes("timeout"))}delay(e){return new Promise(t=>setTimeout(t,e))}initializeFromMetaTag(){if(this.getToken())console.log("üîß UnifiedAuth initialized with existing stored token");else{const e=this.extractTokenFromMeta();e?(this.setToken(e),console.log("üîß UnifiedAuth initialized with meta tag token")):console.warn("‚ö†Ô∏è No token found in storage or meta tags during initialization")}}};h(l,"instance");let d=l,u=null;const g=()=>(u||(u=d.getInstance()),u);if(typeof document<"u"&&typeof window<"u"){const s=()=>{try{const e=g();if(e&&typeof e.initializeFromMetaTag=="function")e.initializeFromMetaTag(),console.log("‚úÖ UnifiedAuth initialized successfully");else throw console.warn("‚ö†Ô∏è UnifiedAuth instance not ready, deferring initialization"),new Error("UnifiedAuth instance not ready")}catch(e){console.warn("‚ö†Ô∏è UnifiedAuth initialization deferred due to error:",e);let t=0;const n=3,c=()=>{t++;const i=Math.min(100*Math.pow(2,t-1),1e3);setTimeout(()=>{try{const o=g();o&&typeof o.initializeFromMetaTag=="function"?(o.initializeFromMetaTag(),console.log(`‚úÖ UnifiedAuth initialized successfully on retry ${t}`)):t<n?c():console.error("‚ùå UnifiedAuth initialization failed after all retries")}catch(o){t<n?(console.warn(`‚ö†Ô∏è UnifiedAuth retry ${t} failed, trying again...`,o),c()):console.error("‚ùå UnifiedAuth initialization failed after all retries:",o)}},i)};c()}};document.readyState==="loading"?document.addEventListener("DOMContentLoaded",s):setTimeout(s,0)}else console.warn("‚ö†Ô∏è Browser environment not detected - UnifiedAuth initialization skipped");export{g};
