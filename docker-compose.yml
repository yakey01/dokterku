version: '3.8'

services:
  app:
    build:
      context: ./docker/8.3
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    image: dokterku-app
    container_name: dokterku-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - './:/var/www/html'
      - './docker/8.3/php.ini:/etc/php/8.3/cli/conf.d/99-sail.ini'
    ports:
      - '${APP_PORT:-8000}:80'
    environment:
      SUPERVISOR_PHP_COMMAND: "/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
      SUPERVISOR_PHP_USER: "sail"
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: '${DB_DATABASE:-dokterku}'
      DB_USERNAME: '${DB_USERNAME:-dokterku_user}'
      DB_PASSWORD: '${DB_PASSWORD:-dokterku_password}'
    depends_on:
      - mysql
      - redis
    networks:
      - dokterku-network

  mysql:
    image: 'mysql:8.0'
    container_name: dokterku-mysql
    restart: unless-stopped
    ports:
      - '${FORWARD_DB_PORT:-3306}:3306'
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD:-root_password}'
      MYSQL_DATABASE: '${DB_DATABASE:-dokterku}'
      MYSQL_USER: '${DB_USERNAME:-dokterku_user}'
      MYSQL_PASSWORD: '${DB_PASSWORD:-dokterku_password}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    volumes:
      - 'dokterku-mysql:/var/lib/mysql'
      - './docker/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
    networks:
      - dokterku-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      retries: 3
      timeout: 5s

  redis:
    image: 'redis:alpine'
    container_name: dokterku-redis
    restart: unless-stopped
    ports:
      - '${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - 'dokterku-redis:/data'
    networks:
      - dokterku-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 5s

  queue:
    build:
      context: ./docker/8.3
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    image: dokterku-app
    container_name: dokterku-queue
    restart: unless-stopped
    working_dir: /var/www/html
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    volumes:
      - './:/var/www/html'
    environment:
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: '${DB_DATABASE:-dokterku}'
      DB_USERNAME: '${DB_USERNAME:-dokterku_user}'
      DB_PASSWORD: '${DB_PASSWORD:-dokterku_password}'
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - mysql
      - redis
    networks:
      - dokterku-network

  scheduler:
    build:
      context: ./docker/8.3
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    image: dokterku-app
    container_name: dokterku-scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    command: supercronic /etc/crontab
    volumes:
      - './:/var/www/html'
      - './docker/scheduler/crontab:/etc/crontab'
    environment:
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: '${DB_DATABASE:-dokterku}'
      DB_USERNAME: '${DB_USERNAME:-dokterku_user}'
      DB_PASSWORD: '${DB_PASSWORD:-dokterku_password}'
    depends_on:
      - mysql
      - redis
    networks:
      - dokterku-network

  nginx:
    image: nginx:alpine
    container_name: dokterku-nginx
    restart: unless-stopped
    ports:
      - '${NGINX_PORT:-80}:80'
      - '${NGINX_SSL_PORT:-443}:443'
    volumes:
      - './:/var/www/html'
      - './docker/nginx/default.conf:/etc/nginx/conf.d/default.conf'
      - './docker/nginx/ssl:/etc/nginx/ssl'
    depends_on:
      - app
    networks:
      - dokterku-network

networks:
  dokterku-network:
    driver: bridge

volumes:
  dokterku-mysql:
    driver: local
  dokterku-redis:
    driver: local