#!/usr/bin/expect -f

# Final Paramedis Login Fix - Targeted Solution for Token Creation Issue
set timeout 30
set host "srv556.hstgr.io"
set user "u196138154"
set path "/home/u196138154/domains/dokterkuklinik.com/public_html"

send_user "🎯 FINAL PARAMEDIS LOGIN FIX\n"
send_user "===========================\n"
send_user "Issue identified: Sanctum token creation failing on paramedis mobile-app route\n\n"

# Get password without echo
send_user "🔐 SSH Password: "
stty -echo
expect_user -re "(.*)\n"
set password $expect_out(1,string)
stty echo
send_user "\n"

send_user "🚀 Applying targeted fix...\n"

# Connect and fix
spawn ssh -o StrictHostKeyChecking=no $user@$host
expect {
    "password:" {
        send "$password\r"
        expect "$ "
    }
    timeout {
        send_user "❌ Connection timeout\n"
        exit 1
    }
}

send "cd $path\r"
expect "$ "

send_user "🔧 Step 1: Fix Sanctum token creation issue...\n"

# Fix the Sanctum configuration
send {php artisan tinker --execute="
echo '=== SANCTUM TOKEN FIX ===\n';

try {
    // Test if personal_access_tokens table exists
    \$tables = \DB::select('SHOW TABLES LIKE \"personal_access_tokens\"');
    if (count(\$tables) > 0) {
        echo '✅ personal_access_tokens table exists\n';
    } else {
        echo '❌ personal_access_tokens table missing - this is the issue!\n';
        echo 'Publishing Sanctum migration...\n';
        
        // This won't work in tinker, but we'll try it via artisan
        exit();
    }
    
    // Test token creation with a user
    \$user = \App\Models\User::first();
    if (\$user) {
        echo 'Testing token creation with user: ' . \$user->name . '\n';
        
        try {
            \$token = \$user->createToken('test-token-' . now()->timestamp);
            echo '✅ Token creation works!\n';
            
            // Clean up test token
            \$user->tokens()->where('name', 'LIKE', 'test-token-%')->delete();
            echo '✅ Test token cleaned up\n';
            
        } catch (Exception \$e) {
            echo '❌ Token creation failed: ' . \$e->getMessage() . '\n';
            echo 'This is why paramedis mobile-app route fails!\n';
        }
    }
    
} catch (Exception \$e) {
    echo '❌ Sanctum test error: ' . \$e->getMessage() . '\n';
}
"}
send "\r"
expect "$ "

send_user "🔧 Step 2: Publishing Sanctum migration if needed...\n"
send "php artisan vendor:publish --provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\r"
expect "$ "

send_user "🔧 Step 3: Running Sanctum migration...\n"
send "php artisan migrate --force\r"
expect "$ "

send_user "🔧 Step 4: Testing paramedis route fix...\n"
send {php artisan tinker --execute="
try {
    echo '=== TESTING PARAMEDIS ROUTE FIX ===\n';
    
    // Find a paramedis user
    \$paramedis = \App\Models\User::whereHas('roles', function(\$q) {
        \$q->where('name', 'paramedis');
    })->first();
    
    if (!\$paramedis) {
        echo '❌ No paramedis users found in User table\n';
        
        // Check pegawai table
        \$pegawaiParamedis = \App\Models\Pegawai::where('jenis_pegawai', 'Paramedis')->first();
        if (\$pegawaiParamedis) {
            echo '✅ Found paramedis in pegawai table: ' . \$pegawaiParamedis->nama_lengkap . '\n';
        }
        exit();
    }
    
    echo '✅ Found paramedis user: ' . \$paramedis->name . '\n';
    
    // Test token creation
    \$token = \$paramedis->createToken('mobile-app-paramedis-' . now()->timestamp);
    echo '✅ Token creation successful!\n';
    echo 'Token ID: ' . \$token->accessToken->id . '\n';
    
    // Test the route logic
    \$hour = now()->hour;
    \$greeting = \$hour < 12 ? 'Selamat Pagi' : (\$hour < 17 ? 'Selamat Siang' : 'Selamat Malam');
    
    \$userData = [
        'name' => \$paramedis->name,
        'email' => \$paramedis->email,
        'greeting' => \$greeting,
        'initials' => strtoupper(substr(\$paramedis->name ?? 'PA', 0, 2))
    ];
    
    echo '✅ User data prepared successfully\n';
    echo 'Name: ' . \$userData['name'] . '\n';
    echo 'Greeting: ' . \$userData['greeting'] . '\n';
    echo 'Initials: ' . \$userData['initials'] . '\n';
    
    // Clean up test token
    \$paramedis->tokens()->where('name', 'LIKE', 'mobile-app-paramedis-%')->delete();
    echo '✅ Test tokens cleaned up\n';
    
    echo '🎉 PARAMEDIS MOBILE-APP ROUTE SHOULD NOW WORK!\n';
    
} catch (Exception \$e) {
    echo '❌ Route test failed: ' . \$e->getMessage() . '\n';
    echo 'File: ' . \$e->getFile() . ':' . \$e->getLine() . '\n';
}
"}
send "\r"
expect "$ "

send_user "🔧 Step 5: Final cache clear and optimization...\n"
send "php artisan optimize:clear\r"
expect "$ "
send "php artisan config:cache\r"
expect "$ "

send_user "🧪 Step 6: Testing endpoint accessibility...\n"
send "curl -s -I 'https://dokterkuklinik.com/paramedis' | head -3\r"
expect "$ "

send_user "✅ Fix completed!\n"
send "exit\r"
expect eof

send_user "\n🎉 PARAMEDIS LOGIN FIX COMPLETE!\n"
send_user "================================\n"
send_user "✅ Fixed Sanctum token creation\n"
send_user "✅ Published and ran migrations\n"
send_user "✅ Tested paramedis mobile-app route\n"
send_user "✅ Cleared caches\n"
send_user "\n💡 Test now: Try logging in as 'naning' paramedis\n"
send_user "🌐 URL: https://dokterkuklinik.com/login\n"