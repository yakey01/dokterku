<?php

namespace App\Filament\Manajer\Widgets;

use Filament\Widgets\Widget;
use App\Models\Pegawai;
use App\Models\Dokter;
use App\Models\Tindakan;
use App\Models\Pendapatan;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class ManajerTeamPerformanceWidget extends Widget
{
    protected static string $view = 'filament.manajer.widgets.team-performance-widget';
    
    protected int | string | array $columnSpan = 'full';
    
    protected static ?int $sort = 3;

    public function getViewData(): array
    {
        $currentMonth = Carbon::now();
        
        return [
            'performance_metrics' => $this->getPerformanceMetrics(),
            'top_performers' => $this->getTopPerformers(),
            'efficiency_data' => $this->getEfficiencyData(),
            'team_overview' => $this->getTeamOverview(),
        ];
    }

    private function getPerformanceMetrics(): array
    {
        $currentMonth = Carbon::now();
        
        // Staff performance by role
        $paramedisPerformance = $this->calculateRolePerformance('Paramedis');
        $nonParamedisPerformance = $this->calculateRolePerformance('Non-Paramedis');
        $dokterPerformance = $this->calculateDokterPerformance();
        
        return [
            'paramedis' => $paramedisPerformance,
            'non_paramedis' => $nonParamedisPerformance,
            'dokter' => $dokterPerformance,
            'overall_efficiency' => $this->calculateOverallEfficiency(),
        ];
    }

    private function calculateRolePerformance(string $role): array
    {
        $currentMonth = Carbon::now();
        
        // Get staff count for this role
        $staffCount = Pegawai::where('jenis_pegawai', $role)
            ->where('aktif', true)
            ->count();
            
        // Get procedures handled by this role
        $procedureColumn = $role === 'Paramedis' ? 'paramedis_id' : 'non_paramedis_id';
        
        $procedures = Tindakan::whereMonth('created_at', $currentMonth->month)
            ->whereYear('created_at', $currentMonth->year)
            ->whereNotNull($procedureColumn)
            ->count();
            
        // Get revenue generated by this role
        $revenueColumn = $role === 'Paramedis' ? 'jasa_paramedis' : 'jasa_non_paramedis';
        
        $revenue = Pendapatan::whereMonth('created_at', $currentMonth->month)
            ->whereYear('created_at', $currentMonth->year)
            ->sum($revenueColumn);
            
        $efficiency = $staffCount > 0 ? ($procedures / $staffCount) : 0;
        $avgRevenuePerStaff = $staffCount > 0 ? ($revenue / $staffCount) : 0;
        
        return [
            'staff_count' => $staffCount,
            'procedures' => $procedures,
            'revenue' => $revenue,
            'efficiency' => $efficiency,
            'avg_revenue_per_staff' => $avgRevenuePerStaff,
            'performance_score' => $this->calculatePerformanceScore($efficiency, $avgRevenuePerStaff),
        ];
    }

    private function calculateDokterPerformance(): array
    {
        $currentMonth = Carbon::now();
        
        $dokterCount = Dokter::where('aktif', true)->count();
        
        $procedures = Tindakan::whereMonth('created_at', $currentMonth->month)
            ->whereYear('created_at', $currentMonth->year)
            ->whereNotNull('dokter_id')
            ->count();
            
        $revenue = Pendapatan::whereMonth('created_at', $currentMonth->month)
            ->whereYear('created_at', $currentMonth->year)
            ->sum('jasa_dokter');
            
        $efficiency = $dokterCount > 0 ? ($procedures / $dokterCount) : 0;
        $avgRevenuePerDokter = $dokterCount > 0 ? ($revenue / $dokterCount) : 0;
        
        return [
            'staff_count' => $dokterCount,
            'procedures' => $procedures,
            'revenue' => $revenue,
            'efficiency' => $efficiency,
            'avg_revenue_per_staff' => $avgRevenuePerDokter,
            'performance_score' => $this->calculatePerformanceScore($efficiency, $avgRevenuePerDokter),
        ];
    }

    private function calculatePerformanceScore(float $efficiency, float $avgRevenue): int
    {
        // Normalize efficiency (target: 30 procedures per staff per month)
        $efficiencyScore = min(($efficiency / 30) * 50, 50);
        
        // Normalize revenue (target: 5,000,000 per staff per month)
        $revenueScore = min(($avgRevenue / 5000000) * 50, 50);
        
        return (int) round($efficiencyScore + $revenueScore);
    }

    private function getTopPerformers(): array
    {
        $currentMonth = Carbon::now();
        
        // Top performing staff based on procedures and revenue
        $topPerformers = [];
        
        // Top Paramedis
        $topParamedis = Pegawai::where('jenis_pegawai', 'Paramedis')
            ->where('aktif', true)
            ->withCount(['tindakanAsParamedis' => function ($query) use ($currentMonth) {
                $query->whereMonth('created_at', $currentMonth->month)
                    ->whereYear('created_at', $currentMonth->year);
            }])
            ->orderBy('tindakan_as_paramedis_count', 'desc')
            ->take(3)
            ->get();
            
        // Top Non-Paramedis
        $topNonParamedis = Pegawai::where('jenis_pegawai', 'Non-Paramedis')
            ->where('aktif', true)
            ->withCount(['tindakanAsNonParamedis' => function ($query) use ($currentMonth) {
                $query->whereMonth('created_at', $currentMonth->month)
                    ->whereYear('created_at', $currentMonth->year);
            }])
            ->orderBy('tindakan_as_non_paramedis_count', 'desc')
            ->take(3)
            ->get();
            
        // Top Dokter
        $topDokter = Dokter::where('aktif', true)
            ->withCount(['tindakan' => function ($query) use ($currentMonth) {
                $query->whereMonth('created_at', $currentMonth->month)
                    ->whereYear('created_at', $currentMonth->year);
            }])
            ->orderBy('tindakan_count', 'desc')
            ->take(3)
            ->get();
        
        return [
            'paramedis' => $topParamedis,
            'non_paramedis' => $topNonParamedis,
            'dokter' => $topDokter,
        ];
    }

    private function getEfficiencyData(): array
    {
        $currentMonth = Carbon::now();
        
        // Daily efficiency for the current month
        $dailyEfficiency = [];
        $daysInMonth = $currentMonth->daysInMonth;
        
        for ($day = 1; $day <= $daysInMonth; $day++) {
            $date = Carbon::create($currentMonth->year, $currentMonth->month, $day);
            
            if ($date->isFuture()) break;
            
            $dailyProcedures = Tindakan::whereDate('created_at', $date)->count();
            $activeStaff = Pegawai::where('aktif', true)->count() + Dokter::where('aktif', true)->count();
            
            $efficiency = $activeStaff > 0 ? ($dailyProcedures / $activeStaff) * 100 : 0;
            
            $dailyEfficiency[] = [
                'date' => $date->format('Y-m-d'),
                'day' => $day,
                'procedures' => $dailyProcedures,
                'efficiency' => round($efficiency, 1),
            ];
        }
        
        return $dailyEfficiency;
    }

    private function getTeamOverview(): array
    {
        $totalStaff = Pegawai::where('aktif', true)->count() + Dokter::where('aktif', true)->count();
        $totalParamedis = Pegawai::where('jenis_pegawai', 'Paramedis')->where('aktif', true)->count();
        $totalNonParamedis = Pegawai::where('jenis_pegawai', 'Non-Paramedis')->where('aktif', true)->count();
        $totalDokter = Dokter::where('aktif', true)->count();
        
        return [
            'total_staff' => $totalStaff,
            'breakdown' => [
                'paramedis' => $totalParamedis,
                'non_paramedis' => $totalNonParamedis,
                'dokter' => $totalDokter,
            ],
            'utilization' => [
                'paramedis' => $totalStaff > 0 ? ($totalParamedis / $totalStaff) * 100 : 0,
                'non_paramedis' => $totalStaff > 0 ? ($totalNonParamedis / $totalStaff) * 100 : 0,
                'dokter' => $totalStaff > 0 ? ($totalDokter / $totalStaff) * 100 : 0,
            ],
        ];
    }

    private function calculateOverallEfficiency(): array
    {
        $currentMonth = Carbon::now();
        $previousMonth = Carbon::now()->subMonth();
        
        $currentProcedures = Tindakan::whereMonth('created_at', $currentMonth->month)
            ->whereYear('created_at', $currentMonth->year)
            ->count();
            
        $previousProcedures = Tindakan::whereMonth('created_at', $previousMonth->month)
            ->whereYear('created_at', $previousMonth->year)
            ->count();
            
        $totalStaff = Pegawai::where('aktif', true)->count() + Dokter::where('aktif', true)->count();
        
        $currentEfficiency = $totalStaff > 0 ? ($currentProcedures / $totalStaff) : 0;
        $previousEfficiency = $totalStaff > 0 ? ($previousProcedures / $totalStaff) : 0;
        
        $efficiencyGrowth = $previousEfficiency > 0 ? 
            (($currentEfficiency - $previousEfficiency) / $previousEfficiency) * 100 : 0;
        
        return [
            'current' => $currentEfficiency,
            'previous' => $previousEfficiency,
            'growth' => $efficiencyGrowth,
            'score' => min(($currentEfficiency / 30) * 100, 100), // Target: 30 procedures per staff
        ];
    }

    public static function canView(): bool
    {
        return auth()->user()?->hasRole('manajer') ?? false;
    }
}