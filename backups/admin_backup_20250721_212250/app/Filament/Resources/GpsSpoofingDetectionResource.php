<?php

namespace App\Filament\Resources;

use App\Filament\Resources\GpsSpoofingDetectionResource\Pages;
use App\Models\GpsSpoofingDetection;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;

class GpsSpoofingDetectionResource extends Resource
{
    protected static ?string $model = GpsSpoofingDetection::class;

    protected static ?string $navigationIcon = 'heroicon-o-shield-exclamation';

    protected static ?string $navigationLabel = 'GPS Spoofing Detection';

    protected static ?string $modelLabel = 'GPS Spoofing Detection';

    protected static ?string $pluralModelLabel = 'GPS Spoofing Detections';

    protected static ?string $navigationGroup = '📍 PRESENSI';

    protected static ?int $navigationSort = 44;

    protected static ?string $recordTitleAttribute = 'user.name';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('🔍 Detection Information')
                    ->description('GPS spoofing detection results (automatically generated)')
                    ->schema([
                        Forms\Components\Placeholder::make('auto_notice')
                            ->label('📋 Notice')
                            ->content('This data is automatically generated by the GPS spoofing detection system. Manual editing is disabled.')
                            ->columnSpanFull(),

                        Forms\Components\Select::make('user_id')
                            ->label('👤 User')
                            ->relationship('user', 'name')
                            ->searchable()
                            ->preload()
                            ->required(),

                        Forms\Components\TextInput::make('device_id')
                            ->label('📱 Device ID')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\TextInput::make('ip_address')
                            ->label('🌐 IP Address')
                            ->required()
                            ->placeholder('e.g. 192.168.1.1'),

                        Forms\Components\TextInput::make('risk_level')
                            ->label('⚠️ Risk Level')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\TextInput::make('risk_score')
                            ->label('📊 Risk Score')
                            ->disabled()
                            ->dehydrated(false)
                            ->suffix('%'),

                        Forms\Components\Toggle::make('is_spoofed')
                            ->label('🎯 GPS Spoofed')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\Toggle::make('is_blocked')
                            ->label('🚫 Blocked')
                            ->disabled()
                            ->dehydrated(false),
                    ])
                    ->columns(3),

                Forms\Components\Section::make('📍 Location Data')
                    ->description('GPS coordinates and location details (view only)')
                    ->schema([
                        Forms\Components\TextInput::make('latitude')
                            ->label('🌍 Latitude')
                            ->required()
                            ->numeric()
                            ->step(0.00000001)
                            ->placeholder('e.g. -6.2088'),

                        Forms\Components\TextInput::make('longitude')
                            ->label('🌍 Longitude')
                            ->required()
                            ->numeric()
                            ->step(0.00000001)
                            ->placeholder('e.g. 106.8456'),

                        Forms\Components\TextInput::make('accuracy')
                            ->label('🎯 Accuracy')
                            ->disabled()
                            ->dehydrated(false)
                            ->suffix('m'),

                        Forms\Components\TextInput::make('travel_speed_kmh')
                            ->label('🚗 Travel Speed')
                            ->disabled()
                            ->dehydrated(false)
                            ->suffix('km/h'),
                    ])
                    ->columns(4),

                Forms\Components\Section::make('🔍 Detection Results')
                    ->description('Detection methods and results (automatically analyzed)')
                    ->schema([
                        Forms\Components\Textarea::make('detection_results')
                            ->label('📋 Detection Results (JSON)')
                            ->required()
                            ->placeholder('{"mock_location": false, "fake_gps": false}')
                            ->columnSpanFull()
                            ->helperText('Enter detection results as JSON format'),
                        Forms\Components\Toggle::make('mock_location_detected')
                            ->label('📍 Mock Location')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\Toggle::make('fake_gps_app_detected')
                            ->label('📱 Fake GPS App')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\Toggle::make('developer_mode_detected')
                            ->label('⚙️ Developer Mode')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\Toggle::make('impossible_travel_detected')
                            ->label('🚀 Impossible Travel')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\Toggle::make('coordinate_anomaly_detected')
                            ->label('📊 Coordinate Anomaly')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\Toggle::make('device_integrity_failed')
                            ->label('🛡️ Device Integrity Failed')
                            ->disabled()
                            ->dehydrated(false),
                    ])
                    ->columns(3),

                Forms\Components\Section::make('📝 Admin Review')
                    ->description('Administrative review and notes')
                    ->schema([
                        Forms\Components\Select::make('action_taken')
                            ->label('🚨 Action Taken')
                            ->options([
                                'none' => 'None',
                                'warning' => 'Warning',
                                'blocked' => 'Blocked',
                                'flagged' => 'Flagged for Review',
                            ])
                            ->default('none'),

                        Forms\Components\Textarea::make('admin_notes')
                            ->label('📝 Admin Notes')
                            ->placeholder('Add investigation notes, follow-up actions, or other relevant information...')
                            ->rows(3)
                            ->columnSpanFull(),

                        Forms\Components\Select::make('reviewed_by')
                            ->label('👤 Reviewed By')
                            ->relationship('reviewer', 'name')
                            ->searchable()
                            ->preload(),

                        Forms\Components\DateTimePicker::make('reviewed_at')
                            ->label('📅 Reviewed At')
                            ->default(now()),

                        Forms\Components\DateTimePicker::make('attempted_at')
                            ->label('⏰ Attempted At')
                            ->required()
                            ->default(now()),
                    ])
                    ->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('user.name')
                    ->label('👤 User')
                    ->searchable()
                    ->sortable()
                    ->weight('bold'),

                Tables\Columns\BadgeColumn::make('risk_level')
                    ->label('⚠️ Risk Level')
                    ->colors([
                        'success' => 'low',
                        'warning' => 'medium',
                        'danger' => fn ($state): bool => in_array($state, ['high', 'critical']),
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'low' => '🟢 Rendah',
                        'medium' => '🟡 Sedang',
                        'high' => '🔴 Tinggi',
                        'critical' => '🚨 Kritis',
                        default => $state,
                    }),

                Tables\Columns\TextColumn::make('risk_score')
                    ->label('📊 Score')
                    ->sortable()
                    ->color(fn ($record) => match (true) {
                        $record->risk_score >= 80 => 'danger',
                        $record->risk_score >= 60 => 'warning',
                        default => 'success',
                    })
                    ->weight('semibold')
                    ->suffix('%'),

                Tables\Columns\IconColumn::make('is_spoofed')
                    ->label('🎯 Spoofed')
                    ->boolean()
                    ->trueIcon('heroicon-o-exclamation-triangle')
                    ->falseIcon('heroicon-o-check-circle')
                    ->trueColor('danger')
                    ->falseColor('success'),

                Tables\Columns\IconColumn::make('is_blocked')
                    ->label('🚫 Blocked')
                    ->boolean()
                    ->trueIcon('heroicon-o-no-symbol')
                    ->falseIcon('heroicon-o-check')
                    ->trueColor('danger')
                    ->falseColor('gray'),

                Tables\Columns\TextColumn::make('detected_methods')
                    ->label('🔍 Metode Terdeteksi')
                    ->badge()
                    ->color('warning')
                    ->getStateUsing(function ($record) {
                        return $record->detected_methods;
                    }),

                Tables\Columns\TextColumn::make('coordinates')
                    ->label('📍 Koordinat')
                    ->formatStateUsing(fn ($record) => number_format($record->latitude, 6).', '.number_format($record->longitude, 6)
                    )
                    ->copyable()
                    ->toggleable(),

                Tables\Columns\BadgeColumn::make('action_taken')
                    ->label('🚨 Tindakan')
                    ->colors([
                        'gray' => 'none',
                        'warning' => 'warning',
                        'danger' => 'blocked',
                        'info' => 'flagged',
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'none' => '➖ Tidak Ada',
                        'warning' => '⚠️ Peringatan',
                        'blocked' => '🚫 Diblokir',
                        'flagged' => '🏴 Ditandai',
                        default => $state,
                    }),

                Tables\Columns\TextColumn::make('attempted_at')
                    ->label('⏰ Waktu')
                    ->dateTime('d M Y H:i')
                    ->sortable(),

                Tables\Columns\IconColumn::make('reviewed_at')
                    ->label('👀 Review')
                    ->boolean()
                    ->getStateUsing(fn ($record) => ! is_null($record->reviewed_at))
                    ->trueIcon('heroicon-o-eye')
                    ->falseIcon('heroicon-o-clock')
                    ->trueColor('success')
                    ->falseColor('warning'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('risk_level')
                    ->label('Risk Level')
                    ->options([
                        'low' => '🟢 Rendah',
                        'medium' => '🟡 Sedang',
                        'high' => '🔴 Tinggi',
                        'critical' => '🚨 Kritis',
                    ])
                    ->multiple(),

                Tables\Filters\TernaryFilter::make('is_spoofed')
                    ->label('GPS Spoofed')
                    ->boolean()
                    ->trueLabel('Spoofed')
                    ->falseLabel('Not Spoofed'),

                Tables\Filters\TernaryFilter::make('is_blocked')
                    ->label('Blocked')
                    ->boolean()
                    ->trueLabel('Blocked')
                    ->falseLabel('Not Blocked'),

                Tables\Filters\SelectFilter::make('action_taken')
                    ->label('Tindakan')
                    ->options([
                        'none' => '➖ Tidak Ada',
                        'warning' => '⚠️ Peringatan',
                        'blocked' => '🚫 Diblokir',
                        'flagged' => '🏴 Ditandai',
                    ]),

                Tables\Filters\TernaryFilter::make('reviewed_at')
                    ->label('Review Status')
                    ->nullable()
                    ->trueLabel('Reviewed')
                    ->falseLabel('Unreviewed'),

                Tables\Filters\Filter::make('today')
                    ->label('Hari Ini')
                    ->query(fn (Builder $query): Builder => $query->whereDate('attempted_at', today())),
            ])
            ->actions([
                Action::make('view_map')
                    ->label('🗺️ Lihat Peta')
                    ->icon('heroicon-o-map')
                    ->color('info')
                    ->url(fn ($record) => $record->google_maps_url)
                    ->openUrlInNewTab(),

                Action::make('mark_reviewed')
                    ->label('✅ Mark Reviewed')
                    ->icon('heroicon-o-eye')
                    ->color('success')
                    ->visible(fn ($record) => is_null($record->reviewed_at))
                    ->action(function ($record) {
                        $record->update([
                            'reviewed_at' => now(),
                            'reviewed_by' => Auth::id(),
                        ]);

                        Notification::make()
                            ->title('✅ Deteksi telah direview!')
                            ->success()
                            ->send();
                    }),

                Action::make('block_user')
                    ->label('🚫 Block User')
                    ->icon('heroicon-o-no-symbol')
                    ->color('danger')
                    ->visible(fn ($record) => ! $record->is_blocked)
                    ->requiresConfirmation()
                    ->action(function ($record) {
                        $record->update([
                            'is_blocked' => true,
                            'action_taken' => 'blocked',
                            'reviewed_at' => now(),
                            'reviewed_by' => Auth::id(),
                        ]);

                        Notification::make()
                            ->title('🚫 User telah diblokir!')
                            ->warning()
                            ->send();
                    }),

                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('mark_reviewed')
                        ->label('✅ Mark as Reviewed')
                        ->icon('heroicon-o-eye')
                        ->color('success')
                        ->action(function ($records) {
                            $count = $records->count();
                            $records->each(function ($record) {
                                $record->update([
                                    'reviewed_at' => now(),
                                    'reviewed_by' => Auth::id(),
                                ]);
                            });

                            Notification::make()
                                ->title("✅ {$count} deteksi telah direview!")
                                ->success()
                                ->send();
                        }),

                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('attempted_at', 'desc')
            ->striped()
            // ->poll() // DISABLED - emergency polling removal
            ->emptyStateHeading('🛡️ Belum Ada Deteksi GPS Spoofing')
            ->emptyStateDescription('Sistem belum mendeteksi aktivitas GPS spoofing.')
            ->emptyStateIcon('heroicon-o-shield-check');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListGpsSpoofingDetections::route('/'),
            'create' => Pages\CreateGpsSpoofingDetection::route('/create'),
            'view' => Pages\ViewGpsSpoofingDetection::route('/{record}'),
            'edit' => Pages\EditGpsSpoofingDetection::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        $unreviewed = static::getModel()::unreviewed()->count();

        return $unreviewed > 0 ? (string) $unreviewed : null;
    }

    public static function getNavigationBadgeColor(): string|array|null
    {
        $unreviewed = static::getModel()::unreviewed()->count();

        if ($unreviewed > 10) {
            return 'danger';
        }
        if ($unreviewed > 5) {
            return 'warning';
        }
        if ($unreviewed > 0) {
            return 'info';
        }

        return null;
    }
}
