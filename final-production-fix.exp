#!/usr/bin/expect -f

set timeout 60

# Connect
spawn ssh -p 65002 u454362045@153.92.8.132
expect "password:"
send "LaTahzan@01\r"

# Wait for prompt
expect -re ".*\\\$.*"

# Navigate to production Laravel directory
send "cd /home/u454362045/domains/dokterkuklinik.com/public_html\r"
expect -re ".*\\\$.*"

# Verify we're in the right place
send "pwd && ls -la | grep artisan\r"
expect -re ".*\\\$.*"

# Pull latest code
send "git pull origin main\r"
expect -re ".*\\\$.*"

# Create simple fix script without complex quoting
send "cat > quick_fix.php << 'ENDFIX'\r"
send "<?php\r"
send "require_once 'vendor/autoload.php';\r"
send "\\$app = require_once 'bootstrap/app.php';\r"
send "\\$kernel = \\$app->make('Illuminate\\\\Contracts\\\\Console\\\\Kernel');\r"
send "\\$kernel->bootstrap();\r"
send "echo 'Laravel loaded' . PHP_EOL;\r"
send "\\$role = DB::table('roles')->where('name', 'paramedis')->first();\r"
send "if (!\\$role) {\r"
send "    \\$roleData = array(\r"
send "        'name' => 'paramedis',\r"
send "        'display_name' => 'Paramedic',\r"
send "        'guard_name' => 'web',\r"
send "        'created_at' => now(),\r"
send "        'updated_at' => now()\r"
send "    );\r"
send "    \\$roleId = DB::table('roles')->insertGetId(\\$roleData);\r"
send "    \\$role = (object)array('id' => \\$roleId);\r"
send "    echo 'Created paramedis role: ' . \\$roleId . PHP_EOL;\r"
send "}\r"
send "DB::table('users')->where('email', 'tina@paramedis.com')->delete();\r"
send "\\$userData = array(\r"
send "    'name' => 'Tina Paramedis',\r"
send "    'email' => 'tina@paramedis.com',\r"
send "    'email_verified_at' => now(),\r"
send "    'password' => Hash::make('password123'),\r"
send "    'role_id' => \\$role->id,\r"
send "    'created_at' => now(),\r"
send "    'updated_at' => now()\r"
send ");\r"
send "\\$userId = DB::table('users')->insertGetId(\\$userData);\r"
send "echo 'User created: ' . \\$userId . PHP_EOL;\r"
send "\\$auth = Auth::attempt(array('email' => 'tina@paramedis.com', 'password' => 'password123'));\r"
send "echo 'Auth test: ' . (\\$auth ? 'SUCCESS' : 'FAILED') . PHP_EOL;\r"
send "if (\\$auth) Auth::logout();\r"
send "Artisan::call('cache:clear');\r"
send "Artisan::call('config:clear');\r"
send "echo 'PARAMEDIS LOGIN FIX COMPLETE!' . PHP_EOL;\r"
send "echo 'Login at: ' . config('app.url') . '/paramedis/login' . PHP_EOL;\r"
send "echo 'Email: tina@paramedis.com' . PHP_EOL;\r"
send "echo 'Password: password123' . PHP_EOL;\r"
send "?>\r"
send "ENDFIX\r"

expect -re ".*\\\$.*"

# Execute the fix
send "php quick_fix.php\r"

# Wait for completion and capture output
expect {
    "*SUCCESS*" {
        puts "\n=== AUTHENTICATION SUCCESS! ==="
    }
    "*FAILED*" {
        puts "\n=== AUTHENTICATION FAILED ==="
    }
    "*COMPLETE*" {
        puts "\n=== FIX COMPLETED ==="
    }
    timeout {
        puts "\n=== EXECUTION TIMEOUT ==="
    }
}

expect -re ".*\\\$.*"

# Show completion message
send "echo '=== PRODUCTION FIX COMPLETED ==='\r"
expect -re ".*\\\$.*"

send "echo 'Test login at: https://dokterkuklinik.com/paramedis/login'\r"
expect -re ".*\\\$.*"

# Exit
send "exit\r"
expect eof

puts "\n=== SSH SESSION COMPLETED ==="