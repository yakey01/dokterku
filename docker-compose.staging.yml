version: '3.8'

services:
  # Staging Application Container
  app:
    build:
      context: .
      dockerfile: ./docker/8.3/Dockerfile
      target: production
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-dokterku}:staging
    container_name: dokterku_staging_app
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      - APP_ENV=staging
      - CONTAINER_ROLE=app
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ./.env.staging:/var/www/html/.env
    depends_on:
      - mysql
      - redis
    networks:
      - dokterku_staging_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dokterku-staging.rule=Host(\`staging.dokterku.com\`)"
      - "traefik.http.routers.dokterku-staging.tls=true"
      - "traefik.http.routers.dokterku-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.dokterku-staging.loadbalancer.server.port=8000"

  # Staging Queue Worker
  queue:
    build:
      context: .
      dockerfile: ./docker/8.3/Dockerfile
      target: production
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-dokterku}:staging
    container_name: dokterku_staging_queue
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      - APP_ENV=staging
      - CONTAINER_ROLE=queue
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ./.env.staging:/var/www/html/.env
    depends_on:
      - mysql
      - redis
    networks:
      - dokterku_staging_network
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600

  # Staging Scheduler
  scheduler:
    build:
      context: .
      dockerfile: ./docker/8.3/Dockerfile
      target: production
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-dokterku}:staging
    container_name: dokterku_staging_scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      - APP_ENV=staging
      - CONTAINER_ROLE=scheduler
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ./.env.staging:/var/www/html/.env
    depends_on:
      - mysql
      - redis
    networks:
      - dokterku_staging_network
    command: /bin/bash -c "while true; do php artisan schedule:run; sleep 60; done"

  # Staging MySQL Database
  mysql:
    image: mysql:8.0
    container_name: dokterku_staging_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${STAGING_DB_ROOT_PASSWORD:-secure_staging_root_password}
      MYSQL_DATABASE: ${STAGING_DB_DATABASE:-dokterku_staging}
      MYSQL_USER: ${STAGING_DB_USERNAME:-dokterku_staging_user}
      MYSQL_PASSWORD: ${STAGING_DB_PASSWORD:-secure_staging_password}
    volumes:
      - dokterku_staging_mysql_data:/var/lib/mysql
      - ./docker/mysql/staging.cnf:/etc/mysql/conf.d/staging.cnf
    ports:
      - "3307:3306"  # Different port to avoid conflicts
    networks:
      - dokterku_staging_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Staging Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dokterku_staging_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - dokterku_staging_redis_data:/data
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - dokterku_staging_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # Staging Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dokterku_staging_nginx
    restart: unless-stopped
    ports:
      - "8081:80"
      - "8441:443"
    volumes:
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./storage/app/public:/var/www/html/storage/app/public:ro
      - ./public:/var/www/html/public:ro
      - ./docker/ssl/staging:/etc/ssl/certs
    depends_on:
      - app
    networks:
      - dokterku_staging_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dokterku-staging-nginx.rule=Host(\`staging.dokterku.com\`)"
      - "traefik.http.routers.dokterku-staging-nginx.tls=true"

  # Staging Monitoring (Prometheus Node Exporter)
  node_exporter:
    image: prom/node-exporter:latest
    container_name: dokterku_staging_node_exporter
    restart: unless-stopped
    ports:
      - "9101:9100"
    networks:
      - dokterku_staging_network
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'

  # Staging Health Check Service
  healthcheck:
    image: busybox
    container_name: dokterku_staging_healthcheck
    restart: "no"
    depends_on:
      - app
      - mysql
      - redis
    networks:
      - dokterku_staging_network
    command: |
      sh -c "
        echo 'Running staging health checks...'
        
        # Test application health
        wget --spider --quiet http://app:8000/health || exit 1
        echo 'âœ… Application health check passed'
        
        # Test database connection
        nc -z mysql 3306 || exit 1
        echo 'âœ… MySQL connection check passed'
        
        # Test Redis connection
        nc -z redis 6379 || exit 1
        echo 'âœ… Redis connection check passed'
        
        echo 'ðŸŽ‰ All staging health checks passed!'
      "

volumes:
  dokterku_staging_mysql_data:
    driver: local
  dokterku_staging_redis_data:
    driver: local

networks:
  dokterku_staging_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16