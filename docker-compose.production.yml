version: '3.8'

services:
  app:
    build:
      context: ./docker/8.3
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    image: dokterku-app:production
    container_name: dokterku-production-app
    restart: always
    working_dir: /var/www/html
    volumes:
      - './:/var/www/html:ro'
      - 'dokterku-storage:/var/www/html/storage'
      - 'dokterku-cache:/var/www/html/bootstrap/cache'
    environment:
      APP_ENV: production
      APP_DEBUG: false
      APP_URL: '${APP_URL:-https://dokterkuklinik.com}'
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: '${DB_DATABASE}'
      DB_USERNAME: '${DB_USERNAME}'
      DB_PASSWORD: '${DB_PASSWORD}'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      BROADCAST_DRIVER: redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dokterku-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  mysql:
    image: 'mysql:8.0'
    container_name: dokterku-production-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
    volumes:
      - 'dokterku-production-mysql:/var/lib/mysql'
      - './docker/mysql/production.cnf:/etc/mysql/conf.d/production.cnf:ro'
    networks:
      - dokterku-production
    command: --innodb-buffer-pool-size=1G --innodb-log-file-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: 'redis:alpine'
    container_name: dokterku-production-redis
    restart: always
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10
    volumes:
      - 'dokterku-production-redis:/data'
    networks:
      - dokterku-production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  queue:
    build:
      context: ./docker/8.3
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    image: dokterku-app:production
    container_name: dokterku-production-queue
    restart: always
    working_dir: /var/www/html
    command: php artisan queue:work redis --sleep=3 --tries=3 --max-time=3600 --timeout=90
    volumes:
      - './:/var/www/html:ro'
      - 'dokterku-storage:/var/www/html/storage'
    environment:
      APP_ENV: production
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: '${DB_DATABASE}'
      DB_USERNAME: '${DB_USERNAME}'
      DB_PASSWORD: '${DB_PASSWORD}'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QUEUE_CONNECTION: redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dokterku-production

  scheduler:
    build:
      context: ./docker/8.3
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    image: dokterku-app:production
    container_name: dokterku-production-scheduler
    restart: always
    working_dir: /var/www/html
    command: |
      sh -c 'echo "* * * * * cd /var/www/html && php artisan schedule:run >> /dev/null 2>&1" | crontab - && crond -f'
    volumes:
      - './:/var/www/html:ro'
      - 'dokterku-storage:/var/www/html/storage'
    environment:
      APP_ENV: production
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: '${DB_DATABASE}'
      DB_USERNAME: '${DB_USERNAME}'
      DB_PASSWORD: '${DB_PASSWORD}'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dokterku-production

  nginx:
    image: nginx:alpine
    container_name: dokterku-production-nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - './public:/var/www/html/public:ro'
      - './docker/nginx/production.conf:/etc/nginx/conf.d/default.conf:ro'
      - './docker/nginx/ssl:/etc/nginx/ssl:ro'
      - 'dokterku-nginx-cache:/var/cache/nginx'
    depends_on:
      - app
    networks:
      - dokterku-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  backup:
    image: 'mysql:8.0'
    container_name: dokterku-production-backup
    restart: "no"
    command: |
      sh -c '
      echo "0 2 * * * mysqldump -h mysql -u $$DB_USERNAME -p$$DB_PASSWORD $$DB_DATABASE > /backups/dokterku_backup_$$(date +\%Y\%m\%d_\%H\%M\%S).sql" | crontab -
      crond -f
      '
    volumes:
      - 'dokterku-backups:/backups'
    environment:
      DB_DATABASE: '${DB_DATABASE}'
      DB_USERNAME: '${DB_USERNAME}'
      DB_PASSWORD: '${DB_PASSWORD}'
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - dokterku-production

networks:
  dokterku-production:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: dokterku-prod

volumes:
  dokterku-production-mysql:
    driver: local
  dokterku-production-redis:
    driver: local
  dokterku-storage:
    driver: local
  dokterku-cache:
    driver: local
  dokterku-nginx-cache:
    driver: local
  dokterku-backups:
    driver: local