<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>KLINIK DOKTERKU - {{ auth()->user()->name ?? 'Dokter' }}</title>
    
    <!-- Development Notice: Replace with production builds for deployment -->
    <!-- React and Dependencies -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone@7.23.4/babel.min.js"></script>
    
    <!-- TailwindCSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .app-container {
            min-height: 100vh;
            background: linear-gradient(to bottom, #0f172a, #1e293b);
            max-width: 448px;
            margin: 0 auto;
            position: relative;
            overflow: hidden;
        }
        
        .bg-pattern {
            position: absolute;
            inset: 0;
            background: 
                radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(168, 85, 247, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 60%, rgba(34, 197, 94, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.5rem;
            box-shadow: 
                0 25px 50px -12px rgba(0, 0, 0, 0.5),
                0 0 0 1px rgba(255, 255, 255, 0.05);
        }
        
        .card-glass {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(24px);
            border: 1px solid rgba(255, 255, 255, 0.12);
            border-radius: 1.5rem;
            box-shadow: 
                0 20px 40px -12px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }
        
        .gradient-card {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(168, 85, 247, 0.1) 100%);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.5rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.4);
            position: relative;
            overflow: hidden;
        }
        
        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
        
        .btn-primary:hover::before {
            left: 100%;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 40px -10px rgba(59, 130, 246, 0.5);
        }
        
        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(8px);
        }
        
        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-1px);
        }
        
        .input-field {
            width: 100%;
            padding: 1rem 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 1rem;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(8px);
            font-size: 1rem;
            color: white;
            transition: all 0.3s ease;
        }
        
        .input-field::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .input-field:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            border-radius: 1rem;
            transition: all 0.3s ease;
            min-width: 0;
            flex: 1;
            position: relative;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .nav-item.active {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 15px 35px -5px rgba(59, 130, 246, 0.4);
        }
        
        .nav-item:not(.active):hover {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            transform: translateY(-2px);
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.25rem;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6, #ec4899);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .stat-card:hover::before {
            opacity: 1;
        }
        
        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.3);
        }
        
        .spinner {
            width: 1.5rem;
            height: 1.5rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }
        
        .slide-up {
            animation: slideUp 0.4s ease-out;
        }
        
        .pulse-glow {
            animation: pulseGlow 2s ease-in-out infinite alternate;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(100px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulseGlow {
            0% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }
            100% { box-shadow: 0 0 30px rgba(59, 130, 246, 0.6); }
        }
        
        .text-gradient {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .success-gradient {
            background: linear-gradient(135deg, #10b981, #34d399);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .warning-gradient {
            background: linear-gradient(135deg, #f59e0b, #fbbf24);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .floating-action {
            position: fixed;
            bottom: 100px;
            right: 20px;
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
            border: none;
            cursor: pointer;
            box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.4);
            transition: all 0.3s ease;
            z-index: 1000;
        }
        
        .floating-action:hover {
            transform: scale(1.1);
            box-shadow: 0 15px 35px -5px rgba(59, 130, 246, 0.6);
        }
        
        .notification-dot {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 16px;
            height: 16px;
            background: linear-gradient(135deg, #ef4444, #f87171);
            border-radius: 50%;
            animation: pulseGlow 1.5s ease-in-out infinite alternate;
        }
        
        .progress-bar {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            position: relative;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            border-radius: 3px;
            transition: width 0.5s ease;
            position: relative;
        }
        
        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        
        .status-online {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }
        
        .status-busy {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }
        
        .status-away {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }
    </style>
</head>
<body>
    <div id="app"></div>

    <script type="text/babel">
        // Pass user data from backend
        const INITIAL_USER_DATA = @json($userData ?? ['name' => 'Dr. Ahmad Fauzi', 'email' => 'ahmad.fauzi@klinik.com', 'initials' => 'AF']);
        const API_TOKEN = @json($token ?? '');
        
        @verbatim
        const { useState, useEffect } = React;
        
        // Simple Icon Components
        const Icon = ({ name, size = 20, className = "" }) => {
            const icons = {
                calendar: "📅",
                dollarSign: "💰",
                clock: "🕐",
                fileText: "📄",
                user: "👤",
                bell: "🔔",
                logOut: "🚪",
                stethoscope: "🩺",
                arrowRight: "→",
                eye: "👁",
                eyeOff: "👁‍🗨",
                home: "🏠",
                activity: "📊",
                mapPin: "📍",
                trendingUp: "📈",
                checkCircle: "✅",
                award: "🏆",
                timer: "⏱"
            };
            
            return (
                <span 
                    className={`inline-block ${className}`} 
                    style={{ fontSize: size + 'px', lineHeight: 1 }}
                >
                    {icons[name] || "?"}
                </span>
            );
        };
        
        // Component aliases for easier migration
        const Calendar = (props) => <Icon name="calendar" {...props} />;
        const DollarSign = (props) => <Icon name="dollarSign" {...props} />;
        const Clock = (props) => <Icon name="clock" {...props} />;
        const FileText = (props) => <Icon name="fileText" {...props} />;
        const User = (props) => <Icon name="user" {...props} />;
        const Bell = (props) => <Icon name="bell" {...props} />;
        const LogOut = (props) => <Icon name="logOut" {...props} />;
        const Stethoscope = (props) => <Icon name="stethoscope" {...props} />;
        const ArrowRight = (props) => <Icon name="arrowRight" {...props} />;
        const Eye = (props) => <Icon name="eye" {...props} />;
        const EyeOff = (props) => <Icon name="eyeOff" {...props} />;
        const Home = (props) => <Icon name="home" {...props} />;
        const Activity = (props) => <Icon name="activity" {...props} />;
        const MapPin = (props) => <Icon name="mapPin" {...props} />;
        const TrendingUp = (props) => <Icon name="trendingUp" {...props} />;
        const CheckCircle = (props) => <Icon name="checkCircle" {...props} />;
        const Award = (props) => <Icon name="award" {...props} />;
        const Timer = (props) => <Icon name="timer" {...props} />;

        // Dashboard Component with Real API Integration
        function Dashboard() {
            const [currentTime, setCurrentTime] = useState(new Date());
            const [dashboardData, setDashboardData] = useState(null);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);

            useEffect(() => {
                const timer = setInterval(() => {
                    setCurrentTime(new Date());
                }, 1000);
                return () => clearInterval(timer);
            }, []);

            useEffect(() => {
                fetchDashboardData();
            }, []);

            const fetchDashboardData = async () => {
                try {
                    const token = API_TOKEN;
                    const response = await fetch('/api/v2/dashboards/dokter/', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch dashboard data');
                    }

                    const data = await response.json();
                    setDashboardData(data.data);
                    setLoading(false);
                } catch (err) {
                    setError(err.message);
                    setLoading(false);
                }
            };

            const getShiftIcon = (jenis) => {
                switch (jenis) {
                    case 'pagi': return '☀️';
                    case 'siang': return '🌤️';
                    case 'malam': return '🌙';
                    default: return '⏰';
                }
            };

            const formatTanggal = (tanggal) => {
                return new Date(tanggal).toLocaleDateString('id-ID', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long'
                });
            };

            const formatCurrency = (amount) => {
                return new Intl.NumberFormat('id-ID', {
                    style: 'currency',
                    currency: 'IDR',
                    minimumFractionDigits: 0
                }).format(amount);
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="spinner"></div>
                    </div>
                );
            }

            if (error) {
                return (
                    <div className="card p-6 text-center">
                        <div className="text-red-400 mb-4">⚠️</div>
                        <p className="text-white mb-4">Gagal memuat data dashboard</p>
                        <button 
                            onClick={fetchDashboardData}
                            className="btn-primary"
                        >
                            Coba Lagi
                        </button>
                    </div>
                );
            }

            const stats = dashboardData?.stats || {};
            const nextSchedule = dashboardData?.next_schedule;
            const performance = dashboardData?.performance || {};
            const user = dashboardData?.user || {};

            return (
                <div className="space-y-6 fade-in">
                    {/* Welcome Card */}
                    <div className="gradient-card p-6 text-white">
                        <div className="flex items-center gap-4 mb-6">
                            <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center text-2xl">
                                {user.initials || '👨‍⚕️'}
                            </div>
                            <div>
                                <h2 className="text-xl font-bold text-gradient">
                                    {dashboardData?.greeting || 'Selamat Datang'}
                                </h2>
                                <p className="text-white text-opacity-90">
                                    {user.name || 'Dr. Ahmad'}
                                </p>
                                <div className="status-badge status-online mt-2">
                                    <div className="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                                    Online
                                </div>
                            </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4">
                            <div className="text-center">
                                <p className="text-white text-opacity-70 text-sm">Waktu Sekarang</p>
                                <p className="text-2xl font-bold text-gradient">
                                    {currentTime.toLocaleTimeString('id-ID', { 
                                        hour: '2-digit', 
                                        minute: '2-digit' 
                                    })}
                                </p>
                            </div>
                            <div className="text-center">
                                <p className="text-white text-opacity-70 text-sm">Tanggal</p>
                                <p className="text-lg font-medium">
                                    {currentTime.toLocaleDateString('id-ID', {
                                        day: 'numeric',
                                        month: 'short'
                                    })}
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* Stats Grid */}
                    <div className="grid grid-cols-2 gap-4">
                        <div className="stat-card text-center">
                            <div className="text-3xl mb-2">👥</div>
                            <div className="text-2xl font-bold text-gradient">
                                {stats.patients_today || 0}
                            </div>
                            <p className="text-white text-opacity-70 text-sm">Pasien Hari Ini</p>
                        </div>
                        
                        <div className="stat-card text-center">
                            <div className="text-3xl mb-2">💉</div>
                            <div className="text-2xl font-bold success-gradient">
                                {stats.tindakan_today || 0}
                            </div>
                            <p className="text-white text-opacity-70 text-sm">Tindakan Hari Ini</p>
                        </div>
                        
                        <div className="stat-card text-center">
                            <div className="text-3xl mb-2">💰</div>
                            <div className="text-lg font-bold warning-gradient">
                                {formatCurrency(stats.jaspel_month || 0)}
                            </div>
                            <p className="text-white text-opacity-70 text-sm">Jaspel Bulan Ini</p>
                        </div>
                        
                        <div className="stat-card text-center">
                            <div className="text-3xl mb-2">📅</div>
                            <div className="text-2xl font-bold text-gradient">
                                {stats.shifts_week || 0}
                            </div>
                            <p className="text-white text-opacity-70 text-sm">Shift Minggu Ini</p>
                        </div>
                    </div>

                    {/* Next Schedule */}
                    {nextSchedule && (
                        <div className="card p-6">
                            <div className="flex items-center gap-3 mb-4">
                                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                                    <Calendar size={24} className="text-white" />
                                </div>
                                <div>
                                    <h3 className="text-lg font-bold text-white">Jadwal Berikutnya</h3>
                                    <p className="text-white text-opacity-70 text-sm">
                                        {nextSchedule.days_until === 0 ? 'Hari ini' : nextSchedule.days_until + ' hari lagi'}
                                    </p>
                                </div>
                            </div>

                            <div className="gradient-card p-4 text-white">
                                <div className="flex items-center gap-3 mb-3">
                                    <div className="text-2xl">{getShiftIcon(nextSchedule.shift_name?.toLowerCase())}</div>
                                    <div>
                                        <h4 className="font-semibold">{nextSchedule.shift_name}</h4>
                                        <p className="text-sm text-white text-opacity-70">
                                            {formatTanggal(nextSchedule.date)}
                                        </p>
                                    </div>
                                </div>
                                
                                <div className="flex items-center gap-4 text-sm">
                                    <div className="flex items-center gap-2">
                                        <Clock size={16} />
                                        <span>{nextSchedule.start_time} - {nextSchedule.end_time}</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <MapPin size={16} />
                                        <span>{nextSchedule.unit_kerja}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Performance Metrics */}
                    <div className="card p-6">
                        <h3 className="text-lg font-bold text-white mb-4">Kinerja Anda</h3>
                        <div className="space-y-4">
                            <div>
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-white text-opacity-70">Skor Efisiensi</span>
                                    <span className="text-white font-semibold">{performance.efficiency_score || 0}%</span>
                                </div>
                                <div className="progress-bar">
                                    <div 
                                        className="progress-fill" 
                                        style={{width: (performance.efficiency_score || 0) + '%'}}
                                    ></div>
                                </div>
                            </div>
                            
                            <div>
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-white text-opacity-70">Tingkat Kehadiran</span>
                                    <span className="text-white font-semibold">{performance.attendance_rate || 0}%</span>
                                </div>
                                <div className="progress-bar">
                                    <div 
                                        className="progress-fill" 
                                        style={{width: (performance.attendance_rate || 0) + '%'}}
                                    ></div>
                                </div>
                            </div>
                            
                            <div>
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-white text-opacity-70">Kepuasan Pasien</span>
                                    <span className="text-white font-semibold">{performance.patient_satisfaction || 0}%</span>
                                </div>
                                <div className="progress-bar">
                                    <div 
                                        className="progress-fill" 
                                        style={{width: (performance.patient_satisfaction || 0) + '%'}}
                                    ></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Quick Actions */}
                    <div className="card p-6">
                        <h3 className="text-lg font-bold text-white mb-4">Aksi Cepat</h3>
                        <div className="grid grid-cols-2 gap-3">
                            <button className="btn-secondary text-left p-4 rounded-xl">
                                <div className="text-2xl mb-2">📋</div>
                                <div className="font-semibold">Presensi</div>
                                <div className="text-sm text-white text-opacity-70">Check In/Out</div>
                            </button>
                            
                            <button className="btn-secondary text-left p-4 rounded-xl">
                                <div className="text-2xl mb-2">📅</div>
                                <div className="font-semibold">Jadwal</div>
                                <div className="text-sm text-white text-opacity-70">Lihat Jadwal</div>
                            </button>
                            
                            <button className="btn-secondary text-left p-4 rounded-xl">
                                <div className="text-2xl mb-2">💰</div>
                                <div className="font-semibold">Jaspel</div>
                                <div className="text-sm text-white text-opacity-70">Lihat Penghasilan</div>
                            </button>
                            
                            <button className="btn-secondary text-left p-4 rounded-xl">
                                <div className="text-2xl mb-2">📊</div>
                                <div className="font-semibold">Laporan</div>
                                <div className="text-sm text-white text-opacity-70">Lihat Laporan</div>
                            </button>
                        </div>
                    </div>
                </div>
            );
        }

        // JadwalJaga Component with Real API
        function JadwalJaga() {
            const [jadwalData, setJadwalData] = useState(null);
            const [loading, setLoading] = useState(true);
            const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);
            const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());

            useEffect(() => {
                fetchJadwalData();
            }, [selectedMonth, selectedYear]);

            const fetchJadwalData = async () => {
                try {
                    const token = API_TOKEN;
                    const response = await fetch(`/api/v2/dashboards/dokter/jadwal-jaga?month=${selectedMonth}&year=${selectedYear}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        setJadwalData(data.data);
                    }
                    setLoading(false);
                } catch (err) {
                    setLoading(false);
                }
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="spinner"></div>
                    </div>
                );
            }

            return (
                <div className="space-y-6 fade-in">
                    <div className="card p-6">
                        <h2 className="text-xl font-bold text-white mb-4">Jadwal Jaga</h2>
                        
                        {/* Month/Year Selector */}
                        <div className="flex gap-2 mb-4">
                            <select 
                                value={selectedMonth} 
                                onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
                                className="input-field flex-1"
                            >
                                {Array.from({length: 12}, (_, i) => (
                                    <option key={i+1} value={i+1}>
                                        {new Date(0, i).toLocaleDateString('id-ID', { month: 'long' })}
                                    </option>
                                ))}
                            </select>
                            <select 
                                value={selectedYear} 
                                onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                                className="input-field w-24"
                            >
                                {Array.from({length: 3}, (_, i) => (
                                    <option key={i} value={new Date().getFullYear() + i - 1}>
                                        {new Date().getFullYear() + i - 1}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Weekly Schedule */}
                        <div className="space-y-3">
                            <h3 className="text-lg font-semibold text-white">Jadwal Minggu Ini</h3>
                            {jadwalData?.weekly_schedule?.map((jadwal, index) => (
                                <div key={index} className="stat-card p-4">
                                    <div className="flex items-center gap-3">
                                        <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                                            <Calendar size={20} className="text-white" />
                                        </div>
                                        <div className="flex-1">
                                            <h4 className="font-semibold text-white">{jadwal.shift_template?.nama_shift}</h4>
                                            <p className="text-sm text-white text-opacity-70">
                                                {new Date(jadwal.tanggal_jaga).toLocaleDateString('id-ID', { 
                                                    weekday: 'long', 
                                                    day: 'numeric', 
                                                    month: 'short' 
                                                })}
                                            </p>
                                        </div>
                                        <div className="text-right">
                                            <p className="text-sm font-semibold text-white">
                                                {jadwal.shift_template?.jam_masuk} - {jadwal.shift_template?.jam_pulang}
                                            </p>
                                            <p className="text-xs text-white text-opacity-70">{jadwal.unit_kerja}</p>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {/* Stats */}
                        <div className="mt-6 pt-4 border-t border-white border-opacity-20">
                            <div className="grid grid-cols-2 gap-4">
                                <div className="text-center">
                                    <div className="text-2xl font-bold text-gradient">
                                        {jadwalData?.total_shifts || 0}
                                    </div>
                                    <p className="text-sm text-white text-opacity-70">Total Shift</p>
                                </div>
                                <div className="text-center">
                                    <div className="text-2xl font-bold success-gradient">
                                        {jadwalData?.next_shift?.days_until || 0}
                                    </div>
                                    <p className="text-sm text-white text-opacity-70">Hari ke Shift Berikutnya</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Jaspel Component with Real API
        function Jaspel() {
            const [jaspelData, setJaspelData] = useState(null);
            const [loading, setLoading] = useState(true);
            const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);
            const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());

            useEffect(() => {
                fetchJaspelData();
            }, [selectedMonth, selectedYear]);

            const fetchJaspelData = async () => {
                try {
                    const token = API_TOKEN;
                    const response = await fetch(`/api/v2/dashboards/dokter/jaspel?month=${selectedMonth}&year=${selectedYear}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        setJaspelData(data.data);
                    }
                    setLoading(false);
                } catch (err) {
                    setLoading(false);
                }
            };

            const formatCurrency = (amount) => {
                return new Intl.NumberFormat('id-ID', {
                    style: 'currency',
                    currency: 'IDR',
                    minimumFractionDigits: 0
                }).format(amount);
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="spinner"></div>
                    </div>
                );
            }

            const stats = jaspelData?.stats || {};

            return (
                <div className="space-y-6 fade-in">
                    <div className="card p-6">
                        <h2 className="text-xl font-bold text-white mb-4">Jaspel</h2>
                        
                        {/* Month/Year Selector */}
                        <div className="flex gap-2 mb-6">
                            <select 
                                value={selectedMonth} 
                                onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
                                className="input-field flex-1"
                            >
                                {Array.from({length: 12}, (_, i) => (
                                    <option key={i+1} value={i+1}>
                                        {new Date(0, i).toLocaleDateString('id-ID', { month: 'long' })}
                                    </option>
                                ))}
                            </select>
                            <select 
                                value={selectedYear} 
                                onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                                className="input-field w-24"
                            >
                                {Array.from({length: 3}, (_, i) => (
                                    <option key={i} value={new Date().getFullYear() + i - 1}>
                                        {new Date().getFullYear() + i - 1}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Jaspel Stats */}
                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">💰</div>
                                <div className="text-lg font-bold success-gradient">
                                    {formatCurrency(stats.approved || 0)}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Disetujui</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">⏳</div>
                                <div className="text-lg font-bold warning-gradient">
                                    {formatCurrency(stats.pending || 0)}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Pending</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">💉</div>
                                <div className="text-2xl font-bold text-gradient">
                                    {stats.count_tindakan || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Tindakan</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">📈</div>
                                <div className="text-lg font-bold text-gradient">
                                    {formatCurrency(stats.total || 0)}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Total</p>
                            </div>
                        </div>

                        {/* Recent Jaspel */}
                        <div>
                            <h3 className="text-lg font-semibold text-white mb-4">Riwayat Terbaru</h3>
                            <div className="space-y-3">
                                {jaspelData?.recent_jaspel?.slice(0, 5).map((item, index) => (
                                    <div key={index} className="stat-card p-3">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="font-semibold text-white">{item.jenis_tindakan}</p>
                                                <p className="text-sm text-white text-opacity-70">
                                                    {item.pasien?.nama_pasien} • {new Date(item.tanggal_tindakan).toLocaleDateString('id-ID')}
                                                </p>
                                            </div>
                                            <div className="text-right">
                                                <p className="font-semibold text-white">{formatCurrency(item.jasa_dokter)}</p>
                                                <div className={`status-badge ${item.status_validasi === 'disetujui' ? 'status-online' : item.status_validasi === 'pending' ? 'status-away' : 'status-busy'}`}>
                                                    {item.status_validasi}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Presensi Component with Real API
        function Presensi() {
            const [presensiData, setPresensiData] = useState(null);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                fetchPresensiData();
            }, []);

            const fetchPresensiData = async () => {
                try {
                    const token = API_TOKEN;
                    const response = await fetch('/api/v2/dashboards/dokter/presensi', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        setPresensiData(data.data);
                    }
                    setLoading(false);
                } catch (err) {
                    setLoading(false);
                }
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="spinner"></div>
                    </div>
                );
            }

            const todayData = presensiData?.today || {};
            const stats = presensiData?.stats || {};

            return (
                <div className="space-y-6 fade-in">
                    <div className="card p-6">
                        <h2 className="text-xl font-bold text-white mb-4">Presensi</h2>
                        
                        {/* Today's Status */}
                        <div className="gradient-card p-6 mb-6">
                            <h3 className="text-lg font-semibold text-white mb-4">Status Hari Ini</h3>
                            <div className="grid grid-cols-2 gap-4">
                                <div className="text-center">
                                    <div className="text-3xl mb-2">🕐</div>
                                    <p className="text-white text-opacity-70 text-sm">Check In</p>
                                    <p className="text-xl font-bold text-white">
                                        {todayData.time_in || '--:--'}
                                    </p>
                                </div>
                                <div className="text-center">
                                    <div className="text-3xl mb-2">🕐</div>
                                    <p className="text-white text-opacity-70 text-sm">Check Out</p>
                                    <p className="text-xl font-bold text-white">
                                        {todayData.time_out || '--:--'}
                                    </p>
                                </div>
                            </div>
                            
                            {todayData.work_duration && (
                                <div className="mt-4 text-center">
                                    <p className="text-white text-opacity-70 text-sm">Durasi Kerja</p>
                                    <p className="text-lg font-semibold text-white">{todayData.work_duration}</p>
                                </div>
                            )}
                            
                            <div className="mt-4 flex justify-center">
                                {todayData.can_check_in && (
                                    <button className="btn-primary">Check In</button>
                                )}
                                {todayData.can_check_out && (
                                    <button className="btn-primary">Check Out</button>
                                )}
                            </div>
                        </div>

                        {/* Stats */}
                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">📅</div>
                                <div className="text-2xl font-bold text-gradient">
                                    {stats.total_days || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Hari Hadir</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">⏰</div>
                                <div className="text-2xl font-bold success-gradient">
                                    {stats.on_time || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Tepat Waktu</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">⏳</div>
                                <div className="text-2xl font-bold warning-gradient">
                                    {stats.late || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Terlambat</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">🕐</div>
                                <div className="text-2xl font-bold text-gradient">
                                    {Math.round(stats.total_hours || 0)}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Total Jam</p>
                            </div>
                        </div>

                        {/* Recent History */}
                        <div>
                            <h3 className="text-lg font-semibold text-white mb-4">Riwayat Terbaru</h3>
                            <div className="space-y-3">
                                {presensiData?.history?.slice(0, 5).map((item, index) => (
                                    <div key={index} className="stat-card p-3">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="font-semibold text-white">
                                                    {new Date(item.date).toLocaleDateString('id-ID', { 
                                                        weekday: 'long', 
                                                        day: 'numeric', 
                                                        month: 'short' 
                                                    })}
                                                </p>
                                                <p className="text-sm text-white text-opacity-70">
                                                    {item.time_in} - {item.time_out || 'Belum checkout'}
                                                </p>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-sm text-white">{item.formatted_work_duration}</p>
                                                <div className={`status-badge ${item.status === 'on_time' ? 'status-online' : item.status === 'late' ? 'status-away' : 'status-busy'}`}>
                                                    {item.status === 'on_time' ? 'Tepat Waktu' : item.status === 'late' ? 'Terlambat' : 'Pulang Cepat'}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Laporan Component with Real API
        function Laporan() {
            const [reportData, setReportData] = useState(null);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                fetchReportData();
            }, []);

            const fetchReportData = async () => {
                try {
                    const token = API_TOKEN;
                    const response = await fetch('/api/v2/dashboards/dokter/tindakan', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        setReportData(data.data);
                    }
                    setLoading(false);
                } catch (err) {
                    setLoading(false);
                }
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="spinner"></div>
                    </div>
                );
            }

            const summary = reportData?.meta?.summary || {};

            return (
                <div className="space-y-6 fade-in">
                    <div className="card p-6">
                        <h2 className="text-xl font-bold text-white mb-4">Laporan Tindakan</h2>
                        
                        {/* Summary Stats */}
                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">📊</div>
                                <div className="text-2xl font-bold text-gradient">
                                    {summary.total || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Total Tindakan</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">✅</div>
                                <div className="text-2xl font-bold success-gradient">
                                    {summary.approved || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Disetujui</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">⏳</div>
                                <div className="text-2xl font-bold warning-gradient">
                                    {summary.pending || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Pending</p>
                            </div>
                            
                            <div className="stat-card text-center">
                                <div className="text-3xl mb-2">❌</div>
                                <div className="text-2xl font-bold text-red-400">
                                    {summary.rejected || 0}
                                </div>
                                <p className="text-white text-opacity-70 text-sm">Ditolak</p>
                            </div>
                        </div>

                        {/* Recent Tindakan */}
                        <div>
                            <h3 className="text-lg font-semibold text-white mb-4">Tindakan Terbaru</h3>
                            <div className="space-y-3">
                                {reportData?.data?.slice(0, 8).map((item, index) => (
                                    <div key={index} className="stat-card p-3">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <p className="font-semibold text-white">{item.jenis_tindakan}</p>
                                                <p className="text-sm text-white text-opacity-70">
                                                    {item.pasien?.nama_pasien} • {new Date(item.tanggal_tindakan).toLocaleDateString('id-ID')}
                                                </p>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-sm text-white">
                                                    {new Intl.NumberFormat('id-ID', {
                                                        style: 'currency',
                                                        currency: 'IDR',
                                                        minimumFractionDigits: 0
                                                    }).format(item.jasa_dokter)}
                                                </p>
                                                <div className={`status-badge ${item.status_validasi === 'disetujui' ? 'status-online' : item.status_validasi === 'pending' ? 'status-away' : 'status-busy'}`}>
                                                    {item.status_validasi}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Profil Component
        function Profil() {
            const [profileData, setProfileData] = useState(null);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                fetchProfileData();
            }, []);

            const fetchProfileData = async () => {
                try {
                    const token = API_TOKEN;
                    const response = await fetch('/api/v2/dashboards/dokter/', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        setProfileData(data.data);
                    }
                    setLoading(false);
                } catch (err) {
                    setLoading(false);
                }
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center h-64">
                        <div className="spinner"></div>
                    </div>
                );
            }

            const user = profileData?.user || {};
            const dokter = profileData?.dokter || {};

            return (
                <div className="space-y-6 fade-in">
                    <div className="card p-6">
                        <h2 className="text-xl font-bold text-white mb-6">Profil Dokter</h2>
                        
                        {/* Profile Header */}
                        <div className="text-center mb-6">
                            <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-4">
                                {user.initials || '👨‍⚕️'}
                            </div>
                            <h3 className="text-xl font-bold text-white">{dokter.nama_lengkap || user.name}</h3>
                            <p className="text-white text-opacity-70">{dokter.jabatan_display || 'Dokter'}</p>
                            <div className="status-badge status-online mt-2">
                                <div className="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                                {dokter.status || 'Aktif'}
                            </div>
                        </div>

                        {/* Profile Details */}
                        <div className="space-y-4">
                            <div className="stat-card p-4">
                                <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-blue-500 bg-opacity-20 rounded-full flex items-center justify-center">
                                        <User size={20} className="text-blue-400" />
                                    </div>
                                    <div>
                                        <p className="text-white text-opacity-70 text-sm">NIK</p>
                                        <p className="text-white font-semibold">{dokter.nik || 'N/A'}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-4">
                                <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-green-500 bg-opacity-20 rounded-full flex items-center justify-center">
                                        <FileText size={20} className="text-green-400" />
                                    </div>
                                    <div>
                                        <p className="text-white text-opacity-70 text-sm">Nomor SIP</p>
                                        <p className="text-white font-semibold">{dokter.nomor_sip || 'N/A'}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-4">
                                <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-purple-500 bg-opacity-20 rounded-full flex items-center justify-center">
                                        <Bell size={20} className="text-purple-400" />
                                    </div>
                                    <div>
                                        <p className="text-white text-opacity-70 text-sm">Email</p>
                                        <p className="text-white font-semibold">{user.email || 'N/A'}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-4">
                                <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-yellow-500 bg-opacity-20 rounded-full flex items-center justify-center">
                                        <Award size={20} className="text-yellow-400" />
                                    </div>
                                    <div>
                                        <p className="text-white text-opacity-70 text-sm">Spesialisasi</p>
                                        <p className="text-white font-semibold">{dokter.jabatan || 'Dokter Umum'}</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Action Buttons */}
                        <div className="mt-6 space-y-3">
                            <button className="btn-secondary w-full">
                                Edit Profil
                            </button>
                            <button className="btn-secondary w-full">
                                Ubah Password
                            </button>
                            <button className="btn-secondary w-full">
                                Pengaturan
                            </button>
                        </div>
                    </div>
                </div>
            );
        }

        // Main App Component
        function App() {
            const [isLoggedIn, setIsLoggedIn] = useState(true); // Auto-login for authenticated users
            const [activeTab, setActiveTab] = useState('dashboard');
            const [showPassword, setShowPassword] = useState(false);
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const [isLoading, setIsLoading] = useState(false);

            const handleLogin = async (e) => {
                e.preventDefault();
                setIsLoading(true);
                
                // Simulate login process
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                setIsLoading(false);
                setIsLoggedIn(true);
            };

            const handleLogout = () => {
                window.location.href = '/logout';
            };

            const handleTabChange = (tabId) => {
                setActiveTab(tabId);
            };

            const handleProfileClick = () => {
                setActiveTab('profil');
            };

            // Bottom navigation tabs
            const tabs = [
                { id: 'dashboard', label: 'Dashboard', icon: Home, component: Dashboard },
                { id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga },
                { id: 'jaspel', label: 'Jaspel', icon: DollarSign, component: Jaspel },
                { id: 'presensi', label: 'Presensi', icon: Clock, component: Presensi },
                { id: 'laporan', label: 'Laporan', icon: FileText, component: Laporan },
            ];

            // All components including Profile for routing
            const allComponents = [
                ...tabs,
                { id: 'profil', label: 'Profil', icon: User, component: Profil }
            ];

            const ActiveComponent = allComponents.find(tab => tab.id === activeTab)?.component || Dashboard;

            return (
                <div className="app-container">
                    <div className="bg-pattern"></div>
                    
                    {/* Header */}
                    <header className="bg-gradient-to-r from-slate-900 via-slate-800 to-slate-900 text-white p-6 shadow-2xl relative overflow-hidden">
                        {/* Header Background Pattern */}
                        <div className="absolute inset-0 bg-gradient-to-r from-blue-600 from-opacity-5 to-purple-600 to-opacity-5"></div>
                        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-500 to-purple-500 opacity-10 rounded-full transform -translate-y-16 translate-x-16"></div>
                        <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-green-500 to-blue-500 opacity-10 rounded-full transform translate-y-12 -translate-x-12"></div>
                        
                        <div className="relative z-10">
                            <div className="flex items-center justify-between mb-4">
                                <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                                        <Stethoscope size={20} className="text-white" />
                                    </div>
                                    <div>
                                        <h1 className="text-xl font-bold text-gradient">KLINIK DOKTERKU</h1>
                                        <p className="text-xs text-white text-opacity-60">Medical Dashboard</p>
                                    </div>
                                </div>
                                <div className="flex gap-2">
                                    {/* Profile Button */}
                                    <button 
                                        onClick={handleProfileClick}
                                        className={`p-3 rounded-full transition-all duration-300 ${
                                            activeTab === 'profil' 
                                                ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white pulse-glow' 
                                                : 'bg-white bg-opacity-10 text-white hover:bg-opacity-20'
                                        }`}
                                        title="Profil"
                                    >
                                        <User size={18} />
                                    </button>
                                    
                                    {/* Notification Button */}
                                    <button className="p-3 rounded-full bg-white bg-opacity-10 text-white hover:bg-opacity-20 transition-all duration-300 relative">
                                        <Bell size={18} />
                                        <div className="notification-dot"></div>
                                    </button>
                                    
                                    {/* Logout Button */}
                                    <button 
                                        onClick={handleLogout}
                                        className="p-3 rounded-full bg-white bg-opacity-10 text-white hover:bg-opacity-20 transition-all duration-300"
                                        title="Keluar"
                                    >
                                        <LogOut size={18} />
                                    </button>
                                </div>
                            </div>
                            
                            <div className="flex items-center gap-4">
                                <div className="w-14 h-14 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-xl font-bold">
                                    {INITIAL_USER_DATA.initials}
                                </div>
                                <div>
                                    <p className="text-white text-opacity-70 text-sm">Selamat datang kembali,</p>
                                    <p className="text-white text-lg font-semibold">{INITIAL_USER_DATA.name}</p>
                                    <div className="flex items-center gap-2 mt-1">
                                        <div className="w-2 h-2 bg-green-400 rounded-full pulse-glow"></div>
                                        <span className="text-xs text-white text-opacity-70">Online</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </header>

                    {/* Main Content */}
                    <main className="flex-1 p-4 pb-32 relative z-10">
                        <ActiveComponent />
                    </main>

                    {/* Bottom Navigation */}
                    <nav className="fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md z-50">
                        <div className="card-glass m-4 bg-opacity-95 backdrop-blur-xl">
                            <div className="p-3">
                                <div className="flex justify-around items-center">
                                    {tabs.map((tab) => {
                                        const Icon = tab.icon;
                                        const isActive = activeTab === tab.id;
                                        
                                        return (
                                            <button
                                                key={tab.id}
                                                onClick={() => handleTabChange(tab.id)}
                                                className={`nav-item ${isActive ? 'active' : ''}`}
                                            >
                                                <div className="relative">
                                                    <Icon size={22} className="mb-1" />
                                                    {isActive && (
                                                        <div className="absolute -top-1 -right-1 w-2 h-2 bg-white rounded-full pulse-glow"></div>
                                                    )}
                                                </div>
                                                <span className="text-xs text-center font-medium">{tab.label}</span>
                                            </button>
                                        );
                                    })}
                                </div>
                            </div>
                        </div>
                    </nav>

                    {/* Floating Action Button */}
                    <button className="floating-action">
                        <Bell size={24} />
                    </button>
                </div>
            );
        }

        // Render the app with React 18 createRoot
        const root = ReactDOM.createRoot(document.getElementById('app'));
        root.render(<App />);
        @endverbatim
    </script>
</body>
</html>