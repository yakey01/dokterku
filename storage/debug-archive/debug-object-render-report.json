{
  "timestamp": "2025-08-04T08:47:46.308Z",
  "summary": {
    "totalFiles": 135,
    "suspiciousPatterns": 2242,
    "jadwalUsages": 133,
    "potentialIssues": 6,
    "highRiskIssues": 1
  },
  "results": {
    "suspiciousPatterns": [
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [dashboardData, setDashboardData] = useState({\n    jadwalMendatang: [] as JadwalItem[],\n    stats: {\n      attendance: { current: 0, target: 90, change: 0 }",
        "line": 35,
        "context": "export function Dashboard({ userData }: DashboardProps) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{\n          const data = await response.json();\n          setDashboardData({\n            jadwalMendatang: data.jadwal || [\n              {\n                id: '1',\n                tanggal: '2025-01-18',\n                waktu: '07:00 - 15:00',\n                lokasi: 'IGD',\n                jenis: 'pagi',\n                status: 'scheduled'\n              }",
        "line": 62,
        "context": "if (response.ok) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{\n          // Fallback data if API fails\n          setDashboardData({\n            jadwalMendatang: [\n              {\n                id: '1',\n                tanggal: '2025-01-18',\n                waktu: '07:00 - 15:00',\n                lokasi: 'IGD',\n                jenis: 'pagi',\n                status: 'scheduled'\n              }",
        "line": 90,
        "context": "} else {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{ jadwalMendatang, stats, loading }",
        "line": 161,
        "context": "const { jadwalMendatang, stats, loading } = dashboardData;",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwalMendatang.slice(0, 3).map((schedule, index) => (\n              <div\n                key={schedule.id}",
        "line": 403,
        "context": "{jadwalMendatang.slice(0, 3).map((schedule, index) => (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{ thisMonth: 15500000, lastMonth: 14200000, change: +9.2 }",
        "line": 86,
        "context": "jaspel: { thisMonth: 15500000, lastMonth: 14200000, change: +9.2 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{ thisMonth: 15500000, lastMonth: 14200000, change: +9.2 }",
        "line": 114,
        "context": "jaspel: { thisMonth: 15500000, lastMonth: 14200000, change: +9.2 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{getShiftIcon(nextSchedule.jenis)}",
        "line": 239,
        "context": "<div className=\"text-2xl\">{getShiftIcon(nextSchedule.jenis)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTanggal(nextSchedule.tanggal)}",
        "line": 241,
        "context": "<h4 className=\"text-lg\">{formatTanggal(nextSchedule.tanggal)}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{nextSchedule.jenis}",
        "line": 242,
        "context": "<p className=\"text-blue-100 text-sm\">Shift {nextSchedule.jenis}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getShiftColor(nextSchedule.jenis)} text-xs`}",
        "line": 245,
        "context": "<Badge className={`${getShiftColor(nextSchedule.jenis)} text-xs`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{nextSchedule.jenis.charAt(0).toUpperCase() + nextSchedule.jenis.slice(1)}",
        "line": 246,
        "context": "{nextSchedule.jenis.charAt(0).toUpperCase() + nextSchedule.jenis.slice(1)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{nextSchedule.waktu}",
        "line": 254,
        "context": "{nextSchedule.waktu}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{nextSchedule.lokasi}",
        "line": 260,
        "context": "{nextSchedule.lokasi}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current}",
        "line": 290,
        "context": "<p className=\"text-2xl text-green-600\">{stats.attendance.current}%</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current}",
        "line": 293,
        "context": "<Progress value={stats.attendance.current} className=\"h-2 mb-2\" />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.change}",
        "line": 296,
        "context": "<span className=\"text-green-600\">+{stats.attendance.change}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.score}",
        "line": 310,
        "context": "<p className=\"text-2xl text-blue-600\">{stats.performance.score}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.score}",
        "line": 313,
        "context": "<Progress value={stats.performance.score} className=\"h-2 mb-2\" />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.change}",
        "line": 316,
        "context": "<span className=\"text-blue-600\">+{stats.performance.change}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.thisMonth.toLocaleString('id-ID')}",
        "line": 338,
        "context": "Rp {stats.jaspel.thisMonth.toLocaleString('id-ID')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.change}",
        "line": 342,
        "context": "<span className=\"text-emerald-600\">+{stats.jaspel.change}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.lastMonth.toLocaleString('id-ID')}",
        "line": 350,
        "context": "Rp {stats.jaspel.lastMonth.toLocaleString('id-ID')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{() => window.location.href = '/paramedis/presensi'}",
        "line": 369,
        "context": "onClick={() => window.location.href = '/paramedis/presensi'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{schedule.id}",
        "line": 405,
        "context": "key={schedule.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{getShiftIcon(schedule.jenis)}",
        "line": 410,
        "context": "<div className=\"text-lg\">{getShiftIcon(schedule.jenis)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTanggal(schedule.tanggal)}",
        "line": 412,
        "context": "<p className=\"text-sm\">{formatTanggal(schedule.tanggal)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{schedule.waktu}",
        "line": 413,
        "context": "<p className=\"text-xs text-muted-foreground\">{schedule.waktu}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{schedule.lokasi}",
        "line": 417,
        "context": "<p className=\"text-sm\">{schedule.lokasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{schedule.jenis}",
        "line": 426,
        "context": "{schedule.jenis}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  jadwal: JadwalItem[];\n  stats: {\n    scheduled: number;\n    completed: number;\n    missed: number;\n    thisWeek: number;\n    thisMonth: number;\n  }",
        "line": 16,
        "context": "interface JadwalData {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [jadwalData, setJadwalData] = useState<JadwalData>({\n    jadwal: [],\n    stats: {\n      scheduled: 0,\n      completed: 0,\n      missed: 0,\n      thisWeek: 0,\n      thisMonth: 0\n    }",
        "line": 28,
        "context": "export function JadwalJaga() {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    const fetchJadwalData = async () => {\n      try {\n        const token = localStorage.getItem('auth_token') || document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n        \n        const response = await fetch('/api/v2/dashboards/dokter/jadwal', {\n          headers: {\n            'Authorization': `Bearer ${token}",
        "line": 43,
        "context": "useEffect(() => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n          const data = await response.json();\n          setJadwalData({\n            jadwal: data.jadwal || [\n              {\n                id: '1',\n                tanggal: '2025-01-18',\n                waktu: '07:00 - 15:00',\n                lokasi: 'IGD',\n                jenis: 'pagi',\n                status: 'scheduled'\n              }",
        "line": 56,
        "context": "if (response.ok) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n          // Fallback data\n          setJadwalData({\n            jadwal: [\n              {\n                id: '1',\n                tanggal: '2025-01-18',\n                waktu: '07:00 - 15:00',\n                lokasi: 'IGD',\n                jenis: 'pagi',\n                status: 'scheduled'\n              }",
        "line": 102,
        "context": "} else {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        console.error('Failed to fetch jadwal data:', error);\n        setJadwalData(prev => ({ ...prev, loading: false }",
        "line": 149,
        "context": "} catch (error) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    try {\n      const token = localStorage.getItem('auth_token') || document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n      \n      const response = await fetch(`/api/v2/dashboards/dokter/jadwal/${id}",
        "line": 163,
        "context": "const handleCancelSchedule = async (id: string) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        setJadwalData(prev => ({\n          ...prev,\n          jadwal: prev.jadwal.map(item => \n            item.id === id ? { ...item, status: 'missed' as const }",
        "line": 176,
        "context": "if (response.ok) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{[\n              { key: 'all', label: 'Semua', count: jadwalData.jadwal.length }",
        "line": 327,
        "context": "{[",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{ key: 'scheduled', label: 'Dijadwalkan', count: stats.scheduled }",
        "line": 329,
        "context": "{ key: 'scheduled', label: 'Dijadwalkan', count: stats.scheduled },",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{filteredJadwal.length === 0 ? (\n          <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n            <CardContent className=\"p-8 text-center\">\n              <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">Tidak ada jadwal {filter === 'all' ? '' : `yang ${filter}",
        "line": 353,
        "context": "{filteredJadwal.length === 0 ? (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "line": 376,
        "context": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisWeek}",
        "line": 275,
        "context": "<p className=\"text-2xl font-semibold text-blue-700\">{stats.thisWeek}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisMonth}",
        "line": 289,
        "context": "<p className=\"text-2xl font-semibold text-emerald-700\">{stats.thisMonth}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.scheduled}",
        "line": 301,
        "context": "<div className=\"text-lg font-semibold text-blue-700\">{stats.scheduled}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.completed}",
        "line": 309,
        "context": "<div className=\"text-lg font-semibold text-emerald-700\">{stats.completed}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.missed}",
        "line": 317,
        "context": "<div className=\"text-lg font-semibold text-red-700\">{stats.missed}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'all', label: 'Semua', count: jadwalData.jadwal.length }",
        "line": 328,
        "context": "{ key: 'all', label: 'Semua', count: jadwalData.jadwal.length },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'scheduled', label: 'Dijadwalkan', count: stats.scheduled }",
        "line": 329,
        "context": "{ key: 'scheduled', label: 'Dijadwalkan', count: stats.scheduled },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'completed', label: 'Selesai', count: stats.completed }",
        "line": 330,
        "context": "{ key: 'completed', label: 'Selesai', count: stats.completed },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'missed', label: 'Terlewat', count: stats.missed }",
        "line": 331,
        "context": "{ key: 'missed', label: 'Terlewat', count: stats.missed }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.key}",
        "line": 334,
        "context": "key={tab.key}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{filter === tab.key ? \"default\" : \"outline\"}",
        "line": 335,
        "context": "variant={filter === tab.key ? \"default\" : \"outline\"}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setFilter(tab.key as any)}",
        "line": 337,
        "context": "onClick={() => setFilter(tab.key as any)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label} ({tab.count}",
        "line": 344,
        "context": "{tab.label} ({tab.count})",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.id}",
        "line": 363,
        "context": "key={scheduleItem.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{getShiftIcon(scheduleItem.jenis)}",
        "line": 369,
        "context": "<div className=\"text-2xl\">{getShiftIcon(scheduleItem.jenis)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTanggal(scheduleItem.tanggal)}",
        "line": 371,
        "context": "<h4 className=\"text-lg font-medium\">{formatTanggal(scheduleItem.tanggal)}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.jenis}",
        "line": 372,
        "context": "<p className=\"text-sm text-muted-foreground\">Shift {scheduleItem.jenis}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(scheduleItem.status)} border`}",
        "line": 375,
        "context": "<Badge className={`${getStatusColor(scheduleItem.status)} border`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "line": 376,
        "context": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'completed' && 'Selesai'}",
        "line": 377,
        "context": "{scheduleItem.status === 'completed' && 'Selesai'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'missed' && 'Terlewat'}",
        "line": 378,
        "context": "{scheduleItem.status === 'missed' && 'Terlewat'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.waktu}",
        "line": 387,
        "context": "<span className=\"text-sm flex-1\">{scheduleItem.waktu}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getShiftColor(scheduleItem.jenis)} text-xs`}",
        "line": 388,
        "context": "<Badge className={`${getShiftColor(scheduleItem.jenis)} text-xs`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.jenis.charAt(0).toUpperCase() + scheduleItem.jenis.slice(1)}",
        "line": 389,
        "context": "{scheduleItem.jenis.charAt(0).toUpperCase() + scheduleItem.jenis.slice(1)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.lokasi}",
        "line": 397,
        "context": "<span className=\"text-sm flex-1\">{scheduleItem.lokasi}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleEditSchedule(scheduleItem.id)}",
        "line": 408,
        "context": "onClick={() => handleEditSchedule(scheduleItem.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleCancelSchedule(scheduleItem.id)}",
        "line": 417,
        "context": "onClick={() => handleCancelSchedule(scheduleItem.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "conditionalObjects",
        "match": "{filter === tab.key ? \"default\" : \"outline\"}",
        "line": 335,
        "context": "variant={filter === tab.key ? \"default\" : \"outline\"}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "pattern": "conditionalObjects",
        "match": "{filter === 'all' ? '' : `yang ${filter}`}",
        "line": 357,
        "context": "<p className=\"text-gray-600\">Tidak ada jadwal {filter === 'all' ? '' : `yang ${filter}`}</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.thisMonth)}",
        "line": 240,
        "context": "{formatCurrency(summary.thisMonth)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.yearToDate)}",
        "line": 261,
        "context": "{formatCurrency(summary.yearToDate)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.paid)}",
        "line": 277,
        "context": "<div className=\"text-lg font-semibold text-green-700\">{formatCurrency(summary.paid)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.pending)}",
        "line": 285,
        "context": "<div className=\"text-lg font-semibold text-yellow-700\">{formatCurrency(summary.pending)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.rejected)}",
        "line": 293,
        "context": "<div className=\"text-lg font-semibold text-red-700\">{formatCurrency(summary.rejected)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.thisMonth)}",
        "line": 320,
        "context": "<p className=\"text-lg font-semibold text-emerald-700\">{formatCurrency(summary.thisMonth)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.lastMonth)}",
        "line": 332,
        "context": "<p className=\"text-lg font-semibold text-gray-700\">{formatCurrency(summary.lastMonth)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 350,
        "context": "<div key={item.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.jenis}",
        "line": 356,
        "context": "<p className=\"text-sm font-medium\">{item.jenis}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(item.tanggal)}",
        "line": 357,
        "context": "<p className=\"text-xs text-gray-600\">{formatDate(item.tanggal)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.jumlah)}",
        "line": 361,
        "context": "<p className=\"text-sm font-semibold\">{formatCurrency(item.jumlah)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(item.status)} text-xs`}",
        "line": 362,
        "context": "<Badge className={`${getStatusColor(item.status)} text-xs`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.status === 'paid' && 'Dibayar'}",
        "line": 363,
        "context": "{item.status === 'paid' && 'Dibayar'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.status === 'pending' && 'Menunggu'}",
        "line": 364,
        "context": "{item.status === 'pending' && 'Menunggu'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.status === 'rejected' && 'Ditolak'}",
        "line": 365,
        "context": "{item.status === 'rejected' && 'Ditolak'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 377,
        "context": "<Card key={item.id} className=\"shadow-lg hover:shadow-xl transition-all duration-300 border-0 bg-white/80 backdrop-blur-sm hover:scale-[1.01] hover:-translate-y-1\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.jenis}",
        "line": 381,
        "context": "<h4 className=\"text-lg font-medium\">{item.jenis}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(item.tanggal)}",
        "line": 382,
        "context": "<p className=\"text-sm text-gray-600\">{formatDate(item.tanggal)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(item.status)}`}",
        "line": 384,
        "context": "<Badge className={`${getStatusColor(item.status)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.status === 'paid' && 'Dibayar'}",
        "line": 385,
        "context": "{item.status === 'paid' && 'Dibayar'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.status === 'pending' && 'Menunggu'}",
        "line": 386,
        "context": "{item.status === 'pending' && 'Menunggu'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.status === 'rejected' && 'Ditolak'}",
        "line": 387,
        "context": "{item.status === 'rejected' && 'Ditolak'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.jumlah)}",
        "line": 394,
        "context": "<span className=\"text-lg font-semibold text-emerald-600\">{formatCurrency(item.jumlah)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.keterangan}",
        "line": 400,
        "context": "<span className=\"text-sm\">{item.keterangan}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 127,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 128,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 157,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 158,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalHadir}",
        "line": 161,
        "context": "<div className=\"text-2xl text-green-600\">{monthlyStats.totalHadir}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 167,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 168,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalTerlambat}",
        "line": 171,
        "context": "<div className=\"text-2xl text-yellow-600\">{monthlyStats.totalTerlambat}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 177,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 178,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalTidakHadir}",
        "line": 181,
        "context": "<div className=\"text-2xl text-red-600\">{monthlyStats.totalTidakHadir}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.tingkatKehadiran}",
        "line": 190,
        "context": "<span className=\"text-lg\">{monthlyStats.tingkatKehadiran}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${monthlyStats.tingkatKehadiran}%` }}",
        "line": 196,
        "context": "animate={{ width: `${monthlyStats.tingkatKehadiran}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 1.5, delay: 0.5 }}",
        "line": 197,
        "context": "transition={{ duration: 1.5, delay: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalJamKerja}",
        "line": 215,
        "context": "<p className=\"text-xl\">{monthlyStats.totalJamKerja}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.rataRataJamPerHari}",
        "line": 229,
        "context": "<p className=\"text-xl\">{monthlyStats.rataRataJamPerHari}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 249,
        "context": "key={record.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, y: -1 }}",
        "line": 251,
        "context": "whileHover={{ scale: 1.01, y: -1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 252,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.hari}",
        "line": 259,
        "context": "<h4 className=\"text-base\">{record.hari}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(record.tanggal)}",
        "line": 260,
        "context": "<span className=\"text-sm text-muted-foreground\">{formatDate(record.tanggal)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.shift}",
        "line": 263,
        "context": "<span>{record.shift}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.lokasi}",
        "line": 265,
        "context": "<span>{record.lokasi}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(record.status)} border flex items-center gap-1`}",
        "line": 268,
        "context": "<Badge className={`${getStatusColor(record.status)} border flex items-center gap-1`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(record.status)}",
        "line": 269,
        "context": "{getStatusIcon(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'present' && 'Hadir'}",
        "line": 270,
        "context": "{record.status === 'present' && 'Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'late' && 'Terlambat'}",
        "line": 271,
        "context": "{record.status === 'late' && 'Terlambat'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'absent' && 'Tidak Hadir'}",
        "line": 272,
        "context": "{record.status === 'absent' && 'Tidak Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.masuk}",
        "line": 283,
        "context": "<p>{record.masuk}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.keluar}",
        "line": 293,
        "context": "<p>{record.keluar}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.totalJam}",
        "line": 303,
        "context": "<p>{record.totalJam}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      icon: Stethoscope,\n      title: 'Kelola Jadwal Jaga',\n      description: 'Atur dan pantau jadwal kerja dengan mudah'\n    }",
        "line": 81,
        "context": "{",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.6, type: \"spring\" }}",
        "line": 139,
        "context": "transition={{ delay: 0.3, duration: 0.6, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, duration: 0.6 }}",
        "line": 149,
        "context": "transition={{ delay: 0.4, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5, duration: 0.6 }}",
        "line": 158,
        "context": "transition={{ delay: 0.5, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.6 }}",
        "line": 172,
        "context": "transition={{ delay: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7 }}",
        "line": 201,
        "context": "transition={{ delay: 0.7 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 208,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.8 }}",
        "line": 219,
        "context": "transition={{ delay: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 227,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.9 }}",
        "line": 252,
        "context": "transition={{ delay: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 1.0 }}",
        "line": 286,
        "context": "transition={{ delay: 1.0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 312,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 313,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 320,
        "context": "<h4 className=\"text-sm mb-1\">{feature.title}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.description}",
        "line": 322,
        "context": "{feature.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 225,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [activeTab, setActiveTab] = useState('presensi');\n\n  const tabs = [\n    { id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga }",
        "line": 20,
        "context": "export function MainApp({ onLogout, userData }: MainAppProps) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.95 }}",
        "line": 40,
        "context": "initial={{ opacity: 0, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 42,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, ease: \"easeOut\" }}",
        "line": 52,
        "context": "transition={{ duration: 0.6, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.5, type: \"spring\" }}",
        "line": 65,
        "context": "transition={{ delay: 0.3, duration: 0.5, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 71,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 72,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 79,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 80,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 88,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 89,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, duration: 0.5 }}",
        "line": 107,
        "context": "transition={{ delay: 0.4, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: \"easeInOut\" }}",
        "line": 129,
        "context": "transition={{ duration: 0.3, ease: \"easeInOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}",
        "line": 140,
        "context": "transition={{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 152,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleTabChange(tab.id)}",
        "line": 153,
        "context": "onClick={() => handleTabChange(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 155,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 156,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 + 0.3, duration: 0.4 }}",
        "line": 159,
        "context": "transition={{ delay: index * 0.1 + 0.3, duration: 0.4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 167,
        "context": "initial={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 169,
        "context": "exit={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2, ease: \"easeInOut\" }}",
        "line": 170,
        "context": "transition={{ duration: 0.2, ease: \"easeInOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 182,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 197,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 199,
        "context": "{tab.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayStatus.workLocation}",
        "line": 314,
        "context": "<p className=\"font-medium\">{todayStatus.workLocation}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayStatus.checkInTime || '--:--'}",
        "line": 326,
        "context": "{todayStatus.checkInTime || '--:--'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayStatus.checkOutTime || '--:--'}",
        "line": 336,
        "context": "{todayStatus.checkOutTime || '--:--'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayStatus.isCheckedIn ? 'Check Out' : 'Check In'}",
        "line": 359,
        "context": "{todayStatus.isCheckedIn ? 'Check Out' : 'Check In'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayStatus.currentLocation}",
        "line": 366,
        "context": "Lokasi terdeteksi: {todayStatus.currentLocation}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisMonth.present} dari {stats.thisMonth.total}",
        "line": 386,
        "context": "{stats.thisMonth.present} dari {stats.thisMonth.total} hari",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisMonth.total}",
        "line": 399,
        "context": "<p className=\"text-2xl font-bold text-blue-700\">{stats.thisMonth.total}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisMonth.present}",
        "line": 414,
        "context": "<div className=\"text-lg font-semibold text-green-700\">{stats.thisMonth.present}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisMonth.late}",
        "line": 422,
        "context": "<div className=\"text-lg font-semibold text-yellow-700\">{stats.thisMonth.late}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.thisMonth.absent}",
        "line": 430,
        "context": "<div className=\"text-lg font-semibold text-red-700\">{stats.thisMonth.absent}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 453,
        "context": "<div key={record.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(record.status)}",
        "line": 456,
        "context": "{getStatusIcon(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(record.tanggal)}",
        "line": 459,
        "context": "<p className=\"font-medium\">{formatDate(record.tanggal)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.lokasi}",
        "line": 460,
        "context": "<p className=\"text-sm text-gray-600\">{record.lokasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.checkIn || '--:--'}",
        "line": 465,
        "context": "<span>In: {record.checkIn || '--:--'}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.checkOut || '--:--'}",
        "line": 466,
        "context": "<span>Out: {record.checkOut || '--:--'}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(record.status)} text-xs mt-1`}",
        "line": 468,
        "context": "<Badge className={`${getStatusColor(record.status)} text-xs mt-1`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'present' && 'Hadir'}",
        "line": 469,
        "context": "{record.status === 'present' && 'Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'late' && 'Terlambat'}",
        "line": 470,
        "context": "{record.status === 'late' && 'Terlambat'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'absent' && 'Tidak Hadir'}",
        "line": 471,
        "context": "{record.status === 'absent' && 'Tidak Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'partial' && 'Partial'}",
        "line": 472,
        "context": "{record.status === 'partial' && 'Partial'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{todayStatus.isCheckedIn ? 'Check Out' : 'Check In'}",
        "line": 359,
        "context": "{todayStatus.isCheckedIn ? 'Check Out' : 'Check In'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 115,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 116,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nama}",
        "line": 126,
        "context": "<h3 className=\"text-xl\">{userProfile.nama}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.spesialisasi}",
        "line": 127,
        "context": "<p className=\"text-sm text-muted-foreground\">{userProfile.spesialisasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.status}",
        "line": 130,
        "context": "{userProfile.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.ratingKinerja}",
        "line": 134,
        "context": "<span className=\"text-sm text-muted-foreground\">{stats.ratingKinerja}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 139,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 140,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 165,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.email}",
        "line": 170,
        "context": "<span className=\"text-sm\">{userProfile.email}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 176,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.telefon}",
        "line": 181,
        "context": "<span className=\"text-sm\">{userProfile.telefon}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 187,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.rumahSakit}",
        "line": 192,
        "context": "<span className=\"text-sm\">{userProfile.rumahSakit}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 198,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nomorSip}",
        "line": 203,
        "context": "<span className=\"text-sm\">SIP: {userProfile.nomorSip}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 209,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(userProfile.tanggalBergabung)}",
        "line": 214,
        "context": "<span className=\"text-sm\">Bergabung: {formatDate(userProfile.tanggalBergabung)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 234,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 235,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.totalJam.toLocaleString()}",
        "line": 238,
        "context": "<div className=\"text-lg text-blue-700\">{stats.totalJam.toLocaleString()}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 245,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 246,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.ratingKinerja}",
        "line": 249,
        "context": "<div className=\"text-lg text-green-700\">{stats.ratingKinerja}/5</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 256,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 257,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.pengalamanTahun}",
        "line": 260,
        "context": "<div className=\"text-lg text-yellow-700\">{stats.pengalamanTahun}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 267,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 268,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(stats.totalJaspel)}",
        "line": 271,
        "context": "<div className=\"text-sm text-purple-700\">{formatCurrency(stats.totalJaspel)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, x: 5 }}",
        "line": 287,
        "context": "whileHover={{ scale: 1.01, x: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.99 }}",
        "line": 288,
        "context": "whileTap={{ scale: 0.99 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 289,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, x: 5 }}",
        "line": 300,
        "context": "whileHover={{ scale: 1.01, x: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.99 }}",
        "line": 301,
        "context": "whileTap={{ scale: 0.99 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 302,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, x: 5 }}",
        "line": 315,
        "context": "whileHover={{ scale: 1.01, x: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.99 }}",
        "line": 316,
        "context": "whileTap={{ scale: 0.99 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 317,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: 15 }",
        "line": 141,
        "context": "{Array.from({ length: 15 }).map((_, i) => (",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.random() * 100}",
        "line": 146,
        "context": "top: `${Math.random() * 100}%`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.random() * 100}",
        "line": 147,
        "context": "left: `${Math.random() * 100}%`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 254,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 274,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-full' : 'max-w-sm mx-auto'} min-h-screen relative`}",
        "line": 132,
        "context": "<div className={`${isIpad ? 'w-full' : 'max-w-sm mx-auto'} min-h-screen relative`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative z-10 ${isIpad ? 'px-8 sm:px-12 md:px-16 lg:px-20' : 'px-6'} pt-8`}",
        "line": 172,
        "context": "<div className={`relative z-10 ${isIpad ? 'px-8 sm:px-12 md:px-16 lg:px-20' : 'px-6'} pt-8`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-28 h-28 md:w-32 md:h-32' : 'w-24 h-24'} mx-auto mb-6 relative`}",
        "line": 178,
        "context": "<div className={`${isIpad ? 'w-28 h-28 md:w-32 md:h-32' : 'w-24 h-24'} mx-auto mb-6 relative`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-12 h-12' : 'w-10 h-10'} text-cyan-400 animate-bounce`}",
        "line": 181,
        "context": "<Stethoscope className={`${isIpad ? 'w-12 h-12' : 'w-10 h-10'} text-cyan-400 animate-bounce`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-4xl md:text-5xl' : 'text-3xl'} font-bold mb-2 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent`}",
        "line": 196,
        "context": "<h1 className={`${isIpad ? 'text-4xl md:text-5xl' : 'text-3xl'} font-bold mb-2 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-purple-200 ${isIpad ? 'text-xl' : 'text-lg'} font-medium mb-2`}",
        "line": 199,
        "context": "<p className={`text-purple-200 ${isIpad ? 'text-xl' : 'text-lg'} font-medium mb-2`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`grid grid-cols-3 gap-3 mb-8 ${isIpad ? 'max-w-2xl mx-auto' : ''}`}",
        "line": 209,
        "context": "<div className={`grid grid-cols-3 gap-3 mb-8 ${isIpad ? 'max-w-2xl mx-auto' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-red-400 mx-auto mb-2`}",
        "line": 212,
        "context": "<Heart className={`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-red-400 mx-auto mb-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-xl' : 'text-lg'} font-bold text-white`}",
        "line": 213,
        "context": "<div className={`${isIpad ? 'text-xl' : 'text-lg'} font-bold text-white`}>24/7</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-green-400 mx-auto mb-2`}",
        "line": 219,
        "context": "<Shield className={`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-green-400 mx-auto mb-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-xl' : 'text-lg'} font-bold text-white`}",
        "line": 220,
        "context": "<div className={`${isIpad ? 'text-xl' : 'text-lg'} font-bold text-white`}>100%</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-yellow-400 mx-auto mb-2`}",
        "line": 226,
        "context": "<Star className={`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-yellow-400 mx-auto mb-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-xl' : 'text-lg'} font-bold text-white`}",
        "line": 227,
        "context": "<div className={`${isIpad ? 'text-xl' : 'text-lg'} font-bold text-white`}>4.9</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`bg-gradient-to-br from-slate-800/40 via-slate-700/40 to-slate-800/40 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl ${isIpad ? 'max-w-2xl mx-auto' : ''}`}",
        "line": 233,
        "context": "<div className={`bg-gradient-to-br from-slate-800/40 via-slate-700/40 to-slate-800/40 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl ${isIpad ? 'max-w-2xl mx-auto' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-2`}",
        "line": 235,
        "context": "<h2 className={`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-2`}>Welcome Back</h2>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 272,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLogin.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}",
        "line": 285,
        "context": "{showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLoginMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 241,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLoginMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 260,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/WelcomeLoginMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-center ${isKeyboardOpen ? 'mb-4' : 'mb-8'}`}",
        "line": 170,
        "context": "<div className={`text-center ${isKeyboardOpen ? 'mb-4' : 'mb-8'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLoginMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 258,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/WelcomeLoginMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}",
        "line": 272,
        "context": "{showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: 30, scale: 0.95 }}",
        "line": 162,
        "context": "initial={{ opacity: 0, y: 30, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.8, type: \"spring\", stiffness: 100 }}",
        "line": 164,
        "context": "transition={{ duration: 0.8, type: \"spring\", stiffness: 100 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -5 }}",
        "line": 169,
        "context": "whileHover={{ scale: 1.02, y: -5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.8, type: \"spring\", stiffness: 200 }}",
        "line": 178,
        "context": "transition={{ delay: 0.3, duration: 0.8, type: \"spring\", stiffness: 200 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ rotate: 10, scale: 1.1 }}",
        "line": 179,
        "context": "whileHover={{ rotate: 10, scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5, duration: 0.6 }}",
        "line": 189,
        "context": "transition={{ delay: 0.5, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7, duration: 0.6 }}",
        "line": 198,
        "context": "transition={{ delay: 0.7, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ animationDelay: '0.5s' }}",
        "line": 205,
        "context": "<div className=\"absolute top-6 right-6 w-3 h-3 bg-emerald-400 bg-opacity-60 rounded-full animate-pulse\" style={{ animationDelay: '0.5s' }}></div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.9, duration: 0.6 }}",
        "line": 214,
        "context": "transition={{ delay: 0.9, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 1.1, duration: 0.5 }}",
        "line": 221,
        "context": "transition={{ delay: 1.1, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 229,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 1.3, duration: 0.5 }}",
        "line": 240,
        "context": "transition={{ delay: 1.3, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 249,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 254,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 255,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 1.5, duration: 0.5 }}",
        "line": 277,
        "context": "transition={{ delay: 1.5, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 246,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 119,
        "context": "key={feature.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 122,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-12 h-12 rounded-full flex items-center justify-center bg-muted ${feature.color}`}",
        "line": 127,
        "context": "<div className={`w-12 h-12 rounded-full flex items-center justify-center bg-muted ${feature.color}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 132,
        "context": "{feature.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.description}",
        "line": 135,
        "context": "{feature.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? 'Dark Mode' : 'Light Mode'}",
        "line": 87,
        "context": "Current Theme: {theme === 'dark' ? 'Dark Mode' : 'Light Mode'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? 'hsl(224 15% 8%)' : 'hsl(0 0% 100%)'}",
        "line": 95,
        "context": "{theme === 'dark' ? 'hsl(224 15% 8%)' : 'hsl(0 0% 100%)'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/DarkModeDemo.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? 'hsl(210 40% 95%)' : 'hsl(220 13% 10%)'}",
        "line": 101,
        "context": "{theme === 'dark' ? 'hsl(210 40% 95%)' : 'hsl(220 13% 10%)'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        'home': 'dashboard',\n        'missions': 'jadwal',\n        'guardian': 'presensi',\n        'rewards': 'jaspel',\n        'profile': 'profil'\n      }",
        "line": 199,
        "context": "const navMapping: { [key: string]: string } = {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{typeof window !== 'undefined' ? window.innerWidth : 0}",
        "line": 214,
        "context": "<div>Width: {typeof window !== 'undefined' ? window.innerWidth : 0}px</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.id}",
        "line": 307,
        "context": "<div key={mission.id} className=\"relative group\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-16 h-16 bg-gradient-to-br ${getDifficultyColor(mission.difficulty)} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}",
        "line": 315,
        "context": "<div className={`w-16 h-16 bg-gradient-to-br ${getDifficultyColor(mission.difficulty)} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.missionName}",
        "line": 319,
        "context": "<h4 className=\"text-xl font-bold text-white mb-1\">{mission.missionName}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.date} • {mission.day}",
        "line": 320,
        "context": "<p className=\"text-purple-200\">{mission.date} • {mission.day}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.time}",
        "line": 331,
        "context": "<span className=\"text-white font-semibold\">{mission.time}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.shift}",
        "line": 333,
        "context": "<div className=\"text-gray-400 text-sm\">{mission.shift} Shift</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.location}",
        "line": 338,
        "context": "<span className=\"text-white font-semibold\">{mission.location}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setCurrentPage(Math.max(1, currentPage - 1))}",
        "line": 355,
        "context": "onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: totalPages }",
        "line": 367,
        "context": "{Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setCurrentPage(Math.min(totalPages, currentPage + 1))}",
        "line": 383,
        "context": "onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 408,
        "context": "key={item.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleNavigation(item.id)}",
        "line": 409,
        "context": "onClick={() => handleNavigation(item.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 421,
        "context": "{item.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 433,
        "context": "{item.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`absolute left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-transparent via-purple-400/60 to-transparent rounded-full shadow-lg shadow-purple-400/30 ${isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}`}",
        "line": 446,
        "context": "<div className={`absolute left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-transparent via-purple-400/60 to-transparent rounded-full shadow-lg shadow-purple-400/30 ${isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}`}></div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{typeof window !== 'undefined' ? window.innerWidth : 0}",
        "line": 214,
        "context": "<div>Width: {typeof window !== 'undefined' ? window.innerWidth : 0}px</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? '✅ true' : '❌ false'}",
        "line": 215,
        "context": "<div>isIpad: {isIpad ? '✅ true' : '❌ false'}</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? (orientation === 'landscape' ? '2-3 cols' : '2 cols') : 'single col'}",
        "line": 217,
        "context": "<div>Grid: {isIpad ? (orientation === 'landscape' ? '2-3 cols' : '2 cols') : 'single col'}</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`mx-auto min-h-screen relative overflow-hidden ${isIpad ? 'w-full' : 'max-w-sm'}`}",
        "line": 219,
        "context": "<div className={`mx-auto min-h-screen relative overflow-hidden ${isIpad ? 'w-full' : 'max-w-sm'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`flex justify-between items-center pt-3 pb-2 text-white text-sm font-semibold relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16' : 'px-6'}`}",
        "line": 235,
        "context": "<div className={`flex justify-between items-center pt-3 pb-2 text-white text-sm font-semibold relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16' : 'px-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`pt-8 pb-6 relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16' : 'px-6'}`}",
        "line": 251,
        "context": "<div className={`pt-8 pb-6 relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16' : 'px-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative ${isIpad ? 'p-6 md:p-8 lg:p-10' : 'p-8'}`}",
        "line": 255,
        "context": "<div className={`relative ${isIpad ? 'p-6 md:p-8 lg:p-10' : 'p-8'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`bg-gradient-to-br from-cyan-400 via-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-4 relative overflow-hidden ${isIpad ? 'w-24 h-24 md:w-28 md:h-28 lg:w-32 lg:h-32' : 'w-20 h-20'}`}",
        "line": 258,
        "context": "<div className={`bg-gradient-to-br from-cyan-400 via-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-4 relative overflow-hidden ${isIpad ? 'w-24 h-24 md:w-28 md:h-28 lg:w-32 lg:h-32' : 'w-20 h-20'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white relative z-10 ${isIpad ? 'w-12 h-12 md:w-14 md:h-14 lg:w-16 lg:h-16' : 'w-10 h-10'}`}",
        "line": 260,
        "context": "<Sword className={`text-white relative z-10 ${isIpad ? 'w-12 h-12 md:w-14 md:h-14 lg:w-16 lg:h-16' : 'w-10 h-10'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-2 ${isIpad ? 'text-4xl md:text-5xl lg:text-6xl' : 'text-3xl'}`}",
        "line": 262,
        "context": "<h1 className={`font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-2 ${isIpad ? 'text-4xl md:text-5xl lg:text-6xl' : 'text-3xl'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-purple-200 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}",
        "line": 265,
        "context": "<p className={`text-purple-200 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}>Medical Duty Assignments</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`grid grid-cols-3 ${isIpad ? 'gap-6 md:gap-8' : 'gap-4'}`}",
        "line": 269,
        "context": "<div className={`grid grid-cols-3 ${isIpad ? 'gap-6 md:gap-8' : 'gap-4'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-cyan-400 mr-2 ${isIpad ? 'w-6 h-6 md:w-7 md:h-7' : 'w-5 h-5'}`}",
        "line": 272,
        "context": "<Target className={`text-cyan-400 mr-2 ${isIpad ? 'w-6 h-6 md:w-7 md:h-7' : 'w-5 h-5'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-white ${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'}`}",
        "line": 273,
        "context": "<span className={`font-bold text-white ${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'}`}>6</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-cyan-300 ${isIpad ? 'text-base md:text-lg' : 'text-sm'}`}",
        "line": 275,
        "context": "<span className={`text-cyan-300 ${isIpad ? 'text-base md:text-lg' : 'text-sm'}`}>Active Missions</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-orange-400 mr-2 ${isIpad ? 'w-6 h-6 md:w-7 md:h-7' : 'w-5 h-5'}`}",
        "line": 279,
        "context": "<Flame className={`text-orange-400 mr-2 ${isIpad ? 'w-6 h-6 md:w-7 md:h-7' : 'w-5 h-5'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-white ${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'}`}",
        "line": 280,
        "context": "<span className={`font-bold text-white ${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'}`}>3,200</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-orange-300 ${isIpad ? 'text-base md:text-lg' : 'text-sm'}`}",
        "line": 282,
        "context": "<span className={`text-orange-300 ${isIpad ? 'text-base md:text-lg' : 'text-sm'}`}>Total XP</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-yellow-400 mr-2 ${isIpad ? 'w-6 h-6 md:w-7 md:h-7' : 'w-5 h-5'}`}",
        "line": 286,
        "context": "<Award className={`text-yellow-400 mr-2 ${isIpad ? 'w-6 h-6 md:w-7 md:h-7' : 'w-5 h-5'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-white ${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'}`}",
        "line": 287,
        "context": "<span className={`font-bold text-white ${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'}`}>Elite</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-yellow-300 ${isIpad ? 'text-base md:text-lg' : 'text-sm'}`}",
        "line": 289,
        "context": "<span className={`text-yellow-300 ${isIpad ? 'text-base md:text-lg' : 'text-sm'}`}>Rank Status</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`pb-40 relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16' : 'px-6'}`}",
        "line": 297,
        "context": "<div className={`pb-40 relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16' : 'px-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold mb-6 text-center bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent ${isIpad ? 'text-2xl md:text-3xl' : 'text-xl'}`}",
        "line": 298,
        "context": "<h3 className={`font-bold mb-6 text-center bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent ${isIpad ? 'text-2xl md:text-3xl' : 'text-xl'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? (orientation === 'landscape' ? 'grid grid-cols-2 xl:grid-cols-3 gap-6' : 'grid grid-cols-2 gap-6') : 'flex flex-col gap-6'}`}",
        "line": 302,
        "context": "<div className={`${isIpad ? (orientation === 'landscape' ? 'grid grid-cols-2 xl:grid-cols-3 gap-6' : 'grid grid-cols-2 gap-6') : 'flex flex-col gap-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-slate-800/90 via-purple-800/80 to-slate-700/90 backdrop-blur-3xl border-t border-purple-400/20 relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16 py-6 md:py-8' : 'px-6 py-4'}`}",
        "line": 399,
        "context": "<div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-slate-800/90 via-purple-800/80 to-slate-700/90 backdrop-blur-3xl border-t border-purple-400/20 relative z-10 ${isIpad ? 'px-8 md:px-12 lg:px-16 py-6 md:py-8' : 'px-6 py-4'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`flex items-center ${isIpad ? 'justify-center space-x-8 md:space-x-12 lg:space-x-16 max-w-4xl mx-auto' : 'justify-between'}`}",
        "line": 400,
        "context": "<div className={`flex items-center ${isIpad ? 'justify-center space-x-8 md:space-x-12 lg:space-x-16 max-w-4xl mx-auto' : 'justify-between'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative bg-gradient-to-r from-cyan-500/40 to-purple-500/40 backdrop-blur-xl border border-cyan-300/30 rounded-2xl shadow-2xl shadow-purple-500/30 scale-115 ${isIpad ? 'p-4 md:p-5' : 'p-3'}`}",
        "line": 416,
        "context": "<div className={`relative bg-gradient-to-r from-cyan-500/40 to-purple-500/40 backdrop-blur-xl border border-cyan-300/30 rounded-2xl shadow-2xl shadow-purple-500/30 scale-115 ${isIpad ? 'p-4 md:p-5' : 'p-3'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white mb-1 ${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}`}",
        "line": 418,
        "context": "<Icon className={`text-white mb-1 ${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white font-medium ${isIpad ? 'text-xs md:text-sm' : 'text-xs'}`}",
        "line": 420,
        "context": "<span className={`text-white font-medium ${isIpad ? 'text-xs md:text-sm' : 'text-xs'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative rounded-2xl transition-all duration-500 group-hover:bg-purple-600/20 group-hover:scale-110 group-hover:shadow-lg ${isIpad ? 'p-4 md:p-5' : 'p-3'}`}",
        "line": 428,
        "context": "<div className={`relative rounded-2xl transition-all duration-500 group-hover:bg-purple-600/20 group-hover:scale-110 group-hover:shadow-lg ${isIpad ? 'p-4 md:p-5' : 'p-3'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`transition-colors duration-500 text-gray-400 group-hover:text-purple-300 mb-1 ${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}`}",
        "line": 430,
        "context": "<Icon className={`transition-colors duration-500 text-gray-400 group-hover:text-purple-300 mb-1 ${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`transition-colors duration-500 text-gray-400 group-hover:text-purple-300 font-medium ${isIpad ? 'text-xs md:text-sm' : 'text-xs'}`}",
        "line": 432,
        "context": "<span className={`transition-colors duration-500 text-gray-400 group-hover:text-purple-300 font-medium ${isIpad ? 'text-xs md:text-sm' : 'text-xs'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`absolute left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-transparent via-purple-400/60 to-transparent rounded-full shadow-lg shadow-purple-400/30 ${isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}`}",
        "line": 446,
        "context": "<div className={`absolute left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-transparent via-purple-400/60 to-transparent rounded-full shadow-lg shadow-purple-400/30 ${isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}`}></div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    // Override console methods to catch object rendering warnings\n    console.error = (...args: any[]) => {\n      this.originalConsoleError(...args);\n      \n      const message = args.join(' ');\n      if (message.includes('Objects are not valid as React child') || \n          message.includes('jadwal') ||\n          message.includes('[object Object]')) {\n        \n        const stackTrace = new Error().stack || '';\n        const componentName = this.extractComponentName(stackTrace);\n        \n        this.logObjectDetection({\n          timestamp: Date.now(),\n          componentName,\n          objectValue: this.findObjectInArgs(args),\n          stackTrace,\n          location: this.extractLocation(stackTrace)\n        }",
        "line": 82,
        "context": "private setupObjectDetection = () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.error?.message}",
        "line": 242,
        "context": "{this.state.error?.message}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.errorInfo?.componentStack}",
        "line": 249,
        "context": "{this.state.errorInfo?.componentStack}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{entry.componentName}",
        "line": 260,
        "context": "<strong>Component:</strong> {entry.componentName} <br/>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{entry.location}",
        "line": 261,
        "context": "<strong>Location:</strong> {entry.location} <br/>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{new Date(entry.timestamp).toLocaleTimeString()}",
        "line": 262,
        "context": "<strong>Time:</strong> {new Date(entry.timestamp).toLocaleTimeString()} <br/>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{JSON.stringify(entry.objectValue, null, 2)}",
        "line": 265,
        "context": "{JSON.stringify(entry.objectValue, null, 2)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.renderStack.join(' → ')}",
        "line": 277,
        "context": "{this.state.renderStack.join(' → ')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "pattern": "objectInJSX",
        "match": "{() => this.setState({ hasError: false, error: null, errorInfo: null })}",
        "line": 283,
        "context": "onClick={() => this.setState({ hasError: false, error: null, errorInfo: null })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 136,
        "context": "window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{location.name}",
        "line": 253,
        "context": "<h3 style=\"margin: 0 0 8px 0; color: #10B981; font-weight: bold;\">${location.name}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{location.address}",
        "line": 254,
        "context": "<p style=\"margin: 4px 0; font-size: 14px;\">${location.address}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{location.radius_meters}",
        "line": 255,
        "context": "<p style=\"margin: 4px 0; font-size: 12px; color: #666;\">Radius: ${location.radius_meters}m</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{checkinLocation.address || 'GPS Location'}",
        "line": 291,
        "context": "<p style=\"margin: 0; font-size: 14px;\">${checkinLocation.address || 'GPS Location'}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}",
        "line": 342,
        "context": "accuracy: `${accuracy.toFixed(1)}m`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{altitude.toFixed(1)}",
        "line": 343,
        "context": "altitude: altitude ? `${altitude.toFixed(1)}m` : 'N/A',",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{(speed * 3.6).toFixed(1)}",
        "line": 344,
        "context": "speed: speed ? `${(speed * 3.6).toFixed(1)} km/h` : 'N/A',",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{error.message}",
        "line": 428,
        "context": "message = `Unknown error: ${error.message}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{location.id}",
        "line": 590,
        "context": "<div key={location.id} className=\"text-xs text-gray-600\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{location.name} ({location.radius_meters}",
        "line": 591,
        "context": "• {location.name} ({location.radius_meters}m)",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(gpsAccuracy)}",
        "line": 631,
        "context": "{Math.round(gpsAccuracy)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "line": 651,
        "context": "<div>📍 Current: {currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 16,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; address?: string }",
        "line": 23,
        "context": "checkinLocation?: { lat: number; lng: number; address?: string } | null;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{gpsAccuracy <= 10 ? 'GOOD' : gpsAccuracy <= 50 ? 'MEDIUM' : 'POOR'}",
        "line": 638,
        "context": "{gpsAccuracy <= 10 ? 'GOOD' : gpsAccuracy <= 50 ? 'MEDIUM' : 'POOR'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    try {\n      const token = TokenManager.getToken();\n      const today = new Date().toISOString().split('T')[0];\n      \n      // Updated to use the correct V2 API endpoint for dokter dashboard\n      const response = await fetch(`/api/v2/dashboards/dokter/jadwal-jaga?date=${today}",
        "line": 258,
        "context": "const fetchTodayJadwalJaga = async () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        const result = await response.json();\n        if (result.success && result.data) {\n          // Handle both single jadwal and array of jadwal\n          const jadwalData = Array.isArray(result.data) ? result.data[0] : result.data;\n          if (jadwalData && typeof jadwalData === 'object') {\n            // Ensure we're setting a proper object, not rendering it directly\n            setTodayJadwalJaga({\n              id: jadwalData.id,\n              tanggal_jaga: jadwalData.tanggal_jaga,\n              shift_template_id: jadwalData.shift_template_id,\n              pegawai_id: jadwalData.pegawai_id,\n              unit_instalasi: jadwalData.unit_instalasi,\n              unit_kerja: jadwalData.unit_kerja,\n              peran: jadwalData.peran,\n              status_jaga: jadwalData.status_jaga,\n              keterangan: jadwalData.keterangan,\n              created_at: jadwalData.created_at,\n              updated_at: jadwalData.updated_at,\n              jam_jaga_custom: jadwalData.jam_jaga_custom,\n              shift_template: jadwalData.shift_template,\n              work_location: jadwalData.work_location\n            }",
        "line": 272,
        "context": "if (response.ok) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        console.error('Failed to fetch jadwal jaga - Response:', response.status, response.statusText);\n      }",
        "line": 297,
        "context": "} else {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      console.error('Failed to fetch jadwal jaga:', error);\n    }",
        "line": 300,
        "context": "} catch (error) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{e.message}",
        "line": 169,
        "context": "alert(`GPS Error: ${e.message}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{[position.lat, position.lng]}",
        "line": 174,
        "context": "<Marker position={[position.lat, position.lng]}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.lat.toFixed(6)}",
        "line": 179,
        "context": "Lat: {position.lat.toFixed(6)}<br/>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.lng.toFixed(6)}",
        "line": 180,
        "context": "Lng: {position.lng.toFixed(6)}<br/>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.accuracy.toFixed(0)}",
        "line": 181,
        "context": "Accuracy: ±{position.accuracy.toFixed(0)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}: ${response.statusText}",
        "line": 240,
        "context": "throw new Error(`HTTP ${response.status}: ${response.statusText}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{API_BASE}/history?${params.toString()}",
        "line": 380,
        "context": "const response = await fetch(`${API_BASE}/history?${params.toString()}`, {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}: ${response.statusText}",
        "line": 388,
        "context": "throw new Error(`HTTP ${response.status}: ${response.statusText}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{violationInfo.violation_type}",
        "line": 502,
        "context": "`Schedule Violation: ${violationInfo.violation_type}. ` +",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{violationInfo.current_time}",
        "line": 503,
        "context": "`Current time: ${violationInfo.current_time}, ` +",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{violationInfo.suggested_time}",
        "line": 504,
        "context": "`Suggested time: ${violationInfo.suggested_time}`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{violationInfo.violation_type}",
        "line": 557,
        "context": "`Schedule Violation: ${violationInfo.violation_type}. ` +",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{violationInfo.current_time}",
        "line": 558,
        "context": "`Current time: ${violationInfo.current_time}, ` +",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{violationInfo.suggested_time}",
        "line": 559,
        "context": "`Suggested time: ${violationInfo.suggested_time}`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{ status: 'too_early', message: `Too early (${Math.abs(diffMinutes + earlyTolerance)} min)`, color: 'text-blue-600' }",
        "line": 599,
        "context": "return { status: 'too_early', message: `Too early (${Math.abs(diffMinutes + earlyTolerance)} min)`, color: 'text-blue-600' };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{currentTime.toLocaleTimeString('id-ID', { hour12: false })}",
        "line": 640,
        "context": "{currentTime.toLocaleTimeString('id-ID', { hour12: false })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.status_jaga}",
        "line": 698,
        "context": "{todayJadwalJaga.status_jaga}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.shift_template?.nama_shift || 'N/A'}",
        "line": 705,
        "context": "<span className=\"font-semibold\">{todayJadwalJaga.shift_template?.nama_shift || 'N/A'}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.shift_template.jam_masuk} - ${todayJadwalJaga.shift_template.jam_pulang}",
        "line": 712,
        "context": "? `${todayJadwalJaga.shift_template.jam_masuk} - ${todayJadwalJaga.shift_template.jam_pulang}`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.unit_kerja}",
        "line": 720,
        "context": "<span>{todayJadwalJaga.unit_kerja}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.peran}",
        "line": 725,
        "context": "<span>{todayJadwalJaga.peran}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{workLocation.name}",
        "line": 731,
        "context": "<span>{workLocation.name}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{`font-semibold ${toleranceStatus.color}`}>{toleranceStatus.message}",
        "line": 738,
        "context": "<span className={`font-semibold ${toleranceStatus.color}`}>{toleranceStatus.message}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.work_location.late_tolerance_minutes || 15}",
        "line": 746,
        "context": "<div>Late Tolerance: {todayJadwalJaga.work_location.late_tolerance_minutes || 15} minutes</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.work_location.early_departure_tolerance_minutes || 15}",
        "line": 747,
        "context": "<div>Early Departure: {todayJadwalJaga.work_location.early_departure_tolerance_minutes || 15} minutes</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{todayJadwalJaga.work_location.radius_meters}",
        "line": 748,
        "context": "<div>Location Radius: {todayJadwalJaga.work_location.radius_meters}m</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_in}",
        "line": 832,
        "context": "const checkInTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_in}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}",
        "line": 834,
        "context": "const currentTime = new Date(`2025-01-01T${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:00`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_out}",
        "line": 837,
        "context": "const checkOutTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_out}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_in}",
        "line": 858,
        "context": "const checkInTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_in}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}",
        "line": 860,
        "context": "const currentTime = new Date(`2025-01-01T${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:00`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_out}",
        "line": 863,
        "context": "const checkOutTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_out}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_in}",
        "line": 885,
        "context": "const checkInTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_in}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}",
        "line": 887,
        "context": "const currentTime = new Date(`2025-01-01T${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:00`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_out}",
        "line": 890,
        "context": "const checkOutTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_out}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_in}",
        "line": 911,
        "context": "const checkInTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_in}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}",
        "line": 913,
        "context": "const currentTime = new Date(`2025-01-01T${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:00`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_out}",
        "line": 916,
        "context": "const checkOutTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_out}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_in}",
        "line": 942,
        "context": "const checkInTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_in}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}",
        "line": 944,
        "context": "const currentTime = new Date(`2025-01-01T${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:00`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_out}",
        "line": 947,
        "context": "const checkOutTime = new Date(`2025-01-01T${attendanceStatus.active_attendance.time_out}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.status.replace('_', ' ').toUpperCase()}",
        "line": 1002,
        "context": "{attendanceStatus.status.replace('_', ' ').toUpperCase()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_in}",
        "line": 1013,
        "context": "<span className=\"font-mono\">{attendanceStatus.active_attendance.time_in}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.time_out}",
        "line": 1019,
        "context": "<span className=\"font-mono\">{attendanceStatus.active_attendance.time_out}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.active_attendance.location.name_in || 'Unknown'}",
        "line": 1024,
        "context": "<span>{attendanceStatus.active_attendance.location.name_in || 'Unknown'}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.completed_shifts} / {attendanceStatus.total_shifts}",
        "line": 1032,
        "context": "<span className=\"font-semibold\">{attendanceStatus.completed_shifts} / {attendanceStatus.total_shifts}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: 6 }",
        "line": 1114,
        "context": "{Array.from({ length: 6 }, (_, i) => {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 1164,
        "context": "key={record.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.day_name}",
        "line": 1180,
        "context": "{record.day_name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status.toUpperCase()}",
        "line": 1189,
        "context": "{record.status.toUpperCase()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.time_in || '--:--'}",
        "line": 1203,
        "context": "{record.time_in || '--:--'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.time_out || '--:--'}",
        "line": 1212,
        "context": "{record.time_out || '--:--'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.work_duration.formatted}",
        "line": 1225,
        "context": "{record.work_duration.formatted}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.shortage_info.percentage_achieved}",
        "line": 1243,
        "context": "? `Lengkap (${record.shortage_info.percentage_achieved}%)`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.shortage_info.shortage_formatted}`}",
        "line": 1244,
        "context": ": `Kurang ${record.shortage_info.shortage_formatted}`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.location.name_in}",
        "line": 1255,
        "context": "{record.location.name_in}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.location.name_out}",
        "line": 1257,
        "context": "<span> → {record.location.name_out}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.accuracy.toFixed(0)}",
        "line": 1327,
        "context": "±{position.accuracy.toFixed(0)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position ? [position.lat, position.lng] : [-6.2088, 106.8456]}",
        "line": 1335,
        "context": "center={position ? [position.lat, position.lng] : [-6.2088, 106.8456]}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 1342,
        "context": "url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.lat.toFixed(6)}, ${position.lng.toFixed(6)}",
        "line": 1354,
        "context": "? `Location detected: ${position.lat.toFixed(6)}, ${position.lng.toFixed(6)}`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}",
        "line": 614,
        "context": "<div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 mb-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 618,
        "context": "<div className={`rounded-xl shadow-lg p-6 mb-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`p-3 rounded-lg ${isDarkMode ? 'bg-blue-900' : 'bg-blue-100'}`}",
        "line": 621,
        "context": "<div className={`p-3 rounded-lg ${isDarkMode ? 'bg-blue-900' : 'bg-blue-100'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}",
        "line": 626,
        "context": "<p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 642,
        "context": "<div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}",
        "line": 658,
        "context": "{isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 689,
        "context": "<div className={`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 704,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Shift:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 709,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Working Hours:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 719,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Unit Kerja:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 724,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Role:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 730,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Location:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 737,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Timing Status:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`mt-4 p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}",
        "line": 743,
        "context": "<div className={`mt-4 p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'} space-y-1`}",
        "line": 745,
        "context": "<div className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'} space-y-1`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 757,
        "context": "<div className={`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 778,
        "context": "<div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}",
        "line": 783,
        "context": "<div className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 804,
        "context": "<p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>No schedule for today</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 811,
        "context": "<div className={`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 874,
        "context": "<div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}",
        "line": 903,
        "context": "<div className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 964,
        "context": "<p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Check-in first to see progress</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 971,
        "context": "<div className={`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`}",
        "line": 984,
        "context": "<RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 996,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Current Status:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}",
        "line": 1007,
        "context": "<div className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 1031,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Completed Shifts:</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 1037,
        "context": "<p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Unable to load attendance status</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 1094,
        "context": "<div className={`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{showHistory ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}",
        "line": 1144,
        "context": "{showHistory ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}",
        "line": 1179,
        "context": "<div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 1199,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 1208,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 1221,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}",
        "line": 1232,
        "context": "<span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`mt-2 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}",
        "line": 1253,
        "context": "<div className={`mt-2 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 1270,
        "context": "<p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}",
        "line": 1279,
        "context": "<span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}",
        "line": 1319,
        "context": "<div className={`rounded-xl shadow-lg p-6 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 1326,
        "context": "<span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{position ? [position.lat, position.lng] : [-6.2088, 106.8456]}",
        "line": 1335,
        "context": "center={position ? [position.lat, position.lng] : [-6.2088, 106.8456]}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{position ? 16 : 10}",
        "line": 1336,
        "context": "zoom={position ? 16 : 10}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}",
        "line": 1352,
        "context": "<p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/GPSCoordinatesOnly.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}",
        "line": 117,
        "context": "<p className=\"text-white text-xl font-mono font-bold\">{currentLocation.lat.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSCoordinatesOnly.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(6)}",
        "line": 121,
        "context": "<p className=\"text-white text-xl font-mono font-bold\">{currentLocation.lng.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSCoordinatesOnly.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}",
        "line": 130,
        "context": "{accuracy.toFixed(1)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSCoordinatesOnly.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/GPSCoordinatesOnly.tsx",
        "pattern": "conditionalObjects",
        "match": "{gpsStatus === 'success' ? 'Update GPS Location' : 'Detect GPS Location'}",
        "line": 173,
        "context": "{gpsStatus === 'success' ? 'Update GPS Location' : 'Detect GPS Location'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/GPSOnlyMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.898878, lng: 111.961884 }",
        "line": 25,
        "context": "const [currentLocation, setCurrentLocation] = useState({ lat: -7.898878, lng: 111.961884 });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSOnlyMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 101,
        "context": "window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSOnlyMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}",
        "line": 288,
        "context": "<div>📍 {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSOnlyMap.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}",
        "line": 291,
        "context": "Accuracy: {accuracy.toFixed(1)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSOnlyMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/GPSOnlyMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{accuracy <= 10 ? 'text-green-400' : accuracy <= 50 ? 'text-yellow-400' : 'text-red-400'}",
        "line": 290,
        "context": "<div className={accuracy <= 10 ? 'text-green-400' : accuracy <= 50 ? 'text-yellow-400' : 'text-red-400'}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lng - 0.01}%2C${lat - 0.01}%2C${lng + 0.01}%2C${lat + 0.01}",
        "line": 103,
        "context": "const bbox = `${lng - 0.01}%2C${lat - 0.01}%2C${lng + 0.01}%2C${lat + 0.01}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}",
        "line": 160,
        "context": "<div>📍 {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}m ({getAccuracyLabel(accuracy)}",
        "line": 163,
        "context": "Accuracy: {accuracy.toFixed(1)}m ({getAccuracyLabel(accuracy)})",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}",
        "line": 206,
        "context": "<p className=\"text-white text-sm font-mono\">{currentLocation.lat.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(6)}",
        "line": 210,
        "context": "<p className=\"text-white text-sm font-mono\">{currentLocation.lng.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}",
        "line": 219,
        "context": "{accuracy.toFixed(1)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/GPSStaticMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{ icon: Calendar, label: 'Missions', color: 'from-blue-500 to-cyan-500', tab: 'jadwal' }",
        "line": 83,
        "context": "{ icon: Calendar, label: 'Missions', color: 'from-blue-500 to-cyan-500', tab: 'jadwal' },",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "directObjectRender",
        "match": "{() => onNavigate?.('jadwal')}",
        "line": 296,
        "context": "onClick={() => onNavigate?.('jadwal')}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`${metric.bg} rounded-2xl p-3 mb-3 ${isIpad ? 'w-16 h-16' : 'w-12 h-12'} flex items-center justify-center mx-auto`}",
        "line": 184,
        "context": "<div className={`${metric.bg} rounded-2xl p-3 mb-3 ${isIpad ? 'w-16 h-16' : 'w-12 h-12'} flex items-center justify-center mx-auto`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} ${metric.color}`}",
        "line": 185,
        "context": "<metric.icon className={`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} ${metric.color}`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{metric.value}",
        "line": 188,
        "context": "<div className={`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{metric.value}%</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} text-gray-400`}>{metric.label}",
        "line": 189,
        "context": "<div className={`${isIpad ? 'text-sm' : 'text-xs'} text-gray-400`}>{metric.label}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.id}",
        "line": 212,
        "context": "<div key={achievement.id} className=\"flex items-center space-x-3 p-3 bg-slate-800/30 rounded-2xl\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-10 h-10 bg-gradient-to-br ${achievement.color} rounded-xl flex items-center justify-center`}",
        "line": 213,
        "context": "<div className={`w-10 h-10 bg-gradient-to-br ${achievement.color} rounded-xl flex items-center justify-center`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.name}",
        "line": 217,
        "context": "<div className=\"text-white font-medium text-sm\">{achievement.name}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`h-full bg-gradient-to-r ${achievement.color} rounded-full`}",
        "line": 220,
        "context": "className={`h-full bg-gradient-to-r ${achievement.color} rounded-full`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${achievement.progress}%` }}",
        "line": 221,
        "context": "style={{ width: `${achievement.progress}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.progress}",
        "line": 225,
        "context": "<span className=\"text-xs text-gray-400\">{achievement.progress}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{doctor.rank}",
        "line": 239,
        "context": "<div key={doctor.rank} className={`flex items-center space-x-3 p-3 rounded-2xl ${",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{doctor.rank}",
        "line": 250,
        "context": "<span className=\"text-sm font-bold\">#{doctor.rank}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{doctor.avatar}",
        "line": 252,
        "context": "<span className=\"text-lg\">{doctor.avatar}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{doctor.name}",
        "line": 254,
        "context": "<div className=\"text-white font-medium text-sm\">{doctor.name}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{doctor.level} • {doctor.xp}",
        "line": 255,
        "context": "<div className=\"text-xs text-gray-400\">Level {doctor.level} • {doctor.xp} XP</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onNavigate?.(action.tab)}",
        "line": 279,
        "context": "onClick={() => onNavigate?.(action.tab)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`relative p-4 bg-gradient-to-br ${action.color} rounded-2xl hover:scale-105 transition-all duration-300 group overflow-hidden`}",
        "line": 280,
        "context": "className={`relative p-4 bg-gradient-to-br ${action.color} rounded-2xl hover:scale-105 transition-all duration-300 group overflow-hidden`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{action.label}",
        "line": 285,
        "context": "<span className={`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{action.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{ rank: 2, name: userData?.name || 'Dr. Ahmad', xp: currentXP, level: doctorLevel, avatar: '👨‍⚕️' }",
        "line": 67,
        "context": "{ rank: 2, name: userData?.name || 'Dr. Ahmad', xp: currentXP, level: doctorLevel, avatar: '👨‍⚕️' },",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative ${isIpad ? 'p-6 md:p-8 lg:p-10' : 'p-4 sm:p-6'}`}",
        "line": 122,
        "context": "<div className={`relative ${isIpad ? 'p-6 md:p-8 lg:p-10' : 'p-4 sm:p-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-24 h-24 md:w-28 md:h-28 lg:w-32 lg:h-32' : 'w-20 h-20'} bg-gradient-to-br from-cyan-400 via-purple-500 to-pink-500 rounded-3xl flex items-center justify-center relative overflow-hidden`}",
        "line": 126,
        "context": "<div className={`${isIpad ? 'w-24 h-24 md:w-28 md:h-28 lg:w-32 lg:h-32' : 'w-20 h-20'} bg-gradient-to-br from-cyan-400 via-purple-500 to-pink-500 rounded-3xl flex items-center justify-center relative overflow-hidden`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-12 h-12 md:w-14 md:h-14 lg:w-16 lg:h-16' : 'w-10 h-10'} text-white relative z-10`}",
        "line": 128,
        "context": "<Crown className={`${isIpad ? 'w-12 h-12 md:w-14 md:h-14 lg:w-16 lg:h-16' : 'w-10 h-10'} text-white relative z-10`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-2xl md:text-3xl lg:text-4xl' : 'text-xl sm:text-2xl'} font-bold text-white mb-2`}",
        "line": 131,
        "context": "<h1 className={`${isIpad ? 'text-2xl md:text-3xl lg:text-4xl' : 'text-xl sm:text-2xl'} font-bold text-white mb-2`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-lg md:text-xl' : 'text-base'} text-purple-200`}>Level {doctorLevel}",
        "line": 135,
        "context": "<span className={`${isIpad ? 'text-lg md:text-xl' : 'text-base'} text-purple-200`}>Level {doctorLevel}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-xl md:text-2xl' : 'text-lg'} font-bold mb-6 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent`}",
        "line": 176,
        "context": "<h2 className={`${isIpad ? 'text-xl md:text-2xl' : 'text-lg'} font-bold mb-6 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`grid gap-4 ${isIpad ? 'grid-cols-4' : 'grid-cols-2'}`}",
        "line": 180,
        "context": "<div className={`grid gap-4 ${isIpad ? 'grid-cols-4' : 'grid-cols-2'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${metric.bg} rounded-2xl p-3 mb-3 ${isIpad ? 'w-16 h-16' : 'w-12 h-12'} flex items-center justify-center mx-auto`}",
        "line": 184,
        "context": "<div className={`${metric.bg} rounded-2xl p-3 mb-3 ${isIpad ? 'w-16 h-16' : 'w-12 h-12'} flex items-center justify-center mx-auto`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} ${metric.color}`}",
        "line": 185,
        "context": "<metric.icon className={`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} ${metric.color}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{metric.value}",
        "line": 188,
        "context": "<div className={`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{metric.value}%</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} text-gray-400`}>{metric.label}",
        "line": 189,
        "context": "<div className={`${isIpad ? 'text-sm' : 'text-xs'} text-gray-400`}>{metric.label}</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white`}",
        "line": 201,
        "context": "<h3 className={`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white`}>Recent Achievements</h3>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white`}",
        "line": 233,
        "context": "<h3 className={`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white`}>Medical Leaderboard</h3>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white mb-4`}",
        "line": 273,
        "context": "<h3 className={`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white mb-4`}>Quick Actions</h3>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`grid gap-4 ${isIpad ? 'grid-cols-4' : 'grid-cols-2'}`}",
        "line": 275,
        "context": "<div className={`grid gap-4 ${isIpad ? 'grid-cols-4' : 'grid-cols-2'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-white mx-auto mb-2`}",
        "line": 284,
        "context": "<action.icon className={`${isIpad ? 'w-8 h-8' : 'w-6 h-6'} text-white mx-auto mb-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{action.label}",
        "line": 285,
        "context": "<span className={`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{action.label}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white`}",
        "line": 294,
        "context": "<h3 className={`${isIpad ? 'text-lg md:text-xl' : 'text-base'} font-bold text-white`}>Today's Mission</h3>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [jadwalList, setJadwalList] = useState<JadwalJagaItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchJadwal();\n  }",
        "line": 34,
        "context": "export const JadwalJaga: React.FC<JadwalJagaProps> = ({ className = '' }) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    try {\n      setLoading(true);\n      const response = await fetch('/dokter/web-api/jadwal-jaga', {\n        headers: {\n          'Accept': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n        }",
        "line": 43,
        "context": "const fetchJadwal = async () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      console.error('Error fetching jadwal:', err);\n      setError('Gagal memuat jadwal jaga');\n      setJadwalList([]);\n    }",
        "line": 71,
        "context": "} catch (err) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    const statusConfig = {\n      scheduled: { color: 'bg-blue-100 text-blue-700', icon: Calendar, label: 'Terjadwal' }",
        "line": 89,
        "context": "const getStatusBadge = (status: string) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    if (jadwal.jam_jaga_custom) {\n      return jadwal.jam_jaga_custom;\n    }",
        "line": 110,
        "context": "const getShiftTime = (jadwal: JadwalJagaItem) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      return `${jadwal.shift_template.jam_masuk}",
        "line": 115,
        "context": "if (jadwal.shift_template) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.shift_template.jam_pulang}",
        "line": 116,
        "context": "return `${jadwal.shift_template.jam_masuk} - ${jadwal.shift_template.jam_pulang}`;",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    return jadwal.shift_template?.nama_shift || 'Shift Khusus';\n  }",
        "line": 122,
        "context": "const getShiftName = (jadwal: JadwalJagaItem) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwalList.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Calendar className=\"h-16 w-16 mx-auto mb-4 text-gray-300\" />\n            <p className=\"text-gray-500 text-lg\">Tidak ada jadwal jaga</p>\n            <p className=\"text-gray-400 text-sm mt-2\">Jadwal jaga Anda akan muncul di sini</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {jadwalList.map((jadwal) => (\n              <div\n                key={jadwal.id}",
        "line": 155,
        "context": "{jadwalList.length === 0 ? (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{formatDate(jadwal.tanggal_jaga)}",
        "line": 175,
        "context": "{formatDate(jadwal.tanggal_jaga)}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{getShiftName(jadwal)}",
        "line": 178,
        "context": "{getShiftName(jadwal)}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{getShiftTime(jadwal)}",
        "line": 187,
        "context": "{getShiftTime(jadwal)}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.unit_kerja}",
        "line": 195,
        "context": "<span className=\"text-gray-700\">{jadwal.unit_kerja}</span>",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.unit_instalasi && (\n                          <span className=\"text-gray-500 text-sm ml-2\">\n                            ({jadwal.unit_instalasi}",
        "line": 196,
        "context": "{jadwal.unit_instalasi && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.peran}",
        "line": 207,
        "context": "<span className=\"text-gray-700\">{jadwal.peran}</span>",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.keterangan && (\n                      <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n                        <p className=\"text-sm text-gray-600\">\n                          <span className=\"font-medium\">Catatan:</span> {jadwal.keterangan}",
        "line": 211,
        "context": "{jadwal.keterangan && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{getStatusBadge(jadwal.status_jaga)}",
        "line": 222,
        "context": "{getStatusBadge(jadwal.status_jaga)}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}",
        "line": 55,
        "context": "throw new Error(`Failed to fetch: ${response.status}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.color}`}",
        "line": 103,
        "context": "<span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.color}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{config.label}",
        "line": 105,
        "context": "{config.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.shift_template.jam_masuk} - ${jadwal.shift_template.jam_pulang}",
        "line": 116,
        "context": "return `${jadwal.shift_template.jam_masuk} - ${jadwal.shift_template.jam_pulang}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.id}",
        "line": 165,
        "context": "key={jadwal.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(jadwal.tanggal_jaga)}",
        "line": 175,
        "context": "{formatDate(jadwal.tanggal_jaga)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.unit_kerja}",
        "line": 195,
        "context": "<span className=\"text-gray-700\">{jadwal.unit_kerja}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.unit_instalasi}",
        "line": 198,
        "context": "({jadwal.unit_instalasi})",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.peran}",
        "line": 207,
        "context": "<span className=\"text-gray-700\">{jadwal.peran}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.keterangan}",
        "line": 214,
        "context": "<span className=\"font-medium\">Catatan:</span> {jadwal.keterangan}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusBadge(jadwal.status_jaga)}",
        "line": 222,
        "context": "{getStatusBadge(jadwal.status_jaga)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [selectedMonth, setSelectedMonth] = useState(new Date());\n  const [jadwalData, setJadwalData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState('missions');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isIpad, setIsIpad] = useState(false);\n  const [orientation, setOrientation] = useState<'portrait' | 'landscape'>('portrait');\n\n  const checkDevice = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setIsIpad(width >= 768);\n    setOrientation(width > height ? 'landscape' : 'portrait');\n  }",
        "line": 5,
        "context": "export function JadwalJagaTraditional() {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v2/dashboards/dokter/jadwal-jaga', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        }",
        "line": 44,
        "context": "const fetchJadwalData = async () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n            console.error('Invalid jadwal data format:', data.data);\n            setJadwalData([]);\n          }",
        "line": 60,
        "context": "} else {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      console.error('Error fetching jadwal data:', error);\n    }",
        "line": 66,
        "context": "} catch (error) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      try {\n        // Safe date parsing\n        const jadwalDate = jadwal.tanggal ? new Date(jadwal.tanggal) : new Date();\n        const dateStr = isNaN(jadwalDate.getTime()) ? \n          new Date().toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' }",
        "line": 80,
        "context": "return scheduleData.map((jadwal) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n          id: jadwal.id || Date.now() + Math.random(),\n          missionName: `Shift ${jadwal.shift || 'Pagi'}",
        "line": 88,
        "context": "return {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.jam_masuk}",
        "line": 95,
        "context": "`${jadwal.jam_masuk} - ${jadwal.jam_keluar}` :",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.jam_keluar}",
        "line": 95,
        "context": "`${jadwal.jam_masuk} - ${jadwal.jam_keluar}` :",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.unit_kerja}",
        "line": 98,
        "context": "`${jadwal.unit_kerja} - ${jadwal.ruangan}` :",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwal.ruangan}",
        "line": 98,
        "context": "`${jadwal.unit_kerja} - ${jadwal.ruangan}` :",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        console.error('Error transforming jadwal:', error, jadwal);\n        // Return a safe default object\n        return {\n          id: Date.now() + Math.random(),\n          missionName: 'Shift Pagi',\n          date: new Date().toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' }",
        "line": 109,
        "context": "} catch (error) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.shift || 'Pagi'}",
        "line": 90,
        "context": "missionName: `Shift ${jadwal.shift || 'Pagi'}`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.jam_masuk} - ${jadwal.jam_keluar}",
        "line": 95,
        "context": "`${jadwal.jam_masuk} - ${jadwal.jam_keluar}` :",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{jadwal.unit_kerja} - ${jadwal.ruangan}",
        "line": 98,
        "context": "`${jadwal.unit_kerja} - ${jadwal.ruangan}` :",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "line": 280,
        "context": "<span>{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{missionData.length}",
        "line": 317,
        "context": "<span className={`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{missionData.length}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{totalActiveXp.toLocaleString()}",
        "line": 324,
        "context": "<span className={`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{totalActiveXp.toLocaleString()}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.id}",
        "line": 357,
        "context": "<div key={mission.id} className=\"relative group\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'w-20 h-20' : 'w-16 h-16'} bg-gradient-to-br ${getDifficultyColor(mission.difficulty)} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}",
        "line": 365,
        "context": "<div className={`${isIpad ? 'w-20 h-20' : 'w-16 h-16'} bg-gradient-to-br ${getDifficultyColor(mission.difficulty)} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{mission.missionName}",
        "line": 369,
        "context": "<h4 className={`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{mission.missionName}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-purple-200 ${isIpad ? 'text-base' : ''}`}>{mission.date} • {mission.day}",
        "line": 370,
        "context": "<p className={`text-purple-200 ${isIpad ? 'text-base' : ''}`}>{mission.date} • {mission.day}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`px-2 py-1 text-xs font-semibold rounded-lg bg-gradient-to-r ${getDifficultyColor(mission.difficulty)} text-white`}",
        "line": 372,
        "context": "<span className={`px-2 py-1 text-xs font-semibold rounded-lg bg-gradient-to-r ${getDifficultyColor(mission.difficulty)} text-white`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.difficulty}",
        "line": 373,
        "context": "{mission.difficulty}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.xpReward}",
        "line": 375,
        "context": "<span className=\"text-yellow-400 text-sm font-bold\">+{mission.xpReward} XP</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.time}",
        "line": 387,
        "context": "<span className={`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.time}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.shift}",
        "line": 389,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.shift} Shift</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.location}",
        "line": 394,
        "context": "<span className={`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.location}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.supervisor}",
        "line": 402,
        "context": "<span className={`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.supervisor}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-amber-200 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.notes}",
        "line": 411,
        "context": "<span className={`text-amber-200 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.notes}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setCurrentPage(Math.max(1, currentPage - 1))}",
        "line": 430,
        "context": "onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: totalPages }",
        "line": 442,
        "context": "{Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setCurrentPage(Math.min(totalPages, currentPage + 1))}",
        "line": 458,
        "context": "onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 484,
        "context": "key={item.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(item.id)}",
        "line": 485,
        "context": "onClick={() => setActiveTab(item.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{item.label}",
        "line": 495,
        "context": "<span className={`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{item.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "objectInJSX",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} transition-colors duration-500 text-gray-400 group-hover:text-purple-300 font-medium`}>{item.label}",
        "line": 503,
        "context": "<span className={`${isIpad ? 'text-sm' : 'text-xs'} transition-colors duration-500 text-gray-400 group-hover:text-purple-300 font-medium`}>{item.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'max-w-none' : 'max-w-sm'} mx-auto min-h-screen relative overflow-hidden`}",
        "line": 263,
        "context": "<div className={`${isIpad ? 'max-w-none' : 'max-w-sm'} mx-auto min-h-screen relative overflow-hidden`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`px-6 pt-8 pb-6 relative z-10 ${isIpad ? 'px-8 md:px-12' : ''}`}",
        "line": 295,
        "context": "<div className={`px-6 pt-8 pb-6 relative z-10 ${isIpad ? 'px-8 md:px-12' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative ${isIpad ? 'p-8 md:p-10' : 'p-8'}`}",
        "line": 299,
        "context": "<div className={`relative ${isIpad ? 'p-8 md:p-10' : 'p-8'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-24 h-24 md:w-28 md:h-28' : 'w-20 h-20'} bg-gradient-to-br from-cyan-400 via-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-4 relative overflow-hidden`}",
        "line": 302,
        "context": "<div className={`${isIpad ? 'w-24 h-24 md:w-28 md:h-28' : 'w-20 h-20'} bg-gradient-to-br from-cyan-400 via-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-4 relative overflow-hidden`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-12 h-12 md:w-14 md:h-14' : 'w-10 h-10'} text-white relative z-10`}",
        "line": 304,
        "context": "<Sword className={`${isIpad ? 'w-12 h-12 md:w-14 md:h-14' : 'w-10 h-10'} text-white relative z-10`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-4xl md:text-5xl' : 'text-3xl'} font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-2`}",
        "line": 306,
        "context": "<h1 className={`${isIpad ? 'text-4xl md:text-5xl' : 'text-3xl'} font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-2`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-purple-200 ${isIpad ? 'text-lg' : ''}`}",
        "line": 309,
        "context": "<p className={`text-purple-200 ${isIpad ? 'text-lg' : ''}`}>Medical Duty Assignments</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`grid grid-cols-3 gap-4 ${isIpad ? 'gap-6 md:gap-8' : ''}`}",
        "line": 313,
        "context": "<div className={`grid grid-cols-3 gap-4 ${isIpad ? 'gap-6 md:gap-8' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-cyan-400 mr-2`}",
        "line": 316,
        "context": "<Target className={`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-cyan-400 mr-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{missionData.length}",
        "line": 317,
        "context": "<span className={`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{missionData.length}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-cyan-300 ${isIpad ? 'text-base' : 'text-sm'}`}",
        "line": 319,
        "context": "<span className={`text-cyan-300 ${isIpad ? 'text-base' : 'text-sm'}`}>Active Missions</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-orange-400 mr-2`}",
        "line": 323,
        "context": "<Flame className={`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-orange-400 mr-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{totalActiveXp.toLocaleString()}",
        "line": 324,
        "context": "<span className={`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>{totalActiveXp.toLocaleString()}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-orange-300 ${isIpad ? 'text-base' : 'text-sm'}`}",
        "line": 326,
        "context": "<span className={`text-orange-300 ${isIpad ? 'text-base' : 'text-sm'}`}>Total XP</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-yellow-400 mr-2`}",
        "line": 330,
        "context": "<Award className={`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-yellow-400 mr-2`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}",
        "line": 331,
        "context": "<span className={`${isIpad ? 'text-3xl md:text-4xl' : 'text-2xl'} font-bold text-white`}>Elite</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-yellow-300 ${isIpad ? 'text-base' : 'text-sm'}`}",
        "line": 333,
        "context": "<span className={`text-yellow-300 ${isIpad ? 'text-base' : 'text-sm'}`}>Rank Status</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`px-6 pb-40 relative z-10 ${isIpad ? 'px-8 md:px-12' : ''}`}",
        "line": 341,
        "context": "<div className={`px-6 pb-40 relative z-10 ${isIpad ? 'px-8 md:px-12' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-2xl md:text-3xl' : 'text-xl'} font-bold mb-6 text-center bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent`}",
        "line": 342,
        "context": "<h3 className={`${isIpad ? 'text-2xl md:text-3xl' : 'text-xl'} font-bold mb-6 text-center bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? (orientation === 'landscape' ? 'grid grid-cols-2 xl:grid-cols-3 gap-6' : 'grid grid-cols-2 gap-6') : 'flex flex-col gap-6'}`}",
        "line": 352,
        "context": "<div className={`${isIpad ? (orientation === 'landscape' ? 'grid grid-cols-2 xl:grid-cols-3 gap-6' : 'grid grid-cols-2 gap-6') : 'flex flex-col gap-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`relative ${isIpad ? 'p-8' : 'p-6'}`}",
        "line": 360,
        "context": "<div className={`relative ${isIpad ? 'p-8' : 'p-6'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-20 h-20' : 'w-16 h-16'} bg-gradient-to-br ${getDifficultyColor(mission.difficulty)} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}",
        "line": 365,
        "context": "<div className={`${isIpad ? 'w-20 h-20' : 'w-16 h-16'} bg-gradient-to-br ${getDifficultyColor(mission.difficulty)} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-10 h-10' : 'w-8 h-8'} text-white`}",
        "line": 366,
        "context": "<MissionIcon className={`${isIpad ? 'w-10 h-10' : 'w-8 h-8'} text-white`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{mission.missionName}",
        "line": 369,
        "context": "<h4 className={`${isIpad ? 'text-2xl' : 'text-xl'} font-bold text-white mb-1`}>{mission.missionName}</h4>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-purple-200 ${isIpad ? 'text-base' : ''}`}>{mission.date} • {mission.day}",
        "line": 370,
        "context": "<p className={`text-purple-200 ${isIpad ? 'text-base' : ''}`}>{mission.date} • {mission.day}</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`bg-slate-700/50 rounded-2xl ${isIpad ? 'p-6' : 'p-4'} mb-4 backdrop-blur-sm`}",
        "line": 382,
        "context": "<div className={`bg-slate-700/50 rounded-2xl ${isIpad ? 'p-6' : 'p-4'} mb-4 backdrop-blur-sm`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`grid grid-cols-1 ${isIpad ? 'gap-4' : 'gap-3'}`}",
        "line": 383,
        "context": "<div className={`grid grid-cols-1 ${isIpad ? 'gap-4' : 'gap-3'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-5 h-5' : 'w-4 h-4'} text-blue-400`}",
        "line": 386,
        "context": "<Clock className={`${isIpad ? 'w-5 h-5' : 'w-4 h-4'} text-blue-400`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.time}",
        "line": 387,
        "context": "<span className={`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.time}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.shift}",
        "line": 389,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.shift} Shift</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-5 h-5' : 'w-4 h-4'} text-green-400`}",
        "line": 393,
        "context": "<MapPin className={`${isIpad ? 'w-5 h-5' : 'w-4 h-4'} text-green-400`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.location}",
        "line": 394,
        "context": "<span className={`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.location}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}",
        "line": 396,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>Mission Zone</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-5 h-5' : 'w-4 h-4'} text-purple-400`}",
        "line": 401,
        "context": "<User className={`${isIpad ? 'w-5 h-5' : 'w-4 h-4'} text-purple-400`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.supervisor}",
        "line": 402,
        "context": "<span className={`text-white font-semibold ${isIpad ? 'text-base' : ''}`}>{mission.supervisor}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}",
        "line": 404,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>Mission Commander</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-amber-200 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.notes}",
        "line": 411,
        "context": "<span className={`text-amber-200 ${isIpad ? 'text-base' : 'text-sm'}`}>{mission.notes}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`flex justify-between items-center ${isIpad ? 'px-4' : ''}`}",
        "line": 476,
        "context": "<div className={`flex justify-between items-center ${isIpad ? 'px-4' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-white mb-1`}",
        "line": 494,
        "context": "<Icon className={`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} text-white mb-1`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{item.label}",
        "line": 495,
        "context": "<span className={`${isIpad ? 'text-sm' : 'text-xs'} text-white font-medium`}>{item.label}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} transition-colors duration-500 text-gray-400 group-hover:text-purple-300 mb-1`}",
        "line": 502,
        "context": "<Icon className={`${isIpad ? 'w-6 h-6' : 'w-5 h-5'} transition-colors duration-500 text-gray-400 group-hover:text-purple-300 mb-1`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'text-sm' : 'text-xs'} transition-colors duration-500 text-gray-400 group-hover:text-purple-300 font-medium`}>{item.label}",
        "line": 503,
        "context": "<span className={`${isIpad ? 'text-sm' : 'text-xs'} transition-colors duration-500 text-gray-400 group-hover:text-purple-300 font-medium`}>{item.label}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onPageChange(Math.max(1, currentPage - 1))}",
        "line": 288,
        "context": "onClick={() => onPageChange(Math.max(1, currentPage - 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: totalPages }",
        "line": 300,
        "context": "{Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onPageChange(Math.min(totalPages, currentPage + 1))}",
        "line": 316,
        "context": "onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 372,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 373,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 383,
        "context": "<span className=\"text-sm font-medium\">{tab.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{jaspelJagaData.length}",
        "line": 432,
        "context": "<p className=\"text-gray-400 text-sm\">{jaspelJagaData.length} shift</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(totalJaspelJaga / jaspelJagaData.length)}",
        "line": 439,
        "context": "Rata-rata {formatCurrency(totalJaspelJaga / jaspelJagaData.length)}/shift",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{jaspelTindakanData.length}",
        "line": 451,
        "context": "<p className=\"text-gray-400 text-sm\">{jaspelTindakanData.length} tindakan</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(totalJaspelTindakan / jaspelTindakanData.length)}",
        "line": 458,
        "context": "Rata-rata {formatCurrency(totalJaspelTindakan / jaspelTindakanData.length)}/tindakan",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 510,
        "context": "<div key={item.id} className=\"bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-blue-400/50 transition-all duration-300\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.tanggal}",
        "line": 517,
        "context": "<h3 className=\"text-lg font-bold text-white\">{item.tanggal}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.hari} • {item.shift}",
        "line": 518,
        "context": "<p className=\"text-blue-300\">{item.hari} • {item.shift}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusBadge(item.status)}",
        "line": 521,
        "context": "{getStatusBadge(item.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.waktu}",
        "line": 530,
        "context": "<p className=\"text-white font-medium\">{item.waktu}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.durasi}",
        "line": 531,
        "context": "<p className=\"text-gray-400 text-xs\">{item.durasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.lokasi}",
        "line": 539,
        "context": "<p className=\"text-white font-medium\">{item.lokasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.tarif)}",
        "line": 547,
        "context": "<p className=\"text-white font-medium\">{formatCurrency(item.tarif)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.bonus)}",
        "line": 548,
        "context": "<p className=\"text-green-400 text-xs\">+{formatCurrency(item.bonus)} bonus</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.total)}",
        "line": 556,
        "context": "<p className=\"text-2xl font-bold text-emerald-400\">{formatCurrency(item.total)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 581,
        "context": "<div key={item.id} className=\"bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-purple-400/50 transition-all duration-300\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.tindakan}",
        "line": 588,
        "context": "<h3 className=\"text-lg font-bold text-white\">{item.tindakan}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.kategori}",
        "line": 589,
        "context": "<p className=\"text-purple-300\">{item.kategori}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusBadge(item.status)}",
        "line": 592,
        "context": "{getStatusBadge(item.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.tanggal}",
        "line": 601,
        "context": "<p className=\"text-white font-medium\">{item.tanggal}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.durasi}",
        "line": 602,
        "context": "<p className=\"text-gray-400 text-xs\">{item.durasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.pasien}",
        "line": 610,
        "context": "<p className=\"text-white font-medium\">{item.pasien}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{`px-2 py-1 rounded-full text-xs font-medium border ${getKompleksitasColor(item.kompleksitas)}`}",
        "line": 618,
        "context": "<div className={`px-2 py-1 rounded-full text-xs font-medium border ${getKompleksitasColor(item.kompleksitas)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.kompleksitas}",
        "line": 619,
        "context": "{item.kompleksitas}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.tarif)}",
        "line": 628,
        "context": "<p className=\"text-white font-medium\">{formatCurrency(item.tarif)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.bonus)}",
        "line": 629,
        "context": "<p className=\"text-green-400 text-xs\">+{formatCurrency(item.bonus)} bonus</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.total)}",
        "line": 637,
        "context": "<p className=\"text-2xl font-bold text-emerald-400\">{formatCurrency(item.total)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'text-3xl md:text-4xl lg:text-5xl' : 'text-2xl sm:text-3xl'}",
        "line": 351,
        "context": "${isIpad ? 'text-3xl md:text-4xl lg:text-5xl' : 'text-2xl sm:text-3xl'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Jaspel-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-cyan-200 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}",
        "line": 355,
        "context": "<p className={`text-cyan-200 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 128,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 129,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 158,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 159,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalHadir}",
        "line": 162,
        "context": "<div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{monthlyStats.totalHadir}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 168,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 169,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalTerlambat}",
        "line": 172,
        "context": "<div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">{monthlyStats.totalTerlambat}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 178,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 179,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalTidakHadir}",
        "line": 182,
        "context": "<div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">{monthlyStats.totalTidakHadir}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.tingkatKehadiran}",
        "line": 191,
        "context": "<span className=\"text-lg font-bold text-high-contrast\">{monthlyStats.tingkatKehadiran}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${monthlyStats.tingkatKehadiran}%` }}",
        "line": 197,
        "context": "animate={{ width: `${monthlyStats.tingkatKehadiran}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 1.5, delay: 0.5 }}",
        "line": 198,
        "context": "transition={{ duration: 1.5, delay: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalJamKerja}",
        "line": 216,
        "context": "<p className=\"text-xl font-semibold\">{monthlyStats.totalJamKerja}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.rataRataJamPerHari}",
        "line": 230,
        "context": "<p className=\"text-xl font-semibold\">{monthlyStats.rataRataJamPerHari}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 250,
        "context": "key={record.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, y: -1 }}",
        "line": 252,
        "context": "whileHover={{ scale: 1.01, y: -1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 253,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.hari}",
        "line": 260,
        "context": "<h4 className=\"text-base font-semibold text-high-contrast\">{record.hari}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(record.tanggal)}",
        "line": 261,
        "context": "<span className=\"text-sm text-muted-foreground font-medium\">{formatDate(record.tanggal)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.shift}",
        "line": 264,
        "context": "<span>{record.shift}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.lokasi}",
        "line": 266,
        "context": "<span>{record.lokasi}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(record.status)} border flex items-center gap-1 font-medium`}",
        "line": 269,
        "context": "<Badge className={`${getStatusColor(record.status)} border flex items-center gap-1 font-medium`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(record.status)}",
        "line": 270,
        "context": "{getStatusIcon(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'present' && 'Hadir'}",
        "line": 271,
        "context": "{record.status === 'present' && 'Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'late' && 'Terlambat'}",
        "line": 272,
        "context": "{record.status === 'late' && 'Terlambat'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'absent' && 'Tidak Hadir'}",
        "line": 273,
        "context": "{record.status === 'absent' && 'Tidak Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.masuk}",
        "line": 284,
        "context": "<p className=\"font-semibold text-high-contrast\">{record.masuk}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.keluar}",
        "line": 294,
        "context": "<p className=\"font-semibold text-high-contrast\">{record.keluar}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.totalJam}",
        "line": 304,
        "context": "<p className=\"font-semibold text-high-contrast\">{record.totalJam}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.random().toString(36).substr(2, 9)}",
        "line": 32,
        "context": "const [mapId] = useState(`leaflet-map-${Math.random().toString(36).substr(2, 9)}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 85,
        "context": "L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}, ${lng.toFixed(6)}",
        "line": 134,
        "context": "const address = data.display_name || `${lat.toFixed(6)}, ${lng.toFixed(6)}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}, ${lng.toFixed(6)}\\n📏 Akurasi: ${Math.round(accuracy)}",
        "line": 166,
        "context": "alert(`✅ Lokasi berhasil dideteksi!\\n📍 ${lat.toFixed(6)}, ${lng.toFixed(6)}\\n📏 Akurasi: ${Math.round(accuracy)} meter`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "line": 238,
        "context": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/LeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      icon: Stethoscope,\n      title: 'Kelola Jadwal Jaga',\n      description: 'Atur dan pantau jadwal kerja dengan mudah'\n    }",
        "line": 81,
        "context": "{",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.6, type: \"spring\" }}",
        "line": 139,
        "context": "transition={{ delay: 0.3, duration: 0.6, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, duration: 0.6 }}",
        "line": 149,
        "context": "transition={{ delay: 0.4, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5, duration: 0.6 }}",
        "line": 158,
        "context": "transition={{ delay: 0.5, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.6 }}",
        "line": 172,
        "context": "transition={{ delay: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7 }}",
        "line": 201,
        "context": "transition={{ delay: 0.7 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 208,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.8 }}",
        "line": 219,
        "context": "transition={{ delay: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 227,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.9 }}",
        "line": 252,
        "context": "transition={{ delay: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 1.0 }}",
        "line": 286,
        "context": "transition={{ delay: 1.0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 312,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 313,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 320,
        "context": "<h4 className=\"text-sm mb-1\">{feature.title}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.description}",
        "line": 322,
        "context": "{feature.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 225,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [activeTab, setActiveTab] = useState('presensi');\n\n  const tabs = [\n    { id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga }",
        "line": 20,
        "context": "export function MainApp({ onLogout, userData }: MainAppProps) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.95 }}",
        "line": 40,
        "context": "initial={{ opacity: 0, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 42,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, ease: \"easeOut\" }}",
        "line": 52,
        "context": "transition={{ duration: 0.6, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.5, type: \"spring\" }}",
        "line": 65,
        "context": "transition={{ delay: 0.3, duration: 0.5, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 71,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 72,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 79,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 80,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 88,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 89,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, duration: 0.5 }}",
        "line": 107,
        "context": "transition={{ delay: 0.4, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: \"easeInOut\" }}",
        "line": 129,
        "context": "transition={{ duration: 0.3, ease: \"easeInOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}",
        "line": 140,
        "context": "transition={{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 152,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleTabChange(tab.id)}",
        "line": 153,
        "context": "onClick={() => handleTabChange(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 155,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 156,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 + 0.3, duration: 0.4 }}",
        "line": 159,
        "context": "transition={{ delay: index * 0.1 + 0.3, duration: 0.4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 167,
        "context": "initial={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 169,
        "context": "exit={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2, ease: \"easeInOut\" }}",
        "line": 170,
        "context": "transition={{ duration: 0.2, ease: \"easeInOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 182,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 197,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 199,
        "context": "{tab.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    try {\n      setLoading(true);\n      \n      // Use unified auth system\n      const response = await UnifiedAuth.makeRequest('/dokter/web-api/jadwal-jaga');\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch: ${response.status}",
        "line": 62,
        "context": "const fetchJadwalJaga = async () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      console.error('Error fetching jadwal:', err);\n      setError('Gagal memuat jadwal jaga');\n      setMissions([]);\n    }",
        "line": 89,
        "context": "} catch (err) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "directObjectRender",
        "match": "{loading && (\n        <div className=\"px-4 sm:px-6 md:px-8 lg:px-12 xl:px-16 py-12\">\n          <div className=\"flex items-center justify-center\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-purple-400 mr-3\" />\n            <span className=\"text-gray-400\">Memuat jadwal jaga...</span>\n          </div>\n        </div>\n      )}",
        "line": 238,
        "context": "{loading && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "directObjectRender",
        "match": "{missions.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Calendar className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n            <p className=\"text-gray-400 text-lg\">Tidak ada jadwal jaga</p>\n            <p className=\"text-gray-500 text-sm mt-2\">Jadwal jaga Anda akan muncul di sini</p>\n          </div>\n        )}",
        "line": 366,
        "context": "{missions.length === 0 && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}",
        "line": 70,
        "context": "throw new Error(`Failed to fetch: ${response.status}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{ text: mission.status_jaga, color: 'text-gray-400' }",
        "line": 149,
        "context": "const statusConfig = statusMap[mission.status_jaga as keyof typeof statusMap] || { text: mission.status_jaga, color: 'text-gray-400' };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{`${statusConfig.color} text-xs font-bold`}",
        "line": 152,
        "context": "<span className={`${statusConfig.color} text-xs font-bold`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{statusConfig.text}",
        "line": 153,
        "context": "{statusConfig.text}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.id}",
        "line": 280,
        "context": "key={mission.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{isLocked ? 'opacity-50' : 'hover:scale-[1.02] hover:-translate-y-1'}",
        "line": 284,
        "context": "${isLocked ? 'opacity-50' : 'hover:scale-[1.02] hover:-translate-y-1'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.title}",
        "line": 309,
        "context": "<h3 className=\"text-lg font-bold text-white mb-1\">{mission.title}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.subtitle}",
        "line": 310,
        "context": "<p className=\"text-gray-400 text-sm\">{mission.subtitle}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.date}",
        "line": 318,
        "context": "<span className=\"text-sm\">{mission.date}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.time}",
        "line": 322,
        "context": "<span className=\"text-sm\">{mission.time}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.location}",
        "line": 326,
        "context": "<span className=\"text-sm\">{mission.location}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{`px-3 py-1 rounded-full text-xs font-bold ${getDifficultyColor(mission.difficulty)}`}",
        "line": 333,
        "context": "<div className={`px-3 py-1 rounded-full text-xs font-bold ${getDifficultyColor(mission.difficulty)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.difficulty.toUpperCase()}",
        "line": 334,
        "context": "{mission.difficulty.toUpperCase()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.subtitle}",
        "line": 340,
        "context": "`${mission.subtitle} Shift` :",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.title}",
        "line": 385,
        "context": "<h2 className=\"text-2xl font-bold text-white\">{selectedMission.title}</h2>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.subtitle}",
        "line": 393,
        "context": "<p className=\"text-white/90\">{selectedMission.subtitle}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.description}",
        "line": 400,
        "context": "<p className=\"text-gray-300\">{selectedMission.description}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.date}",
        "line": 407,
        "context": "<span>{selectedMission.date}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.time}",
        "line": 411,
        "context": "<span>{selectedMission.time}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.location}",
        "line": 415,
        "context": "<span>{selectedMission.location}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{parseInt(selectedMission.time.split(' - ')[1]) - parseInt(selectedMission.time.split(' - ')[0])}",
        "line": 442,
        "context": "`${parseInt(selectedMission.time.split(' - ')[1]) - parseInt(selectedMission.time.split(' - ')[0])} Jam` :",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{`px-3 py-1 rounded-full text-sm font-bold ${getDifficultyColor(selectedMission.difficulty)}`}",
        "line": 448,
        "context": "<div className={`px-3 py-1 rounded-full text-sm font-bold ${getDifficultyColor(selectedMission.difficulty)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.difficulty.toUpperCase()}",
        "line": 449,
        "context": "{selectedMission.difficulty.toUpperCase()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.status_jaga}",
        "line": 454,
        "context": "<span className=\"text-white font-medium\">{selectedMission.status_jaga}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.peran}",
        "line": 458,
        "context": "<span className=\"text-white font-medium\">{selectedMission.peran}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.status === 'locked' ? 'opacity-50 cursor-not-allowed' : ''}",
        "line": 471,
        "context": "${selectedMission.status === 'locked' ? 'opacity-50 cursor-not-allowed' : ''}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.status === 'locked'}",
        "line": 473,
        "context": "disabled={selectedMission.status === 'locked'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "objectInJSX",
        "match": "{selectedMission.status === 'locked' ? 'Terkunci' : 'Lihat Detail'}",
        "line": 475,
        "context": "{selectedMission.status === 'locked' ? 'Terkunci' : 'Lihat Detail'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "conditionalObjects",
        "match": "{isLocked ? 'opacity-50' : 'hover:scale-[1.02] hover:-translate-y-1'}",
        "line": 284,
        "context": "${isLocked ? 'opacity-50' : 'hover:scale-[1.02] hover:-translate-y-1'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "conditionalObjects",
        "match": "{selectedMission.status === 'locked' ? 'opacity-50 cursor-not-allowed' : ''}",
        "line": 471,
        "context": "${selectedMission.status === 'locked' ? 'opacity-50 cursor-not-allowed' : ''}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "pattern": "conditionalObjects",
        "match": "{selectedMission.status === 'locked' ? 'Terkunci' : 'Lihat Detail'}",
        "line": 475,
        "context": "{selectedMission.status === 'locked' ? 'Terkunci' : 'Lihat Detail'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "directObjectRender",
        "match": "{ \n      id: 'jadwal', \n      icon: Calendar, \n      label: 'Missions',\n      theme: 'from-blue-400 to-blue-600',\n      hoverColor: 'blue'\n    }",
        "line": 42,
        "context": "{",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 111,
        "context": "key={item.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(item.id)}",
        "line": 112,
        "context": "onClick={() => setActiveTab(item.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 129,
        "context": "{item.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{`absolute inset-0 bg-gradient-to-br ${getGradientBg(item.hoverColor)} rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500`}",
        "line": 138,
        "context": "<div className={`absolute inset-0 bg-gradient-to-br ${getGradientBg(item.hoverColor)} rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500`}></div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{getHoverClasses(item.hoverColor)}",
        "line": 141,
        "context": "group-hover:scale-110 group-hover:shadow-lg ${getHoverClasses(item.hoverColor)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{getHoverClasses(item.hoverColor).split(' ')[0]}",
        "line": 147,
        "context": "${getHoverClasses(item.hoverColor).split(' ')[0]}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{getHoverClasses(item.hoverColor).split(' ')[0]}",
        "line": 153,
        "context": "${getHoverClasses(item.hoverColor).split(' ')[0]}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 156,
        "context": "{item.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "objectInJSX",
        "match": "{isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}",
        "line": 173,
        "context": "${isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'px-8 md:px-12 lg:px-16 py-6 md:py-8' : 'px-6 py-4'}",
        "line": 98,
        "context": "${isIpad ? 'px-8 md:px-12 lg:px-16 py-6 md:py-8' : 'px-6 py-4'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'justify-center space-x-8 md:space-x-12 lg:space-x-16 max-w-4xl' : 'justify-between max-w-sm'}",
        "line": 102,
        "context": "${isIpad ? 'justify-center space-x-8 md:space-x-12 lg:space-x-16 max-w-4xl' : 'justify-between max-w-sm'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'p-4 md:p-5' : 'p-3'}",
        "line": 123,
        "context": "${isIpad ? 'p-4 md:p-5' : 'p-3'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white mb-1 ${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}`}",
        "line": 126,
        "context": "<Icon className={`text-white mb-1 ${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white font-medium ${isIpad ? 'text-xs md:text-sm' : 'text-xs'}`}",
        "line": 128,
        "context": "<span className={`text-white font-medium ${isIpad ? 'text-xs md:text-sm' : 'text-xs'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'p-4 md:p-5' : 'p-3'}",
        "line": 142,
        "context": "${isIpad ? 'p-4 md:p-5' : 'p-3'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}",
        "line": 148,
        "context": "${isIpad ? 'w-6 h-6 md:w-8 md:h-8' : 'w-5 h-5'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'text-xs md:text-sm' : 'text-xs'}",
        "line": 154,
        "context": "${isIpad ? 'text-xs md:text-sm' : 'text-xs'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}",
        "line": 173,
        "context": "${isIpad ? 'bottom-3 w-40 md:w-48 h-1.5' : 'bottom-2 w-32 h-1'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.totalDays}",
        "line": 227,
        "context": "{stats.totalDays}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 256,
        "context": "key={record.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(record.date)}",
        "line": 284,
        "context": "{formatDate(record.date)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{record.checkIn} - {record.checkOut}",
        "line": 290,
        "context": "{record.checkIn} - {record.checkOut}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{record.location}",
        "line": 296,
        "context": "{record.location}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusColor(record.status)}",
        "line": 305,
        "context": "background: `${getStatusColor(record.status)}20`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusText(record.status)}",
        "line": 310,
        "context": "{getStatusText(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    try {\n      // Get dynamic target from jadwal jaga API\n      const response = await apiCall('/api/jadwal-jaga/duration');\n      let targetMinutes = 480; // Default 8 hours fallback\n      \n      if (response.success && response.data) {\n        targetMinutes = response.data.target_minutes;\n        \n        // Log for debugging\n        console.log('📅 Jadwal Target:', {\n          hasSchedule: response.data.has_schedule,\n          shiftName: response.data.shift_name,\n          targetMinutes: targetMinutes,\n          targetHours: response.data.target_hours,\n          isShortShift: response.data.is_short_shift\n        }",
        "line": 400,
        "context": "const calculateTargetAndShortfall = async () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      console.error('❌ Error fetching jadwal duration:', error);\n      // Fallback to standard 8-hour calculation\n      const standardWorkingMinutes = 8 * 60; // 480 minutes\n      \n      let currentWorkingMinutes = 0;\n      if (attendanceStatus?.has_checked_in && !attendanceStatus?.has_checked_out && attendanceData.checkInTime) {\n        const workingTime = new Date().getTime() - new Date(attendanceData.checkInTime).getTime();\n        currentWorkingMinutes = Math.floor(workingTime / (1000 * 60));\n      }",
        "line": 455,
        "context": "} catch (error) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{[position.lat, position.lng]}",
        "line": 74,
        "context": "<Marker position={[position.lat, position.lng]}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.lat.toFixed(6)}",
        "line": 77,
        "context": "Lat: {position.lat.toFixed(6)}<br />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.lng.toFixed(6)}",
        "line": 78,
        "context": "Lng: {position.lng.toFixed(6)}<br />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.accuracy.toFixed(1)}",
        "line": 79,
        "context": "Accuracy: {position.accuracy.toFixed(1)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status} ${response.statusText}",
        "line": 236,
        "context": "throw new Error(errorData.message || `API Error: ${response.status} ${response.statusText}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.floor(targetMinutes / 60)}j ${targetMinutes % 60}",
        "line": 451,
        "context": "targetDisplay: `${Math.floor(targetMinutes / 60)}j ${targetMinutes % 60}m`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.floor(shortfall / 60)}j ${shortfall % 60}",
        "line": 452,
        "context": "shortfallDisplay: `${Math.floor(shortfall / 60)}j ${shortfall % 60}m`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}",
        "line": 529,
        "context": "workingHours: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{error.message}",
        "line": 646,
        "context": "message = `❌ Error GPS: ${error.message}\\n\\n🔧 Coba:\\n• Refresh halaman\\n• Restart browser\\n• Periksa pengaturan lokasi`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leaveForm.type}",
        "line": 815,
        "context": "alert(`Pengajuan cuti ${leaveForm.type} telah dikirim untuk persetujuan`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceData.workingHours}",
        "line": 969,
        "context": "<div className=\"text-lg font-bold text-green-400\">{attendanceData.workingHours}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceData.breakTime}",
        "line": 973,
        "context": "<div className=\"text-lg font-bold text-blue-400\">{attendanceData.breakTime}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTimeDisplay(attendanceStatus.attendance.check_in_time || attendanceStatus.attendance.time_in)}",
        "line": 992,
        "context": "{formatTimeDisplay(attendanceStatus.attendance.check_in_time || attendanceStatus.attendance.time_in)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTimeDisplay(attendanceStatus.attendance.check_out_time || attendanceStatus.attendance.time_out)}",
        "line": 998,
        "context": "{formatTimeDisplay(attendanceStatus.attendance.check_out_time || attendanceStatus.attendance.time_out)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{checkinLocation.address || `${checkinLocation.lat.toFixed(6)}, ${checkinLocation.lng.toFixed(6)}`}",
        "line": 1005,
        "context": "📍 Check-in location: {checkinLocation.address || `${checkinLocation.lat.toFixed(6)}, ${checkinLocation.lng.toFixed(6)}`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{[-7.898878, 111.961884]}",
        "line": 1154,
        "context": "center={[-7.898878, 111.961884]} // Default center (Indonesia)",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 1161,
        "context": "url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{permission.state}\\n\\nSecure Context: ${checks.isSecureContext}\\nProtocol: ${checks.protocol}\\nMobile: ${checks.userAgent}",
        "line": 1206,
        "context": "alert(`🔐 Permission Status: ${permission.state}\\n\\nSecure Context: ${checks.isSecureContext}\\nProtocol: ${checks.protocol}\\nMobile: ${checks.userAgent}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{position.coords.latitude.toFixed(6)}\\nLng: ${position.coords.longitude.toFixed(6)}\\nAccuracy: ${position.coords.accuracy}m\\nTimestamp: ${new Date(position.timestamp).toLocaleTimeString()}",
        "line": 1221,
        "context": "alert(`✅ GPS BERHASIL!\\n\\nLat: ${position.coords.latitude.toFixed(6)}\\nLng: ${position.coords.longitude.toFixed(6)}\\nAccuracy: ${position.coords.accuracy}m\\nTimestamp: ${new Date(position.timestamp).toLocaleTimeString()}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{error.message}\\nCode: ${error.code}",
        "line": 1226,
        "context": "let diagnostic = `❌ GPS FAILED\\n\\nError: ${error.message}\\nCode: ${error.code}\\n`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.floor(targetMinutesToday / 60)}j {targetMinutesToday % 60}",
        "line": 1296,
        "context": "{Math.floor(targetMinutesToday / 60)}j {targetMinutesToday % 60}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.floor(shortfallMinutesToday / 60)}j {shortfallMinutesToday % 60}",
        "line": 1310,
        "context": "{Math.floor(shortfallMinutesToday / 60)}j {shortfallMinutesToday % 60}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => handleFilterChange(e.target.value)}",
        "line": 1352,
        "context": "onChange={(e) => handleFilterChange(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id || index}",
        "line": 1391,
        "context": "<div key={record.id || index} className={`bg-white/10 backdrop-blur-xl rounded-2xl border border-white/20 ${",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.date}",
        "line": 1397,
        "context": "}`}>{record.date}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{`font-medium ${getStatusColor(record.status)}",
        "line": 1398,
        "context": "<span className={`font-medium ${getStatusColor(record.status)} ${",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status}",
        "line": 1401,
        "context": "{record.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTimeDisplay(record.time_in)}",
        "line": 1409,
        "context": "<span className=\"text-white\">{formatTimeDisplay(record.time_in)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTimeDisplay(record.time_out)}",
        "line": 1413,
        "context": "<span className=\"text-white\">{formatTimeDisplay(record.time_out)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.work_duration || '-'}",
        "line": 1417,
        "context": "<span className=\"text-white\">{record.work_duration || '-'}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{record.location_name_in}",
        "line": 1422,
        "context": "📍 {record.location_name_in}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{startIndex + 1}-{Math.min(endIndex, filteredData.length)} dari {filteredData.length}",
        "line": 1477,
        "context": "Menampilkan {startIndex + 1}-{Math.min(endIndex, filteredData.length)} dari {filteredData.length} data",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.present_days}",
        "line": 1534,
        "context": "}`}>{monthlyStats.present_days}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.hour_shortage}",
        "line": 1546,
        "context": "}`}>{monthlyStats.hour_shortage}h</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(monthlyStats.total_hours)}",
        "line": 1558,
        "context": "}`}>{Math.round(monthlyStats.total_hours)}h</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(monthlyStats.attendance_rate)}",
        "line": 1570,
        "context": "}`}>{Math.round(monthlyStats.attendance_rate)}%</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.attendance_rate.toFixed(1)}",
        "line": 1584,
        "context": "<span className=\"text-green-400\">{monthlyStats.attendance_rate.toFixed(1)}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${Math.min(monthlyStats.attendance_rate, 100)}%` }}",
        "line": 1589,
        "context": "style={{ width: `${Math.min(monthlyStats.attendance_rate, 100)}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.average_hours_per_day.toFixed(1)}",
        "line": 1593,
        "context": "<span>Rata-rata: {monthlyStats.average_hours_per_day.toFixed(1)}j/hari</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.total_days}",
        "line": 1594,
        "context": "<span>Total: {monthlyStats.total_days} hari</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leave.type}",
        "line": 1806,
        "context": "}`}>{leave.type}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leave.date} • {leave.days}",
        "line": 1809,
        "context": "}`}>{leave.date} • {leave.days} hari</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leave.status}",
        "line": 1818,
        "context": "{leave.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{userData?.name || TokenManager.getUser()?.name || 'User'}",
        "line": 1869,
        "context": "}`}>{userData?.name || TokenManager.getUser()?.name || 'User'}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 1898,
        "context": "key={item.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(item.id)}",
        "line": 1899,
        "context": "onClick={() => setActiveTab(item.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 1930,
        "context": "{item.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leaveForm.type}",
        "line": 1967,
        "context": "value={leaveForm.type}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setLeaveForm(prev => ({ ...prev, type: e.target.value }))}",
        "line": 1968,
        "context": "onChange={(e) => setLeaveForm(prev => ({ ...prev, type: e.target.value }))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leaveForm.startDate}",
        "line": 1982,
        "context": "value={leaveForm.startDate}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setLeaveForm(prev => ({ ...prev, startDate: e.target.value }))}",
        "line": 1983,
        "context": "onChange={(e) => setLeaveForm(prev => ({ ...prev, startDate: e.target.value }))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leaveForm.endDate}",
        "line": 1991,
        "context": "value={leaveForm.endDate}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setLeaveForm(prev => ({ ...prev, endDate: e.target.value }))}",
        "line": 1992,
        "context": "onChange={(e) => setLeaveForm(prev => ({ ...prev, endDate: e.target.value }))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{leaveForm.reason}",
        "line": 2001,
        "context": "value={leaveForm.reason}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setLeaveForm(prev => ({ ...prev, reason: e.target.value }))}",
        "line": 2002,
        "context": "onChange={(e) => setLeaveForm(prev => ({ ...prev, reason: e.target.value }))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'max-w-3xl mx-auto' : ''}`}",
        "line": 1029,
        "context": "} ${isIpad ? 'max-w-3xl mx-auto' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{loading ? 'Memproses...' : 'Mulai bekerja'}",
        "line": 1069,
        "context": "{loading ? 'Memproses...' : 'Mulai bekerja'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{loading ? 'Memproses...' : 'Selesai bekerja'}",
        "line": 1113,
        "context": "{loading ? 'Memproses...' : 'Selesai bekerja'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{mapDisabled ? 'GPS sedang digunakan...' : 'Click map untuk deteksi'}",
        "line": 1178,
        "context": "{mapDisabled ? 'GPS sedang digunakan...' : 'Click map untuk deteksi'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`bg-white/10 backdrop-blur-xl rounded-3xl ${isIpad ? 'p-6' : 'p-4'} border border-white/20 ${isIpad ? 'mt-6 mb-24' : 'mt-4 mb-20'}`}",
        "line": 1267,
        "context": "<div className={`bg-white/10 backdrop-blur-xl rounded-3xl ${isIpad ? 'p-6' : 'p-4'} border border-white/20 ${isIpad ? 'mt-6 mb-24' : 'mt-4 mb-20'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{shortfallMinutesToday === 0 ? 'Target tercapai!' : 'Jam yang tersisa'}",
        "line": 1313,
        "context": "{shortfallMinutesToday === 0 ? 'Target tercapai!' : 'Jam yang tersisa'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{attendanceLoading ? 'animate-spin' : ''}`}",
        "line": 1345,
        "context": "} ${attendanceLoading ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{statsLoading ? 'animate-spin' : ''}`}",
        "line": 1501,
        "context": "} ${statsLoading ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isIpad ? 'w-5 h-5' : 'w-4 h-4'}`}",
        "line": 1743,
        "context": "<Plus className={`${isIpad ? 'w-5 h-5' : 'w-4 h-4'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{ userData }: { userData?: any }",
        "line": 2033,
        "context": "export function Presensi({ userData }: { userData?: any }) {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: \"Rating Kepuasan\", value: \"4.9/5\", icon: Star, color: \"text-yellow-400\" }",
        "line": 171,
        "context": "{ label: \"Rating Kepuasan\", value: \"4.9/5\", icon: Star, color: \"text-yellow-400\" },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 234,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 235,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 245,
        "context": "<span className=\"text-sm font-medium hidden sm:block\">{tab.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{profileData.name}",
        "line": 287,
        "context": "{profileData.name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{profileData.specialization}",
        "line": 290,
        "context": "{profileData.specialization}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{profileData.hospital}",
        "line": 293,
        "context": "{profileData.hospital}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Mail, label: 'Email', value: profileData.email }",
        "line": 335,
        "context": "{ icon: Mail, label: 'Email', value: profileData.email },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Phone, label: 'Phone', value: profileData.phone }",
        "line": 336,
        "context": "{ icon: Phone, label: 'Phone', value: profileData.phone },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: MapPin, label: 'Address', value: profileData.address }",
        "line": 337,
        "context": "{ icon: MapPin, label: 'Address', value: profileData.address },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Calendar, label: 'Birth Date', value: profileData.birthDate }",
        "line": 338,
        "context": "{ icon: Calendar, label: 'Birth Date', value: profileData.birthDate },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: User, label: 'Gender', value: profileData.gender }",
        "line": 339,
        "context": "{ icon: User, label: 'Gender', value: profileData.gender }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 346,
        "context": "<div className=\"text-gray-400 text-sm\">{item.label}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.value}",
        "line": 347,
        "context": "<div className=\"text-white font-medium\">{item.value}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Award, label: 'License Number', value: profileData.licenseNumber }",
        "line": 364,
        "context": "{ icon: Award, label: 'License Number', value: profileData.licenseNumber },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Building, label: 'Hospital', value: profileData.hospital }",
        "line": 365,
        "context": "{ icon: Building, label: 'Hospital', value: profileData.hospital },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Clock, label: 'Experience', value: profileData.experience }",
        "line": 366,
        "context": "{ icon: Clock, label: 'Experience', value: profileData.experience },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{ icon: Target, label: 'Specialization', value: profileData.specialization }",
        "line": 367,
        "context": "{ icon: Target, label: 'Specialization', value: profileData.specialization }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 374,
        "context": "<div className=\"text-gray-400 text-sm\">{item.label}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{item.value}",
        "line": 375,
        "context": "<div className=\"text-white font-medium\">{item.value}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{profileData.bio}",
        "line": 390,
        "context": "<p className=\"text-gray-300 leading-relaxed\">{profileData.bio}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-8 h-8 mx-auto mb-2 ${stat.color}`}",
        "line": 399,
        "context": "<Icon className={`w-8 h-8 mx-auto mb-2 ${stat.color}`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.value}",
        "line": 400,
        "context": "<div className=\"text-lg font-bold text-white\">{stat.value}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.label}",
        "line": 401,
        "context": "<div className=\"text-gray-400 text-xs\">{stat.label}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.id}",
        "line": 420,
        "context": "<div key={achievement.id} className=\"bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-purple-400/50 transition-all duration-300 group\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-12 h-12 bg-gradient-to-br ${achievement.color} rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}",
        "line": 422,
        "context": "<div className={`w-12 h-12 bg-gradient-to-br ${achievement.color} rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.title}",
        "line": 427,
        "context": "<h3 className=\"text-lg font-bold text-white\">{achievement.title}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{`px-2 py-1 rounded-full text-xs font-medium border ${getRarityColor(achievement.rarity)}`}",
        "line": 428,
        "context": "<div className={`px-2 py-1 rounded-full text-xs font-medium border ${getRarityColor(achievement.rarity)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.rarity}",
        "line": 429,
        "context": "{achievement.rarity}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.description}",
        "line": 432,
        "context": "<p className=\"text-gray-300 text-sm mb-2\">{achievement.description}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{achievement.date}",
        "line": 433,
        "context": "<p className=\"text-gray-400 text-xs\">{achievement.date}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{cert.id}",
        "line": 452,
        "context": "<div key={cert.id} className=\"bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-green-400/50 transition-all duration-300\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{cert.name}",
        "line": 459,
        "context": "<h3 className=\"text-lg font-bold text-white\">{cert.name}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{cert.issuer}",
        "line": 460,
        "context": "<p className=\"text-green-300\">{cert.issuer}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{cert.status}",
        "line": 465,
        "context": "<span className=\"text-green-400 text-sm font-medium\">{cert.status}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{cert.issueDate}",
        "line": 472,
        "context": "<div className=\"text-white font-medium\">{cert.issueDate}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{cert.expiryDate}",
        "line": 476,
        "context": "<div className=\"text-white font-medium\">{cert.expiryDate}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{setting.label}",
        "line": 534,
        "context": "<span className=\"text-white\">{setting.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-12 h-6 rounded-full p-1 transition-colors ${setting.enabled ? 'bg-green-500' : 'bg-gray-600'}`}",
        "line": 535,
        "context": "<div className={`w-12 h-6 rounded-full p-1 transition-colors ${setting.enabled ? 'bg-green-500' : 'bg-gray-600'}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-4 h-4 rounded-full bg-white transition-transform ${setting.enabled ? 'translate-x-6' : 'translate-x-0'}`}",
        "line": 536,
        "context": "<div className={`w-4 h-4 rounded-full bg-white transition-transform ${setting.enabled ? 'translate-x-6' : 'translate-x-0'}`}></div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{profileData.name}",
        "line": 569,
        "context": "value={profileData.name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "objectInJSX",
        "match": "{profileData.email}",
        "line": 578,
        "context": "value={profileData.email}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'text-3xl md:text-4xl lg:text-5xl' : 'text-2xl sm:text-3xl'}",
        "line": 212,
        "context": "${isIpad ? 'text-3xl md:text-4xl lg:text-5xl' : 'text-2xl sm:text-3xl'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-purple-200 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}",
        "line": 216,
        "context": "<p className={`text-purple-200 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'w-32 h-32 md:w-40 md:h-40' : 'w-24 h-24 sm:w-32 sm:h-32'}",
        "line": 266,
        "context": "${isIpad ? 'w-32 h-32 md:w-40 md:h-40' : 'w-24 h-24 sm:w-32 sm:h-32'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-white relative z-10 ${isIpad ? 'w-16 h-16 md:w-20 md:h-20' : 'w-12 h-12 sm:w-16 sm:h-16'}`}",
        "line": 271,
        "context": "<User className={`text-white relative z-10 ${isIpad ? 'w-16 h-16 md:w-20 md:h-20' : 'w-12 h-12 sm:w-16 sm:h-16'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-white mb-2 ${isIpad ? 'text-2xl md:text-3xl' : 'text-xl sm:text-2xl'}`}",
        "line": 286,
        "context": "<h2 className={`font-bold text-white mb-2 ${isIpad ? 'text-2xl md:text-3xl' : 'text-xl sm:text-2xl'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-purple-300 mb-2 ${isIpad ? 'text-lg' : 'text-base'}`}",
        "line": 289,
        "context": "<p className={`text-purple-300 mb-2 ${isIpad ? 'text-lg' : 'text-base'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}",
        "line": 292,
        "context": "<p className={`text-gray-400 ${isIpad ? 'text-base' : 'text-sm'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-cyan-400 ${isIpad ? 'text-xl md:text-2xl' : 'text-lg'}`}",
        "line": 308,
        "context": "<div className={`font-bold text-cyan-400 ${isIpad ? 'text-xl md:text-2xl' : 'text-lg'}`}>Level 7</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-sm' : 'text-xs'}`}",
        "line": 309,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-sm' : 'text-xs'}`}>Doctor Rank</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-green-400 ${isIpad ? 'text-xl md:text-2xl' : 'text-lg'}`}",
        "line": 312,
        "context": "<div className={`font-bold text-green-400 ${isIpad ? 'text-xl md:text-2xl' : 'text-lg'}`}>2,847</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-sm' : 'text-xs'}`}",
        "line": 313,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-sm' : 'text-xs'}`}>XP Points</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`font-bold text-yellow-400 ${isIpad ? 'text-xl md:text-2xl' : 'text-lg'}`}",
        "line": 316,
        "context": "<div className={`font-bold text-yellow-400 ${isIpad ? 'text-xl md:text-2xl' : 'text-lg'}`}>96.5%</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-gray-400 ${isIpad ? 'text-sm' : 'text-xs'}`}",
        "line": 317,
        "context": "<div className={`text-gray-400 ${isIpad ? 'text-sm' : 'text-xs'}`}>Performance</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-12 h-6 rounded-full p-1 transition-colors ${setting.enabled ? 'bg-green-500' : 'bg-gray-600'}`}",
        "line": 535,
        "context": "<div className={`w-12 h-6 rounded-full p-1 transition-colors ${setting.enabled ? 'bg-green-500' : 'bg-gray-600'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/Profil-Dark.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-4 h-4 rounded-full bg-white transition-transform ${setting.enabled ? 'translate-x-6' : 'translate-x-0'}`}",
        "line": 536,
        "context": "<div className={`w-4 h-4 rounded-full bg-white transition-transform ${setting.enabled ? 'translate-x-6' : 'translate-x-0'}`}></div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/SafeErrorBoundary.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    console.error('🚨 Error caught by boundary:', error);\n    console.error('Component stack:', errorInfo.componentStack);\n    \n    // Check if it's the jadwal object error\n    if (error.message.includes('object with keys') && error.message.includes('tanggal_jaga')) {\n      console.error('🎯 FOUND JADWAL OBJECT ERROR!');\n      console.error('Check the component stack above to find where the object is being rendered');\n    }",
        "line": 36,
        "context": "componentDidCatch(error: Error, errorInfo: ErrorInfo) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/SafeErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.error!} errorInfo={this.state.errorInfo!}",
        "line": 56,
        "context": "return <Fallback error={this.state.error!} errorInfo={this.state.errorInfo!} />;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SafeErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.error?.toString()}",
        "line": 64,
        "context": "<pre className=\"mt-2 whitespace-pre-wrap\">{this.state.error?.toString()}</pre>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SafeErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.errorInfo?.componentStack}",
        "line": 65,
        "context": "<pre className=\"mt-2 whitespace-pre-wrap text-xs\">{this.state.errorInfo?.componentStack}</pre>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    try {\n      setLoading(true);\n      const response = await fetch('/api/v2/dashboards/dokter/jadwal-jaga', {\n        headers: {\n          'Accept': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n        }",
        "line": 25,
        "context": "const fetchJadwal = async () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      console.error('Error fetching jadwal:', err);\n      setError('Failed to load schedule');\n      // Set dummy data to show UI works\n      setMissions([\n        {\n          id: '1',\n          date: new Date().toISOString().split('T')[0],\n          shift: 'Pagi',\n          time: '08:00 - 16:00',\n          location: 'Unit Gawat Darurat',\n          status: 'scheduled'\n        }",
        "line": 62,
        "context": "} catch (err) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}",
        "line": 37,
        "context": "throw new Error(`Failed to fetch: ${response.status}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.id}",
        "line": 116,
        "context": "key={mission.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.date}",
        "line": 123,
        "context": "<span className=\"font-medium\">{mission.date}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.shift}",
        "line": 125,
        "context": "{mission.shift}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.time}",
        "line": 130,
        "context": "<span>{mission.time}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.location}",
        "line": 134,
        "context": "<span>{mission.location}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{mission.status === 'scheduled' ? 'Scheduled' : mission.status}",
        "line": 143,
        "context": "{mission.status === 'scheduled' ? 'Scheduled' : mission.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "pattern": "conditionalObjects",
        "match": "{mission.status === 'scheduled' ? 'Scheduled' : mission.status}",
        "line": 143,
        "context": "{mission.status === 'scheduled' ? 'Scheduled' : mission.status}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.898878, lng: 111.961884 }",
        "line": 35,
        "context": "const [currentLocation, setCurrentLocation] = useState({ lat: -7.898878, lng: 111.961884 });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 93,
        "context": "window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}",
        "line": 194,
        "context": "console.log(`✅ Lokasi terdeteksi dengan akurasi ${accuracy.toFixed(1)}m`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}",
        "line": 267,
        "context": "<div>📍 {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{accuracy.toFixed(1)}",
        "line": 270,
        "context": "Accuracy: {accuracy.toFixed(1)}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 14,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/dokter/SimpleLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{accuracy <= 10 ? 'text-green-400' : accuracy <= 50 ? 'text-yellow-400' : 'text-red-400'}",
        "line": 269,
        "context": "<div className={accuracy <= 10 ? 'text-green-400' : accuracy <= 50 ? 'text-yellow-400' : 'text-red-400'}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/figma/ImageWithFallback.tsx",
        "pattern": "spreadInJSX",
        "match": "{...rest} data-original-url={src}",
        "line": 21,
        "context": "<img src={ERROR_IMG_SRC} alt=\"Error loading image\" {...rest} data-original-url={src} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/figma/ImageWithFallback.tsx",
        "pattern": "spreadInJSX",
        "match": "{...rest} onError={handleError}",
        "line": 25,
        "context": "<img src={src} alt={alt} className={className} style={style} {...rest} onError={handleError} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "directObjectRender",
        "match": "{ id: 'jadwal', label: 'Jadwal', icon: Calendar }",
        "line": 122,
        "context": "{ id: 'jadwal', label: 'Jadwal', icon: Calendar },",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    // For world-class minimalist components with integrated TopBar, use full-screen layout\n    if (['dashboard', 'jadwal', 'jaspel', 'presensi', 'laporan', 'profil'].includes(activeTab)) {\n      return (\n        <div className=\"min-h-screen w-full\">\n          <div className=\"pb-20\">\n            {renderContent()}",
        "line": 151,
        "context": "if (isAuthenticated || isLoggedIn) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 166,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 167,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 168,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.1 }}",
        "line": 169,
        "context": "transition={{ duration: 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 175,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 183,
        "context": "<span className=\"text-xs font-medium truncate leading-tight\">{tab.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 263,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 264,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 265,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.1 }}",
        "line": 266,
        "context": "transition={{ duration: 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 272,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 280,
        "context": "<span className=\"text-xs font-medium truncate leading-tight\">{tab.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 296,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 330,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 343,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 340,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? <EyeOff className=\"w-4 h-4 text-gray-600 dark:text-gray-300\" /> : <Eye className=\"w-4 h-4 text-gray-600 dark:text-gray-300\" />}",
        "line": 354,
        "context": "{showPassword ? <EyeOff className=\"w-4 h-4 text-gray-600 dark:text-gray-300\" /> : <Eye className=\"w-4 h-4 text-gray-600 dark:text-gray-300\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/AppExactHTML.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 264,
        "context": "<button key={tab.id} className=\"flex flex-col items-center space-y-1\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppExactHTML.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 268,
        "context": "<span className=\"text-xs\">{tab.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppExactHTML.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 285,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppExactHTML.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 286,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppExactHTML.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 299,
        "context": "{tab.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "directObjectRender",
        "match": "{ id: 'jadwal', label: 'Jadwal Jaga', icon: Calendar }",
        "line": 116,
        "context": "{ id: 'jadwal', label: 'Jadwal Jaga', icon: Calendar },",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    switch (activeTab) {\n      case 'dashboard':\n        return <ModernDashboard />;\n      case 'jadwal':\n        return (\n          <div className=\"p-4 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Jadwal Jaga</h2>\n            <p className=\"text-gray-500\">Component sedang dalam development</p>\n          </div>\n        );\n      case 'presensi':\n        return (\n          <div className=\"p-4 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Presensi</h2>\n            <p className=\"text-gray-500\">Component sedang dalam development</p>\n          </div>\n        );\n      case 'jaspel':\n        return (\n          <div className=\"p-4 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Jaspel</h2>\n            <p className=\"text-gray-500\">Component sedang dalam development</p>\n          </div>\n        );\n      case 'profil':\n        return (\n          <div className=\"p-4 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Profil</h2>\n            <p className=\"text-gray-500\">Component sedang dalam development</p>\n          </div>\n        );\n      default:\n        return <ModernDashboard />;\n    }",
        "line": 362,
        "context": "const renderContent = () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 143,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 149,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 206,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9, opacity: 0 }}",
        "line": 211,
        "context": "initial={{ scale: 0.9, opacity: 0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.1 }}",
        "line": 213,
        "context": "transition={{ delay: 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.id}",
        "line": 236,
        "context": "key={stat.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{`dribbble-card dribbble-metric-card ${stat.color}`}",
        "line": 237,
        "context": "className={`dribbble-card dribbble-metric-card ${stat.color}`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2 + index * 0.1 }}",
        "line": 240,
        "context": "transition={{ delay: 0.2 + index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{`dribbble-icon ${stat.color}`}",
        "line": 244,
        "context": "<div className={`dribbble-icon ${stat.color}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.label}",
        "line": 247,
        "context": "<p className=\"dribbble-metric-label\">{stat.label}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.value}",
        "line": 250,
        "context": "<h3 className=\"dribbble-metric-value\">{stat.value}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change}",
        "line": 252,
        "context": "{stat.change}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7 }}",
        "line": 264,
        "context": "transition={{ delay: 0.7 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ height: `${Math.random() * 80 + 20}%` }}",
        "line": 276,
        "context": "animate={{ height: `${Math.random() * 80 + 20}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.8 + i * 0.1 }}",
        "line": 277,
        "context": "transition={{ delay: 0.8 + i * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 330,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 331,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 333,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.1 }}",
        "line": 351,
        "context": "transition={{ delay: 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 353,
        "context": "{tab.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9, opacity: 0 }}",
        "line": 404,
        "context": "initial={{ scale: 0.9, opacity: 0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 423,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 435,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 474,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}",
        "line": 145,
        "context": "{theme === 'dark' ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "conditionalObjects",
        "match": "{isActive ? { y: -4 } : { y: 0 }}",
        "line": 341,
        "context": "animate={isActive ? { y: -4 } : { y: 0 }}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 433,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}",
        "line": 444,
        "context": "{showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "pattern": "conditionalObjects",
        "match": "{isLoading ? 'Loading...' : 'Masuk'}",
        "line": 453,
        "context": "{isLoading ? 'Loading...' : 'Masuk'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/AuthDebug.tsx",
        "pattern": "objectInJSX",
        "match": "{userData ? JSON.stringify(userData, null, 2) : \"none\"}",
        "line": 37,
        "context": "<p>User: {userData ? JSON.stringify(userData, null, 2) : \"none\"}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/AuthDebug.tsx",
        "pattern": "conditionalObjects",
        "match": "{userData ? JSON.stringify(userData, null, 2) : \"none\"}",
        "line": 37,
        "context": "<p>User: {userData ? JSON.stringify(userData, null, 2) : \"none\"}</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 39,
        "context": "center: { lat: -7.808758, lng: 111.962646 }, // Use coordinates from screenshot",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 62,
        "context": "position: { lat: -7.808758, lng: 111.962646 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{() => window.location.reload()}",
        "line": 286,
        "context": "onClick={() => window.location.reload()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 302,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 303,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 365,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 366,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/BasicGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "line": 347,
        "context": "className={`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 119,
        "context": "key={feature.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 122,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-12 h-12 rounded-full flex items-center justify-center bg-muted ${feature.color}`}",
        "line": 127,
        "context": "<div className={`w-12 h-12 rounded-full flex items-center justify-center bg-muted ${feature.color}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 132,
        "context": "{feature.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.description}",
        "line": 135,
        "context": "{feature.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? 'Dark Mode' : 'Light Mode'}",
        "line": 87,
        "context": "Current Theme: {theme === 'dark' ? 'Dark Mode' : 'Light Mode'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? 'hsl(224 15% 8%)' : 'hsl(0 0% 100%)'}",
        "line": 95,
        "context": "{theme === 'dark' ? 'hsl(224 15% 8%)' : 'hsl(0 0% 100%)'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DarkModeDemo.tsx",
        "pattern": "conditionalObjects",
        "match": "{theme === 'dark' ? 'hsl(210 40% 95%)' : 'hsl(220 13% 10%)'}",
        "line": 101,
        "context": "{theme === 'dark' ? 'hsl(210 40% 95%)' : 'hsl(220 13% 10%)'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{ default: module.Sparkline }",
        "line": 29,
        "context": "const Sparkline = lazy(() => import('../ui/sparkline').then(module => ({ default: module.Sparkline })));",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{ default: module.CircularProgress }",
        "line": 30,
        "context": "const CircularProgress = lazy(() => import('../ui/circular-progress').then(module => ({ default: module.CircularProgress })));",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{ default: module.TrendIndicator }",
        "line": 31,
        "context": "const TrendIndicator = lazy(() => import('../ui/trend-indicator').then(module => ({ default: module.TrendIndicator })));",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{ name: data.paramedis_name || 'Loading...' }",
        "line": 120,
        "context": "user: data.user || { name: data.paramedis_name || 'Loading...' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{action}: Starting ${action.toLowerCase()}",
        "line": 171,
        "context": "console.log(`🔄 ${action}: Starting ${action.toLowerCase()}...`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.user.work_location.name}",
        "line": 494,
        "context": "{dashboardStats.user.work_location.name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.user.work_location.address}",
        "line": 497,
        "context": "{dashboardStats.user.work_location.address}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.user.work_location.radius_meters}",
        "line": 503,
        "context": "Radius: {dashboardStats.user.work_location.radius_meters}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 528,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1, rotate: 5 }}",
        "line": 537,
        "context": "whileHover={{ scale: 1.1, rotate: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 538,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.5 }}",
        "line": 546,
        "context": "initial={{ opacity: 0, scale: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2, type: \"spring\", stiffness: 200 }}",
        "line": 548,
        "context": "transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current}",
        "line": 550,
        "context": "{stats.attendance.current}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current}",
        "line": 556,
        "context": "value={stats.attendance.current}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current - stats.attendance.change}",
        "line": 557,
        "context": "previousValue={stats.attendance.current - stats.attendance.change}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current}",
        "line": 564,
        "context": "value={stats.attendance.current}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 582,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1, rotate: 5 }}",
        "line": 591,
        "context": "whileHover={{ scale: 1.1, rotate: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 592,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.attendance_rank || '--'}",
        "line": 598,
        "context": "<p className=\"dribbble-metric-value\">#{stats.performance.attendance_rank || '--'}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.total_staff || 0}",
        "line": 602,
        "context": "dari {stats.performance.total_staff || 0} paramedis",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.score}",
        "line": 605,
        "context": "value={stats.performance.score}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.thisMonth}",
        "line": 628,
        "context": "value={stats.jaspel.thisMonth}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.lastMonth}",
        "line": 629,
        "context": "previousValue={stats.jaspel.lastMonth}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.thisMonth.toLocaleString('id-ID')}",
        "line": 641,
        "context": "Rp {stats.jaspel.thisMonth.toLocaleString('id-ID')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{(dashboardStats?.daily_average || Math.round(stats.jaspel.thisMonth / new Date().getDate())).toLocaleString('id-ID')}",
        "line": 652,
        "context": "Rp {(dashboardStats?.daily_average || Math.round(stats.jaspel.thisMonth / new Date().getDate())).toLocaleString('id-ID')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.lastMonth.toLocaleString('id-ID')}",
        "line": 660,
        "context": "Rp {stats.jaspel.lastMonth.toLocaleString('id-ID')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.stats.attendance_today.message}",
        "line": 699,
        "context": "{dashboardStats.stats.attendance_today.message}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.stats.attendance_today.completed_shifts}/{dashboardStats.stats.attendance_today.total_shifts}",
        "line": 703,
        "context": "{dashboardStats.stats.attendance_today.completed_shifts}/{dashboardStats.stats.attendance_today.total_shifts}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.stats.attendance_today.active_shift.start_time} - {dashboardStats.stats.attendance_today.active_shift.end_time}",
        "line": 708,
        "context": "Shift: {dashboardStats.stats.attendance_today.active_shift.start_time} - {dashboardStats.stats.attendance_today.active_shift.end_time}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{ latitude: number; longitude: number; accuracy?: number }",
        "line": 233,
        "context": "const getCurrentLocation = (): Promise<{ latitude: number; longitude: number; accuracy?: number }> => {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-5 h-5 text-blue-500 ${pullToRefreshDistance > 80 ? 'animate-spin' : ''}`}",
        "line": 423,
        "context": "<RefreshCw className={`w-5 h-5 text-blue-500 ${pullToRefreshDistance > 80 ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-4 h-4 text-gray-500 ${isRefreshing ? 'animate-spin' : ''}`}",
        "line": 487,
        "context": "<RefreshCw className={`w-4 h-4 text-gray-500 ${isRefreshing ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Dashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{dashboardStats?.stats?.attendance_today?.can_check_in ? 'animate-pulse' : ''}`}",
        "line": 728,
        "context": "} w-full ${dashboardStats?.stats?.attendance_today?.can_check_in ? 'animate-pulse' : ''}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      id: 'schedule',\n      title: 'Jadwal Jaga',\n      description: 'Lihat jadwal',\n      icon: Calendar,\n      href: '/paramedis/jadwal',\n      color: 'purple',\n      badge: 2\n    }",
        "line": 179,
        "context": "{",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 2.1, direction: 'up' }",
        "line": 132,
        "context": "change: { value: 2.1, direction: 'up' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 8.2, direction: 'up' }",
        "line": 152,
        "context": "change: { value: 8.2, direction: 'up' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 0.5, direction: 'up' }",
        "line": 162,
        "context": "change: { value: 0.5, direction: 'up' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "line": 414,
        "context": "{user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{user.greeting || 'Selamat datang'}, {user.name.split(' ')[0]}",
        "line": 419,
        "context": "{user.greeting || 'Selamat datang'}, {user.name.split(' ')[0]}!",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{user.role}",
        "line": 422,
        "context": "{user.role} • {currentTime.toLocaleDateString('id-ID', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "line": 434,
        "context": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.id}",
        "line": 457,
        "context": "key={stat.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -4 }}",
        "line": 459,
        "context": "whileHover={{ scale: 1.02, y: -4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 460,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`bg-gradient-to-br ${colors.gradient} border ${colors.border} overflow-hidden min-h-[180px] hover:shadow-lg transition-all duration-300`}",
        "line": 462,
        "context": "<Card className={`bg-gradient-to-br ${colors.gradient} border ${colors.border} overflow-hidden min-h-[180px] hover:shadow-lg transition-all duration-300`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-8 h-8 ${colors.icon} mx-auto mb-4`}",
        "line": 464,
        "context": "<Icon className={`w-8 h-8 ${colors.icon} mx-auto mb-4`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-3xl font-bold ${colors.text} mb-2`}",
        "line": 467,
        "context": "className={`text-3xl font-bold ${colors.text} mb-2`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.5 }}",
        "line": 468,
        "context": "initial={{ opacity: 0, scale: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: index * 0.1 }}",
        "line": 470,
        "context": "transition={{ duration: 0.6, delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.value}",
        "line": 472,
        "context": "{stat.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 476,
        "context": "{stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}",
        "line": 486,
        "context": "<span className={stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}",
        "line": 487,
        "context": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`bg-gradient-to-r ${colors.progress} h-2 rounded-full`}",
        "line": 496,
        "context": "className={`bg-gradient-to-r ${colors.progress} h-2 rounded-full`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${stat.progress.current}%` }}",
        "line": 498,
        "context": "animate={{ width: `${stat.progress.current}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 1.5, delay: index * 0.1 + 0.3 }}",
        "line": 499,
        "context": "transition={{ duration: 1.5, delay: index * 0.1 + 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.description}",
        "line": 504,
        "context": "{stat.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 550,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 551,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{action.id}",
        "line": 591,
        "context": "key={action.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 593,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 594,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 597,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleNavigate(action.href)}",
        "line": 598,
        "context": "onClick={() => handleNavigate(action.href)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-12 h-12 bg-${action.color}-100 dark:bg-${action.color}-900/30 rounded-xl flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform duration-200`}",
        "line": 600,
        "context": "<div className={`w-12 h-12 bg-${action.color}-100 dark:bg-${action.color}-900/30 rounded-xl flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform duration-200`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-6 h-6 text-${action.color}-600 dark:text-${action.color}-400`}",
        "line": 601,
        "context": "<Icon className={`w-6 h-6 text-${action.color}-600 dark:text-${action.color}-400`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{action.title}",
        "line": 604,
        "context": "<h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">{action.title}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{action.description}",
        "line": 605,
        "context": "<p className=\"text-xs text-gray-500 dark:text-gray-400\">{action.description}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{action.badge}",
        "line": 609,
        "context": "<span className=\"text-xs text-white font-bold\">{action.badge}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.id}",
        "line": 644,
        "context": "key={activity.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 647,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 650,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.title}",
        "line": 670,
        "context": "<h4 className=\"font-semibold text-gray-900 dark:text-white\">{activity.title}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.description}",
        "line": 671,
        "context": "<p className=\"text-sm text-gray-600 dark:text-gray-400\">{activity.description}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.timestamp}",
        "line": 676,
        "context": "{activity.timestamp}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.status}",
        "line": 680,
        "context": "{activity.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}",
        "line": 383,
        "context": "<div className={`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}",
        "line": 486,
        "context": "<span className={stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}",
        "line": 487,
        "context": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}%",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{ name: data.paramedis_name || 'Loading...' }",
        "line": 78,
        "context": "user: data.user || { name: data.paramedis_name || 'Loading...' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status} ${response.statusText}",
        "line": 89,
        "context": "throw new Error(`API Error: ${response.status} ${response.statusText}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.stats.attendance_today.message}",
        "line": 316,
        "context": "{dashboardStats.stats.attendance_today.message}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.stats.attendance_today.completed_shifts}/{dashboardStats.stats.attendance_today.total_shifts}",
        "line": 320,
        "context": "{dashboardStats.stats.attendance_today.completed_shifts}/{dashboardStats.stats.attendance_today.total_shifts}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 337,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 338,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.current}",
        "line": 356,
        "context": "{stats.attendance.current}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendance.change}",
        "line": 360,
        "context": "<span className=\"text-green-500 text-xs font-semibold\">+{stats.attendance.change}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 368,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 369,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.rank || '--'}",
        "line": 387,
        "context": "#{stats.performance.rank || '--'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performance.total || 0}",
        "line": 390,
        "context": "dari {stats.performance.total || 0}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 398,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 399,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{(stats.jaspel.thisMonth / 1000000).toFixed(1)}",
        "line": 417,
        "context": "{(stats.jaspel.thisMonth / 1000000).toFixed(1)}M",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-xs font-semibold ${stats.jaspel.change >= 0 ? 'text-green-500' : 'text-red-500'}`}",
        "line": 425,
        "context": "<span className={`text-xs font-semibold ${stats.jaspel.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.jaspel.change >= 0 ? '+' : ''}{stats.jaspel.change}",
        "line": 426,
        "context": "{stats.jaspel.change >= 0 ? '+' : ''}{stats.jaspel.change}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 435,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 436,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{(stats.dailyAverage / 1000).toFixed(0)}",
        "line": 454,
        "context": "{(stats.dailyAverage / 1000).toFixed(0)}K",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 468,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 469,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.user.work_location.radius_meters}",
        "line": 523,
        "context": "Radius: {dashboardStats.user.work_location.radius_meters}m",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.user.work_location.name}",
        "line": 538,
        "context": "{dashboardStats.user.work_location.name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{dashboardStats.user.work_location.address}",
        "line": 541,
        "context": "{dashboardStats.user.work_location.address}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 563,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 564,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 580,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 581,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{ latitude: number; longitude: number; accuracy?: number }",
        "line": 153,
        "context": "const getCurrentLocation = (): Promise<{ latitude: number; longitude: number; accuracy?: number }> => {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-xs font-semibold ${stats.jaspel.change >= 0 ? 'text-green-500' : 'text-red-500'}`}",
        "line": 425,
        "context": "<span className={`text-xs font-semibold ${stats.jaspel.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{stats.jaspel.change >= 0 ? '+' : ''}{stats.jaspel.change}",
        "line": 426,
        "context": "{stats.jaspel.change >= 0 ? '+' : ''}{stats.jaspel.change}%",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{isCheckingIn ? 'opacity-75' : ''}`}",
        "line": 480,
        "context": "} ${isCheckingIn ? 'opacity-75' : ''}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-5 h-5 text-gray-500 ${isRefreshing ? 'animate-spin' : ''}`}",
        "line": 532,
        "context": "<RefreshCw className={`w-5 h-5 text-gray-500 ${isRefreshing ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 57,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9, opacity: 0 }}",
        "line": 83,
        "context": "initial={{ scale: 0.9, opacity: 0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.1 }}",
        "line": 85,
        "context": "transition={{ delay: 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.totalPatients}",
        "line": 89,
        "context": "value={stats.totalPatients}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2 }}",
        "line": 101,
        "context": "transition={{ delay: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3 }}",
        "line": 120,
        "context": "transition={{ delay: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4 }}",
        "line": 135,
        "context": "transition={{ delay: 0.4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.todayActions}",
        "line": 139,
        "context": "<p className=\"text-2xl font-bold text-violet-400\">{stats.todayActions}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.pendingTasks}",
        "line": 144,
        "context": "<p className=\"text-2xl font-bold text-amber-400\">{stats.pendingTasks}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.urgentCases}",
        "line": 149,
        "context": "<p className=\"text-2xl font-bold text-rose-400\">{stats.urgentCases}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9, opacity: 0 }}",
        "line": 157,
        "context": "initial={{ scale: 0.9, opacity: 0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5 }}",
        "line": 159,
        "context": "transition={{ delay: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{(stats.monthlyEarnings / 1000000).toFixed(1)}",
        "line": 168,
        "context": "Rp {(stats.monthlyEarnings / 1000000).toFixed(1)}jt",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9, opacity: 0 }}",
        "line": 180,
        "context": "initial={{ scale: 0.9, opacity: 0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.6 }}",
        "line": 182,
        "context": "transition={{ delay: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendanceRate}",
        "line": 187,
        "context": "<span className=\"text-2xl font-bold text-primary-400\">{stats.attendanceRate}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${stats.attendanceRate}%` }}",
        "line": 194,
        "context": "animate={{ width: `${stats.attendanceRate}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 1, delay: 0.8 }}",
        "line": 195,
        "context": "transition={{ duration: 1, delay: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7 }}",
        "line": 207,
        "context": "transition={{ delay: 0.7 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.8 }}",
        "line": 216,
        "context": "transition={{ delay: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.9 + i * 0.1 }}",
        "line": 237,
        "context": "transition={{ delay: 0.9 + i * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.action}",
        "line": 249,
        "context": "<p className=\"text-sm font-medium\">{activity.action}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/DashboardModern.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.time}",
        "line": 250,
        "context": "<p className=\"text-xs text-gray-500\">{activity.time} WIB</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.random().toString(36).substr(2, 9)}",
        "line": 35,
        "context": "const [mapId] = useState(`leaflet-map-${Math.random().toString(36).substr(2, 9)}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 90,
        "context": "L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{workLocation.name}</strong><br>Lokasi Kerja<br>Radius: ${workLocation.radius}",
        "line": 111,
        "context": "workMarker.bindPopup(`<strong>${workLocation.name}</strong><br>Lokasi Kerja<br>Radius: ${workLocation.radius}m`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}<br>Lng: ${lng.toFixed(6)}<br>Akurasi: ${accuracy ? Math.round(accuracy) + 'm' : 'N/A'}",
        "line": 169,
        "context": "marker.bindPopup(`<strong>Lokasi Anda</strong><br>Lat: ${lat.toFixed(6)}<br>Lng: ${lng.toFixed(6)}<br>Akurasi: ${accuracy ? Math.round(accuracy) + 'm' : 'N/A'}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}, ${lng.toFixed(6)}",
        "line": 181,
        "context": "const address = data.display_name || `${lat.toFixed(6)}, ${lng.toFixed(6)}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}, ${lng.toFixed(6)}",
        "line": 213,
        "context": "📍 ${lat.toFixed(6)}, ${lng.toFixed(6)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(accuracy)}",
        "line": 214,
        "context": "📏 Akurasi: ${Math.round(accuracy)} meter`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "line": 327,
        "context": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(currentCoords.accuracy)}",
        "line": 330,
        "context": "(±{Math.round(currentCoords.accuracy)}m)",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{workLocation.radius}",
        "line": 352,
        "context": "Area merah menunjukkan radius {workLocation.radius}m dari lokasi kerja",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 7,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{lat: number; lng: number; accuracy?: number}",
        "line": 32,
        "context": "const [currentCoords, setCurrentCoords] = useState<{lat: number; lng: number; accuracy?: number} | null>(null);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/EnhancedLeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{lat.toFixed(6)}<br>Lng: ${lng.toFixed(6)}<br>Akurasi: ${accuracy ? Math.round(accuracy) + 'm' : 'N/A'}",
        "line": 169,
        "context": "marker.bindPopup(`<strong>Lokasi Anda</strong><br>Lat: ${lat.toFixed(6)}<br>Lng: ${lng.toFixed(6)}<br>Akurasi: ${accuracy ? Math.round(accuracy) + 'm' : 'N/A'}`);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{workLocation.name}",
        "line": 160,
        "context": "<p className=\"text-blue-100 text-sm mt-1\">{workLocation.name}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{distance < 1000 ? `${Math.round(distance)} m` : `${(distance/1000).toFixed(1)} km`}",
        "line": 189,
        "context": "{distance < 1000 ? `${Math.round(distance)} m` : `${(distance/1000).toFixed(1)} km`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{workLocation.radius}",
        "line": 196,
        "context": "<span className=\"text-sm font-medium\">{workLocation.radius} m</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{workLocation.latitude.toFixed(6)}, {workLocation.longitude.toFixed(6)}",
        "line": 215,
        "context": "{workLocation.latitude.toFixed(6)}, {workLocation.longitude.toFixed(6)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.latitude.toFixed(6)}, {currentLocation.longitude.toFixed(6)}",
        "line": 299,
        "context": "<div>GPS: {currentLocation.latitude.toFixed(6)}, {currentLocation.longitude.toFixed(6)}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(currentLocation.accuracy)}",
        "line": 301,
        "context": "<div>Akurasi: ±{Math.round(currentLocation.accuracy)} meter</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "objectInJSX",
        "match": "{new Date(currentLocation.timestamp).toLocaleTimeString('id-ID')}",
        "line": 303,
        "context": "<div>Update: {new Date(currentLocation.timestamp).toLocaleTimeString('id-ID')}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{distance < 1000 ? `${Math.round(distance)} m` : `${(distance/1000).toFixed(1)} km`}",
        "line": 189,
        "context": "{distance < 1000 ? `${Math.round(distance)} m` : `${(distance/1000).toFixed(1)} km`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{`absolute w-4 h-4 rounded-full ${isWithinGeofence ? 'bg-green-500' : 'bg-red-500'} shadow-lg`}",
        "line": 235,
        "context": "<div className={`absolute w-4 h-4 rounded-full ${isWithinGeofence ? 'bg-green-500' : 'bg-red-500'} shadow-lg`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{`absolute inset-0 rounded-full animate-ping ${isWithinGeofence ? 'bg-green-400' : 'bg-red-400'}`}",
        "line": 236,
        "context": "<div className={`absolute inset-0 rounded-full animate-ping ${isWithinGeofence ? 'bg-green-400' : 'bg-red-400'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/GeofencingMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{isWithinGeofence ? 'Check-in Sekarang' : 'Di Luar Area Kerja'}",
        "line": 282,
        "context": "<span>{isWithinGeofence ? 'Check-in Sekarang' : 'Di Luar Area Kerja'}</span>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{() => this.setState({ hasError: false, error: undefined })}",
        "line": 42,
        "context": "onClick={() => this.setState({ hasError: false, error: undefined })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.error.message}",
        "line": 55,
        "context": "{this.state.error.message}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{this.state.error.stack}",
        "line": 56,
        "context": "{this.state.error.stack}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -6.200000, lng: 106.816666 }",
        "line": 15,
        "context": "defaultLocation = { lat: -6.200000, lng: 106.816666 }, // Jakarta",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{import.meta.env.VITE_GOOGLE_MAPS_API_KEY || 'AIzaSyD_your_api_key_here'}",
        "line": 133,
        "context": "script.src = `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY || 'AIzaSyD_your_api_key_here'}&libraries=places`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsMobile.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}",
        "line": 349,
        "context": "<p><strong>Koordinat:</strong> {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/GoogleMapsMobile.tsx",
        "pattern": "conditionalObjects",
        "match": "{`google-map-container ${isLoading ? 'opacity-0' : 'opacity-100 transition-opacity'}`}",
        "line": 336,
        "context": "className={`google-map-container ${isLoading ? 'opacity-0' : 'opacity-100 transition-opacity'}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  success: boolean;\n  message: string;\n  data: {\n    jadwal_items: JadwalJagaItem[];\n    summary: JadwalJagaSummary;\n  }",
        "line": 28,
        "context": "interface JadwalJagaApiResponse {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [jadwalData, setJadwalData] = useState<JadwalJagaItem[]>([]);\n  const [summary, setSummary] = useState<JadwalJagaSummary>({\n    total_scheduled: 0,\n    total_completed: 0,\n    total_missed: 0,\n    count_scheduled: 0,\n    count_completed: 0,\n    count_missed: 0\n  }",
        "line": 50,
        "context": "export function JadwalJagaClean() {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const token = localStorage.getItem('token') || \n                   sessionStorage.getItem('token') || \n                   document.querySelector('meta[name=\"api-token\"]')?.getAttribute('content');\n\n      const params = new URLSearchParams();\n      if (month) params.append('month', month.toString());\n      if (year) params.append('year', year.toString());\n      params.append('page', page.toString());\n      params.append('per_page', itemsPerPage.toString());\n\n      const url = `/api/v2/dashboards/paramedis/jadwal-jaga/mobile-data?${params}",
        "line": 70,
        "context": "const fetchJadwalJagaData = async (month?: number, year?: number, page: number = 1) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        const jadwalItems = result.data.jadwal_items || [];\n        setJadwalData(jadwalItems);\n        setSummary(result.data.summary);\n        \n        if (result.pagination) {\n          setCurrentPage(result.pagination.current_page || 1);\n          setTotalPages(result.pagination.total_pages || Math.ceil(jadwalItems.length / itemsPerPage) || 1);\n          setTotalItems(result.pagination.total || jadwalItems.length || 0);\n        }",
        "line": 109,
        "context": "if (result.success) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{\n          setCurrentPage(1);\n          setTotalPages(Math.ceil(jadwalItems.length / itemsPerPage) || 1);\n          setTotalItems(jadwalItems.length || 0);\n        }",
        "line": 118,
        "context": "} else {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    const effectiveTotalItems = totalItems || jadwalData.length || 0;\n    const totalPages = Math.ceil(effectiveTotalItems / itemsPerPage) || 1;\n    \n    const paginationRange = useMemo(() => {\n      if (totalPages <= 1) return [1];\n      \n      const delta = 2;\n      const range = [];\n      const rangeWithDots = [];\n\n      for (let i = Math.max(2, currentPage - delta); i <= Math.min(totalPages - 1, currentPage + delta); i++) {\n        range.push(i);\n      }",
        "line": 191,
        "context": "const PaginationControls = () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{!isLoading && !error && jadwalData.length === 0 && (\n          <motion.div variants={item}",
        "line": 371,
        "context": "{!isLoading && !error && jadwalData.length === 0 && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{!isLoading && !error && jadwalData.length > 0 && (\n          <motion.div variants={item}",
        "line": 413,
        "context": "{!isLoading && !error && jadwalData.length > 0 && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwalData.map((scheduleItem) => (\n                      <motion.div\n                        key={scheduleItem.id}",
        "line": 424,
        "context": "{jadwalData.map((scheduleItem) => (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "line": 454,
        "context": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "directObjectRender",
        "match": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "line": 490,
        "context": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}",
        "line": 104,
        "context": "throw new Error(`HTTP error! status: ${response.status}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{ staggerChildren: 0.1 }",
        "line": 306,
        "context": "transition: { staggerChildren: 0.1 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.id}",
        "line": 426,
        "context": "key={scheduleItem.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{ duration: 0.2 }",
        "line": 431,
        "context": "transition: { duration: 0.2 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(scheduleItem.tanggal)}",
        "line": 443,
        "context": "{formatDate(scheduleItem.tanggal)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.waktu}",
        "line": 448,
        "context": "{scheduleItem.waktu}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(scheduleItem.status)} border-0 font-medium px-3 py-1`}",
        "line": 453,
        "context": "<Badge className={`${getStatusColor(scheduleItem.status)} border-0 font-medium px-3 py-1`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "line": 454,
        "context": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'completed' && 'Selesai'}",
        "line": 455,
        "context": "{scheduleItem.status === 'completed' && 'Selesai'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'missed' && 'Terlewat'}",
        "line": 456,
        "context": "{scheduleItem.status === 'missed' && 'Terlewat'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'cancelled' && 'Dibatalkan'}",
        "line": 457,
        "context": "{scheduleItem.status === 'cancelled' && 'Dibatalkan'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.lokasi}",
        "line": 465,
        "context": "{scheduleItem.lokasi}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.jenis}",
        "line": 472,
        "context": "Shift {scheduleItem.jenis}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "objectInJSX",
        "match": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "line": 490,
        "context": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isCurrentPage ? 'Current page, ' : 'Go to '}page ${pageNum}`}",
        "line": 259,
        "context": "aria-label={`${isCurrentPage ? 'Current page, ' : 'Go to '}page ${pageNum}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "pattern": "conditionalObjects",
        "match": "{isCurrentPage ? 'page' : undefined}",
        "line": 260,
        "context": "aria-current={isCurrentPage ? 'page' : undefined}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  success: boolean;\n  message: string;\n  data: {\n    jadwal_items: JadwalJagaItem[];\n    summary: JadwalJagaSummary;\n  }",
        "line": 28,
        "context": "interface JadwalJagaApiResponse {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [jadwalData, setJadwalData] = useState<JadwalJagaItem[]>([]);\n  const [summary, setSummary] = useState<JadwalJagaSummary>({\n    total_scheduled: 0,\n    total_completed: 0,\n    total_missed: 0,\n    count_scheduled: 0,\n    count_completed: 0,\n    count_missed: 0\n  }",
        "line": 50,
        "context": "export function JadwalJaga() {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      // Try multiple token sources\n      const token = localStorage.getItem('token') || \n                   sessionStorage.getItem('token') || \n                   document.querySelector('meta[name=\"api-token\"]')?.getAttribute('content');\n      \n      console.log('🔑 [JADWAL DEBUG] Token found:', !!token, token ? token.substring(0, 10) + '...' : 'null');\n\n      const params = new URLSearchParams();\n      if (month) params.append('month', month.toString());\n      if (year) params.append('year', year.toString());\n      params.append('page', page.toString());\n      params.append('per_page', itemsPerPage.toString());\n\n      // WORLD-CLASS: Try multiple endpoints for maximum reliability\n      const urls = [\n        `/paramedis/api/v2/jadwal-jaga/mobile-data?${params}",
        "line": 75,
        "context": "try {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n            console.log('📋 [JADWAL DEBUG] Setting data:', {\n              items: result.data.jadwal_items.length,\n              summary: result.data.summary,\n              endpoint_used: url,\n              pagination: result.pagination\n            }",
        "line": 154,
        "context": "if (result.success) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n              setCurrentPage(result.pagination.current_page || 1);\n              setTotalPages(result.pagination.total_pages || Math.ceil(jadwalItems.length / itemsPerPage) || 1);\n              setTotalItems(result.pagination.total || jadwalItems.length || 0);\n            }",
        "line": 166,
        "context": "if (result.pagination) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n              // Fallback when no pagination data from API\n              setCurrentPage(1);\n              setTotalPages(Math.ceil(jadwalItems.length / itemsPerPage) || 1);\n              setTotalItems(jadwalItems.length || 0);\n            }",
        "line": 170,
        "context": "} else {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n              totalItems: result.pagination?.total || jadwalItems.length,\n              totalPages: result.pagination?.total_pages || Math.ceil(jadwalItems.length / itemsPerPage),\n              currentPage: result.pagination?.current_page || 1,\n              itemsLength: jadwalItems.length\n            }",
        "line": 177,
        "context": "console.log('🔧 [PARAMEDIS PAGINATION FIX] Final state:', {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    // Use fallback for totalItems if API doesn't provide it\n    const effectiveTotalItems = totalItems || jadwalData.length || 0;\n    const totalPages = Math.ceil(effectiveTotalItems / itemsPerPage) || 1;\n    \n    const paginationRange = useMemo(() => {\n      const delta = 2; // Pages to show around current page\n      const range = [];\n      const rangeWithDots = [];\n\n      // Always show at least page 1, even if only one page\n      if (totalPages <= 1) {\n        return [1];\n      }",
        "line": 302,
        "context": "const PaginationControls = () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    isLoading,\n    error,\n    jadwalDataLength: jadwalData.length,\n    summary,\n    totalScheduled,\n    totalCompleted,\n    totalMissed\n  }",
        "line": 479,
        "context": "console.log('🎯 [JADWAL DEBUG] Render state:', {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{!isLoading && !error && jadwalData.length === 0 && (\n        <motion.div \n          variants={item}",
        "line": 583,
        "context": "{!isLoading && !error && jadwalData.length === 0 && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{!isLoading && !error && jadwalData.length > 0 && (\n        <motion.div variants={item}",
        "line": 682,
        "context": "{!isLoading && !error && jadwalData.length > 0 && (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{jadwalData.map((scheduleItem, index) => (\n                  <motion.div\n                    key={scheduleItem.id}",
        "line": 697,
        "context": "{jadwalData.map((scheduleItem, index) => (",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "line": 718,
        "context": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "directObjectRender",
        "match": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "line": 761,
        "context": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status} - ${errorText}",
        "line": 135,
        "context": "lastError = new Error(`HTTP error! status: ${response.status} - ${errorText}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 514,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 515,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 528,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 529,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: 0.6 }}",
        "line": 588,
        "context": "transition={{ duration: 0.6, delay: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 623,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 624,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 642,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 643,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 661,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 662,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.id}",
        "line": 699,
        "context": "key={scheduleItem.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, y: -1 }}",
        "line": 701,
        "context": "whileHover={{ scale: 1.01, y: -1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.99 }}",
        "line": 702,
        "context": "whileTap={{ scale: 0.99 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 703,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{formatTanggal(scheduleItem.tanggal)}",
        "line": 710,
        "context": "{formatTanggal(scheduleItem.tanggal)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.jenis} • {scheduleItem.waktu}",
        "line": 713,
        "context": "Shift {scheduleItem.jenis} • {scheduleItem.waktu}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(scheduleItem.status)} border font-medium`}",
        "line": 717,
        "context": "<Badge className={`${getStatusColor(scheduleItem.status)} border font-medium`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "line": 718,
        "context": "{scheduleItem.status === 'scheduled' && 'Dijadwalkan'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'completed' && 'Selesai'}",
        "line": 719,
        "context": "{scheduleItem.status === 'completed' && 'Selesai'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'missed' && 'Terlewat'}",
        "line": 720,
        "context": "{scheduleItem.status === 'missed' && 'Terlewat'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.status === 'cancelled' && 'Dibatalkan'}",
        "line": 721,
        "context": "{scheduleItem.status === 'cancelled' && 'Dibatalkan'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getShiftColor(scheduleItem.jenis)} text-xs font-semibold`}",
        "line": 723,
        "context": "<Badge className={`${getShiftColor(scheduleItem.jenis)} text-xs font-semibold`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.jenis.charAt(0).toUpperCase() + scheduleItem.jenis.slice(1)}",
        "line": 724,
        "context": "{scheduleItem.jenis.charAt(0).toUpperCase() + scheduleItem.jenis.slice(1)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.lokasi}",
        "line": 735,
        "context": "{scheduleItem.lokasi}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 740,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 741,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "objectInJSX",
        "match": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "line": 761,
        "context": "{!isLoading && !error && jadwalData.length > 0 && <PaginationControls />}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "debugStatements",
        "match": "console.log('📋 [JADWAL DEBUG] Setting data:', {\n              items: result.data.jadwal_items.length,\n              summary: result.data.summary,\n              endpoint_used: url,\n              pagination: result.pagination\n            })",
        "line": 155,
        "context": "console.log('📋 [JADWAL DEBUG] Setting data:', {",
        "suggestion": "Remove or move debug statements outside JSX"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "debugStatements",
        "match": "console.log('🔧 [PARAMEDIS PAGINATION FIX] Final state:', {\n              totalItems: result.pagination?.total || jadwalItems.length,\n              totalPages: result.pagination?.total_pages || Math.ceil(jadwalItems.length / itemsPerPage)",
        "line": 177,
        "context": "console.log('🔧 [PARAMEDIS PAGINATION FIX] Final state:', {",
        "suggestion": "Remove or move debug statements outside JSX"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "debugStatements",
        "match": "console.log('🎯 [JADWAL DEBUG] Render state:', {\n    isLoading,\n    error,\n    jadwalDataLength: jadwalData.length,\n    summary,\n    totalScheduled,\n    totalCompleted,\n    totalMissed\n  })",
        "line": 479,
        "context": "console.log('🎯 [JADWAL DEBUG] Render state:', {",
        "suggestion": "Remove or move debug statements outside JSX"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isCurrentPage ? 'Current page, ' : 'Go to '}page ${pageNum}`}",
        "line": 391,
        "context": "aria-label={`${isCurrentPage ? 'Current page, ' : 'Go to '}page ${pageNum}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "conditionalObjects",
        "match": "{isCurrentPage ? 'page' : undefined}",
        "line": 392,
        "context": "aria-current={isCurrentPage ? 'page' : undefined}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`}",
        "line": 524,
        "context": "<RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  // State management\n  const [jadwalData, setJadwalData] = useState<JadwalJagaItem[]>([]);\n  const [summary, setSummary] = useState<JadwalJagaSummary>({\n    total_scheduled: 0,\n    total_completed: 0,\n    total_missed: 0,\n    tingkat_penyelesaian: 0,\n    jam_kerja_bulan_ini: 0,\n    rata_rata_jam_per_hari: 0\n  }",
        "line": 73,
        "context": "}) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{\n        setError('Gagal memuat data jadwal jaga');\n      }",
        "line": 202,
        "context": "} catch (err) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    let filtered = jadwalData;\n    \n    // Filter by status\n    if (filterStatus !== 'all') {\n      filtered = filtered.filter(item => item.status === filterStatus);\n    }",
        "line": 213,
        "context": "const filteredData = useMemo(() => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{\n    switch (status) {\n      case 'scheduled': return 'Dijadwalkan';\n      case 'completed': return 'Selesai';\n      case 'missed': return 'Terlewat';\n      case 'cancelled': return 'Dibatalkan';\n      default: return status;\n    }",
        "line": 277,
        "context": "const getStatusLabel = (status: string) => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{[\n                  {\n                    title: 'Dijadwalkan',\n                    value: summary.total_scheduled,\n                    icon: Calendar,\n                    color: 'blue',\n                    description: 'Shift mendatang'\n                  }",
        "line": 389,
        "context": "{[",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "directObjectRender",
        "match": "{searchQuery ? 'Tidak ada jadwal yang sesuai dengan pencarian' : 'Belum ada jadwal jaga'}",
        "line": 559,
        "context": "{searchQuery ? 'Tidak ada jadwal yang sesuai dengan pencarian' : 'Belum ada jadwal jaga'}",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ staggerChildren: 0.1, delayChildren: 0.2 }",
        "line": 309,
        "context": "transition: { staggerChildren: 0.1, delayChildren: 0.2 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{summary.tingkat_penyelesaian}",
        "line": 406,
        "context": "value: `${summary.tingkat_penyelesaian}%`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{summary.jam_kerja_bulan_ini}",
        "line": 413,
        "context": "value: `${summary.jam_kerja_bulan_ini}h`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 429,
        "context": "key={stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -4 }}",
        "line": 431,
        "context": "whileHover={{ scale: 1.02, y: -4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 432,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-8 h-8 ${colorClasses.split(' ').find(c => c.includes('text-'))} mx-auto mb-4`}",
        "line": 436,
        "context": "<Icon className={`w-8 h-8 ${colorClasses.split(' ').find(c => c.includes('text-'))} mx-auto mb-4`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-3xl font-bold ${colorClasses.split(' ').find(c => c.includes('text-'))} mb-2`}",
        "line": 439,
        "context": "className={`text-3xl font-bold ${colorClasses.split(' ').find(c => c.includes('text-'))} mb-2`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.5 }}",
        "line": 440,
        "context": "initial={{ opacity: 0, scale: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: index * 0.1 }}",
        "line": 442,
        "context": "transition={{ duration: 0.6, delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.value}",
        "line": 444,
        "context": "{stat.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 448,
        "context": "{stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.description}",
        "line": 452,
        "context": "{stat.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{itemsPerPage.toString()} onValueChange={(value) => setItemsPerPage(Number(value))}",
        "line": 481,
        "context": "<Select value={itemsPerPage.toString()} onValueChange={(value) => setItemsPerPage(Number(value))}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filteredData.length}",
        "line": 496,
        "context": "{filteredData.length} jadwal",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.id}",
        "line": 567,
        "context": "key={scheduleItem.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.05 }}",
        "line": 571,
        "context": "transition={{ delay: index * 0.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, y: -2 }}",
        "line": 572,
        "context": "whileHover={{ scale: 1.01, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(scheduleItem.tanggal)}",
        "line": 579,
        "context": "{formatDate(scheduleItem.tanggal)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.waktu}",
        "line": 585,
        "context": "<span className=\"font-medium\">{scheduleItem.waktu}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getShiftColor(scheduleItem.jenis)} border-0 font-medium`}",
        "line": 588,
        "context": "<Badge className={`${getShiftColor(scheduleItem.jenis)} border-0 font-medium`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.jenis.charAt(0).toUpperCase() + scheduleItem.jenis.slice(1)}",
        "line": 589,
        "context": "Shift {scheduleItem.jenis.charAt(0).toUpperCase() + scheduleItem.jenis.slice(1)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.lokasi}",
        "line": 595,
        "context": "<span className=\"font-medium\">{scheduleItem.lokasi}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.pasien_count}",
        "line": 603,
        "context": "<span>{scheduleItem.pasien_count} pasien</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.procedures_count}",
        "line": 609,
        "context": "<span>{scheduleItem.procedures_count} tindakan</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{scheduleItem.keterangan}",
        "line": 617,
        "context": "{scheduleItem.keterangan}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(scheduleItem.status)} border flex items-center gap-1 font-medium px-3 py-1`}",
        "line": 623,
        "context": "<Badge className={`${getStatusColor(scheduleItem.status)} border flex items-center gap-1 font-medium px-3 py-1`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(scheduleItem.status)}",
        "line": 624,
        "context": "{getStatusIcon(scheduleItem.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusLabel(scheduleItem.status)}",
        "line": 625,
        "context": "{getStatusLabel(scheduleItem.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: Math.min(5, totalPages) }",
        "line": 656,
        "context": "{Array.from({ length: Math.min(5, totalPages) }, (_, i) => {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}",
        "line": 319,
        "context": "<div className={`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{searchQuery ? 'Tidak ada jadwal yang sesuai dengan pencarian' : 'Belum ada jadwal jaga'}",
        "line": 559,
        "context": "{searchQuery ? 'Tidak ada jadwal yang sesuai dengan pencarian' : 'Belum ada jadwal jaga'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentPage === pageNum ? \"default\" : \"ghost\"}",
        "line": 661,
        "context": "variant={currentPage === pageNum ? \"default\" : \"ghost\"}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onPageChange(Math.max(1, currentPage - 1))}",
        "line": 287,
        "context": "onClick={() => onPageChange(Math.max(1, currentPage - 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: totalPages }",
        "line": 299,
        "context": "{Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onPageChange(Math.min(totalPages, currentPage + 1))}",
        "line": 315,
        "context": "onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 371,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setActiveTab(tab.id)}",
        "line": 372,
        "context": "onClick={() => setActiveTab(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 382,
        "context": "<span className=\"text-sm font-medium\">{tab.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{jaspelJagaData.length}",
        "line": 431,
        "context": "<p className=\"text-gray-400 dark:text-gray-500 text-sm\">{jaspelJagaData.length} shift</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(totalJaspelJaga / jaspelJagaData.length)}",
        "line": 438,
        "context": "Rata-rata {formatCurrency(totalJaspelJaga / jaspelJagaData.length)}/shift",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{jaspelTindakanData.length}",
        "line": 450,
        "context": "<p className=\"text-gray-400 dark:text-gray-500 text-sm\">{jaspelTindakanData.length} tindakan</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(totalJaspelTindakan / jaspelTindakanData.length)}",
        "line": 457,
        "context": "Rata-rata {formatCurrency(totalJaspelTindakan / jaspelTindakanData.length)}/tindakan",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 509,
        "context": "<div key={item.id} className=\"bg-white/10 dark:bg-gray-800/20 backdrop-blur-xl rounded-2xl p-6 border border-white/20 dark:border-gray-700/30 hover:border-blue-400/50 dark:hover:border-blue-500/50 transition-all duration-300\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.tanggal}",
        "line": 516,
        "context": "<h3 className=\"text-lg font-bold text-white\">{item.tanggal}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.hari} • {item.shift}",
        "line": 517,
        "context": "<p className=\"text-blue-300 dark:text-blue-400\">{item.hari} • {item.shift}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusBadge(item.status)}",
        "line": 520,
        "context": "{getStatusBadge(item.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.waktu}",
        "line": 529,
        "context": "<p className=\"text-white font-medium\">{item.waktu}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.durasi}",
        "line": 530,
        "context": "<p className=\"text-gray-400 dark:text-gray-500 text-xs\">{item.durasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.lokasi}",
        "line": 538,
        "context": "<p className=\"text-white font-medium\">{item.lokasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.tarif)}",
        "line": 546,
        "context": "<p className=\"text-white font-medium\">{formatCurrency(item.tarif)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.bonus)}",
        "line": 547,
        "context": "<p className=\"text-green-400 dark:text-green-300 text-xs\">+{formatCurrency(item.bonus)} bonus</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.total)}",
        "line": 555,
        "context": "<p className=\"text-2xl font-bold text-emerald-400 dark:text-emerald-300\">{formatCurrency(item.total)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.id}",
        "line": 580,
        "context": "<div key={item.id} className=\"bg-white/10 dark:bg-gray-800/20 backdrop-blur-xl rounded-2xl p-6 border border-white/20 dark:border-gray-700/30 hover:border-purple-400/50 dark:hover:border-purple-500/50 transition-all duration-300\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.tindakan}",
        "line": 587,
        "context": "<h3 className=\"text-lg font-bold text-white\">{item.tindakan}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.kategori}",
        "line": 588,
        "context": "<p className=\"text-purple-300 dark:text-purple-400\">{item.kategori}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusBadge(item.status)}",
        "line": 591,
        "context": "{getStatusBadge(item.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.tanggal}",
        "line": 600,
        "context": "<p className=\"text-white font-medium\">{item.tanggal}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.durasi}",
        "line": 601,
        "context": "<p className=\"text-gray-400 dark:text-gray-500 text-xs\">{item.durasi}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.pasien}",
        "line": 609,
        "context": "<p className=\"text-white font-medium\">{item.pasien}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{`px-2 py-1 rounded-full text-xs font-medium border ${getKompleksitasColor(item.kompleksitas)}`}",
        "line": 617,
        "context": "<div className={`px-2 py-1 rounded-full text-xs font-medium border ${getKompleksitasColor(item.kompleksitas)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{item.kompleksitas}",
        "line": 618,
        "context": "{item.kompleksitas}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.tarif)}",
        "line": 627,
        "context": "<p className=\"text-white font-medium\">{formatCurrency(item.tarif)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.bonus)}",
        "line": 628,
        "context": "<p className=\"text-green-400 dark:text-green-300 text-xs\">+{formatCurrency(item.bonus)} bonus</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(item.total)}",
        "line": 636,
        "context": "<p className=\"text-2xl font-bold text-emerald-400 dark:text-emerald-300\">{formatCurrency(item.total)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "conditionalObjects",
        "match": "{isIpad ? 'text-3xl md:text-4xl lg:text-5xl' : 'text-2xl sm:text-3xl'}",
        "line": 350,
        "context": "${isIpad ? 'text-3xl md:text-4xl lg:text-5xl' : 'text-2xl sm:text-3xl'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Jaspel.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-cyan-200 dark:text-cyan-300 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}",
        "line": 354,
        "context": "<p className={`text-cyan-200 dark:text-cyan-300 ${isIpad ? 'text-lg md:text-xl' : 'text-base'}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6 }}",
        "line": 129,
        "context": "transition={{ duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 153,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 154,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(data.jaspel_monthly)}",
        "line": 175,
        "context": "{formatCurrency(data.jaspel_monthly)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{`flex items-center space-x-2 ${getGrowthColor(data.growth_percent)}`}",
        "line": 179,
        "context": "<div className={`flex items-center space-x-2 ${getGrowthColor(data.growth_percent)}`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{getGrowthIcon(data.growth_percent)}",
        "line": 180,
        "context": "{getGrowthIcon(data.growth_percent)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{data.growth_percent > 0 ? '+' : ''}{data.growth_percent}",
        "line": 182,
        "context": "{data.growth_percent > 0 ? '+' : ''}{data.growth_percent}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 192,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(data.pending_jaspel)}",
        "line": 202,
        "context": "{formatCurrency(data.pending_jaspel)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 208,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(data.approved_jaspel)}",
        "line": 218,
        "context": "{formatCurrency(data.approved_jaspel)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{data.period_info.month_progress}",
        "line": 228,
        "context": "<span className=\"text-white font-bold text-sm\">{data.period_info.month_progress}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${data.period_info.month_progress}%` }}",
        "line": 233,
        "context": "style={{ width: `${data.period_info.month_progress}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{data.period_info.days_passed}",
        "line": 237,
        "context": "<span>Hari ke-{data.period_info.days_passed}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{data.period_info.days_in_month}",
        "line": 238,
        "context": "<span>{data.period_info.days_in_month} hari total</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(data.daily_average || 0)}",
        "line": 248,
        "context": "{formatCurrency(data.daily_average || 0)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(data.jaspel_weekly || 0)}",
        "line": 254,
        "context": "{formatCurrency(data.jaspel_weekly || 0)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{data.paramedis_name}",
        "line": 265,
        "context": "Data untuk: <span className=\"text-white font-medium\">{data.paramedis_name}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5, delay: 0.2 }}",
        "line": 294,
        "context": "transition={{ duration: 0.5, delay: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{data.growth_percent}",
        "line": 303,
        "context": "<div className=\"text-white font-bold text-lg\">+{data.growth_percent}%</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5, delay: 0.3 }}",
        "line": 311,
        "context": "transition={{ duration: 0.5, delay: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(data.last_month_total)}",
        "line": 321,
        "context": "{formatCurrency(data.last_month_total)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-5 h-5 text-white ${isRefreshing ? 'animate-spin' : ''}`}",
        "line": 159,
        "context": "<RefreshCw className={`w-5 h-5 text-white ${isRefreshing ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JaspelDashboardCard.tsx",
        "pattern": "conditionalObjects",
        "match": "{data.growth_percent > 0 ? '+' : ''}{data.growth_percent}",
        "line": 182,
        "context": "{data.growth_percent > 0 ? '+' : ''}{data.growth_percent}%",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{response.status}",
        "line": 99,
        "context": "throw new Error(`HTTP error! status: ${response.status}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1, rotate: 5 }}",
        "line": 234,
        "context": "whileHover={{ scale: 1.1, rotate: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 235,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2 }}",
        "line": 244,
        "context": "transition={{ delay: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3 }}",
        "line": 252,
        "context": "transition={{ delay: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 260,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 261,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ animationDelay: '0.5s' }}",
        "line": 327,
        "context": "<div className=\"absolute top-1/2 left-1/2 w-40 h-40 bg-white/5 rounded-full -translate-x-1/2 -translate-y-1/2 animate-pulse\" style={{ animationDelay: '0.5s' }} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ type: \"spring\", stiffness: 200, delay: 0.2 }}",
        "line": 335,
        "context": "transition={{ type: \"spring\", stiffness: 200, delay: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1, rotate: 10 }}",
        "line": 340,
        "context": "whileHover={{ scale: 1.1, rotate: 10 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4 }}",
        "line": 357,
        "context": "transition={{ delay: 0.4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 368,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 369,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: \"easeOut\" }}",
        "line": 401,
        "context": "transition={{ duration: 0.3, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6 }}",
        "line": 412,
        "context": "transition={{ duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.1, type: \"spring\", stiffness: 200 }}",
        "line": 421,
        "context": "transition={{ delay: 0.1, type: \"spring\", stiffness: 200 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.total_paid)}",
        "line": 423,
        "context": "{formatCurrency(summary.total_paid)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5, duration: 1 }}",
        "line": 433,
        "context": "transition={{ delay: 0.5, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: \"easeOut\" }}",
        "line": 450,
        "context": "transition={{ duration: 0.3, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.2 }}",
        "line": 460,
        "context": "whileHover={{ scale: 1.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 461,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2, type: \"spring\", stiffness: 200 }}",
        "line": 470,
        "context": "transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.total_pending)}",
        "line": 472,
        "context": "{formatCurrency(summary.total_pending)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.6, duration: 1 }}",
        "line": 482,
        "context": "transition={{ delay: 0.6, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: \"easeOut\" }}",
        "line": 499,
        "context": "transition={{ duration: 0.3, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 510,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, type: \"spring\", stiffness: 200 }}",
        "line": 519,
        "context": "transition={{ delay: 0.3, type: \"spring\", stiffness: 200 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(summary.total_rejected)}",
        "line": 521,
        "context": "{formatCurrency(summary.total_rejected)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7, duration: 1 }}",
        "line": 531,
        "context": "transition={{ delay: 0.7, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'all', label: 'Semua', count: jaspelData.length, color: 'blue', icon: '📊' }",
        "line": 549,
        "context": "{ key: 'all', label: 'Semua', count: jaspelData.length, color: 'blue', icon: '📊' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'pending', label: 'Pending', count: summary.count_pending, color: 'amber', icon: '⏳' }",
        "line": 550,
        "context": "{ key: 'pending', label: 'Pending', count: summary.count_pending, color: 'amber', icon: '⏳' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'paid', label: 'Tervalidasi', count: summary.count_paid, color: 'green', icon: '✅' }",
        "line": 551,
        "context": "{ key: 'paid', label: 'Tervalidasi', count: summary.count_paid, color: 'green', icon: '✅' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ key: 'rejected', label: 'Ditolak', count: summary.count_rejected, color: 'red', icon: '❌' }",
        "line": 552,
        "context": "{ key: 'rejected', label: 'Ditolak', count: summary.count_rejected, color: 'red', icon: '❌' }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filter.key}",
        "line": 555,
        "context": "key={filter.key}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 557,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 558,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{() => setSelectedFilter(filter.key as any)}",
        "line": 563,
        "context": "onClick={() => setSelectedFilter(filter.key as any)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filter.color}-500 text-white shadow-lg shadow-${filter.color}",
        "line": 566,
        "context": "? `bg-${filter.color}-500 text-white shadow-lg shadow-${filter.color}-500/30 scale-105`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filter.icon}",
        "line": 572,
        "context": "<span className=\"text-sm\">{filter.icon}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filter.count}",
        "line": 573,
        "context": "<span className=\"text-xs font-bold\">{filter.count}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filter.label}",
        "line": 575,
        "context": "<span className=\"text-xs\">{filter.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{dataItem.id}",
        "line": 592,
        "context": "key={dataItem.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: 50, scale: 0.9 }}",
        "line": 594,
        "context": "initial={{ opacity: 0, y: 50, scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: -50, scale: 0.9 }}",
        "line": 596,
        "context": "exit={{ opacity: 0, y: -50, scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{dataItem.jenis}",
        "line": 629,
        "context": "{dataItem.jenis}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{dataItem.keterangan}",
        "line": 633,
        "context": "{dataItem.keterangan}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1, rotate: 5 }}",
        "line": 639,
        "context": "whileHover={{ scale: 1.1, rotate: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 640,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusLabel(dataItem.status)}",
        "line": 647,
        "context": "{getStatusLabel(dataItem.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 656,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(dataItem.tanggal)}",
        "line": 662,
        "context": "{formatDate(dataItem.tanggal)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 669,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(dataItem.jumlah)}",
        "line": 671,
        "context": "{formatCurrency(dataItem.jumlah)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.2, rotate: 10 }}",
        "line": 675,
        "context": "whileHover={{ scale: 1.2, rotate: 10 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 676,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3 }}",
        "line": 695,
        "context": "transition={{ delay: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{dataItem.validated_by}",
        "line": 699,
        "context": "<span>Divalidasi oleh {dataItem.validated_by}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5 + (index * 0.1), duration: 1 }}",
        "line": 718,
        "context": "transition={{ delay: 0.5 + (index * 0.1), duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`designer-container theme-medical ${darkMode ? 'designer-theme-dark' : ''}`}",
        "line": 200,
        "context": "<div className={`designer-container theme-medical ${darkMode ? 'designer-theme-dark' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/JaspelMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-5 h-5 ${isLoading ? 'animate-spin' : ''}`}",
        "line": 271,
        "context": "<RefreshCw className={`w-5 h-5 ${isLoading ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 200,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 201,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 230,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 231,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalHadir}",
        "line": 234,
        "context": "<div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{monthlyStats.totalHadir}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 240,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 241,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalTidakTerpenuhi}",
        "line": 244,
        "context": "<div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">{monthlyStats.totalTidakTerpenuhi}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 250,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 251,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalTidakHadir}",
        "line": 254,
        "context": "<div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">{monthlyStats.totalTidakHadir}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.tingkatKehadiran}",
        "line": 267,
        "context": "`${monthlyStats.tingkatKehadiran}%`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${monthlyStats.tingkatKehadiran}%` }}",
        "line": 275,
        "context": "animate={{ width: `${monthlyStats.tingkatKehadiran}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 1.5, delay: 0.5 }}",
        "line": 276,
        "context": "transition={{ duration: 1.5, delay: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.totalJamKerja}",
        "line": 294,
        "context": "<p className=\"text-xl font-semibold\">{monthlyStats.totalJamKerja}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.rataRataJamPerHari}",
        "line": 308,
        "context": "<p className=\"text-xl font-semibold\">{monthlyStats.rataRataJamPerHari}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{perPage.toString()} onValueChange={handlePerPageChange}",
        "line": 336,
        "context": "<Select value={perPage.toString()} onValueChange={handlePerPageChange}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 368,
        "context": "key={record.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, y: -1 }}",
        "line": 370,
        "context": "whileHover={{ scale: 1.01, y: -1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 371,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.hari}",
        "line": 378,
        "context": "<h4 className=\"text-base font-semibold text-high-contrast\">{record.hari}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(record.tanggal)}",
        "line": 379,
        "context": "<span className=\"text-sm text-muted-foreground font-medium\">{formatDate(record.tanggal)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.shift}",
        "line": 382,
        "context": "<span>{record.shift}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.lokasi}",
        "line": 384,
        "context": "<span>{record.lokasi}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(record.status)} border flex items-center gap-1 font-medium`}",
        "line": 387,
        "context": "<Badge className={`${getStatusColor(record.status)} border flex items-center gap-1 font-medium`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(record.status)}",
        "line": 388,
        "context": "{getStatusIcon(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'present' && 'Hadir'}",
        "line": 389,
        "context": "{record.status === 'present' && 'Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'tidak_terpenuhi' && 'Tidak Terpenuhi'}",
        "line": 390,
        "context": "{record.status === 'tidak_terpenuhi' && 'Tidak Terpenuhi'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.status === 'absent' && 'Tidak Hadir'}",
        "line": 391,
        "context": "{record.status === 'absent' && 'Tidak Hadir'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.masuk}",
        "line": 402,
        "context": "<p className=\"font-semibold text-high-contrast\">{record.masuk}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.keluar}",
        "line": 412,
        "context": "<p className=\"font-semibold text-high-contrast\">{record.keluar}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{record.totalJam}",
        "line": 422,
        "context": "<p className=\"font-semibold text-high-contrast\">{record.totalJam}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 438,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{pagination.from || 0}-{pagination.to || 0} dari {pagination.total}",
        "line": 442,
        "context": "<span>{pagination.from || 0}-{pagination.to || 0} dari {pagination.total}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{currentPage}/{pagination.last_page}",
        "line": 443,
        "context": "<span>Hal {currentPage}/{pagination.last_page}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: Math.min(3, pagination.last_page) }",
        "line": 461,
        "context": "{Array.from({ length: Math.min(3, pagination.last_page) }, (_, i) => {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Laporan.tsx",
        "pattern": "objectInJSX",
        "match": "{currentPage === pagination.last_page || loadingAttendance}",
        "line": 497,
        "context": "disabled={currentPage === pagination.last_page || loadingAttendance}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ week: 'Week 1', attendance_rate: 85, average_hours: 8.2, overtime_hours: 2, late_count: 1 }",
        "line": 235,
        "context": "{ week: 'Week 1', attendance_rate: 85, average_hours: 8.2, overtime_hours: 2, late_count: 1 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ week: 'Week 2', attendance_rate: 90, average_hours: 7.8, overtime_hours: 4, late_count: 0 }",
        "line": 236,
        "context": "{ week: 'Week 2', attendance_rate: 90, average_hours: 7.8, overtime_hours: 4, late_count: 0 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ week: 'Week 3', attendance_rate: 88, average_hours: 8.0, overtime_hours: 3, late_count: 2 }",
        "line": 237,
        "context": "{ week: 'Week 3', attendance_rate: 88, average_hours: 8.0, overtime_hours: 3, late_count: 2 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ week: 'Week 4', attendance_rate: 92, average_hours: 7.9, overtime_hours: 3, late_count: 0 }",
        "line": 238,
        "context": "{ week: 'Week 4', attendance_rate: 92, average_hours: 7.9, overtime_hours: 3, late_count: 0 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ staggerChildren: 0.1, delayChildren: 0.2 }",
        "line": 354,
        "context": "transition: { staggerChildren: 0.1, delayChildren: 0.2 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.attendance_rate}",
        "line": 499,
        "context": "value: `${monthlyStats.attendance_rate}%`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 2.3, direction: 'up' as const }",
        "line": 500,
        "context": "change: { value: 2.3, direction: 'up' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.present_days}/${monthlyStats.total_days}",
        "line": 503,
        "context": "description: `${monthlyStats.present_days}/${monthlyStats.total_days} hari`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.punctuality_rate}",
        "line": 507,
        "context": "value: `${monthlyStats.punctuality_rate}%`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 1.2, direction: 'up' as const }",
        "line": 508,
        "context": "change: { value: 1.2, direction: 'up' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.late_days}",
        "line": 511,
        "context": "description: `${monthlyStats.late_days} terlambat`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.total_work_hours}",
        "line": 515,
        "context": "value: `${monthlyStats.total_work_hours}h`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 5.1, direction: 'up' as const }",
        "line": 516,
        "context": "change: { value: 5.1, direction: 'up' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.average_work_hours}",
        "line": 519,
        "context": "description: `Avg ${monthlyStats.average_work_hours}h/hari`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{monthlyStats.overtime_hours}",
        "line": 523,
        "context": "value: `${monthlyStats.overtime_hours}h`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 2.8, direction: 'down' as const }",
        "line": 524,
        "context": "change: { value: 2.8, direction: 'down' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 540,
        "context": "key={stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -4 }}",
        "line": 542,
        "context": "whileHover={{ scale: 1.02, y: -4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 543,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-8 h-8 ${colorClasses.split(' ').find(c => c.includes('text-'))} mx-auto mb-4`}",
        "line": 547,
        "context": "<Icon className={`w-8 h-8 ${colorClasses.split(' ').find(c => c.includes('text-'))} mx-auto mb-4`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-3xl font-bold ${colorClasses.split(' ').find(c => c.includes('text-'))} mb-2`}",
        "line": 550,
        "context": "className={`text-3xl font-bold ${colorClasses.split(' ').find(c => c.includes('text-'))} mb-2`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.5 }}",
        "line": 551,
        "context": "initial={{ opacity: 0, scale: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: index * 0.1 }}",
        "line": 553,
        "context": "transition={{ duration: 0.6, delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.value}",
        "line": 555,
        "context": "{stat.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 559,
        "context": "{stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}",
        "line": 568,
        "context": "<span className={stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}",
        "line": 569,
        "context": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.description}",
        "line": 574,
        "context": "{stat.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{filteredReports.length}",
        "line": 626,
        "context": "{filteredReports.length} records",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.id}",
        "line": 652,
        "context": "key={report.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2, delay: index * 0.05 }}",
        "line": 657,
        "context": "transition={{ duration: 0.2, delay: index * 0.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(report.date)}",
        "line": 663,
        "context": "{formatDate(report.date)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.day}",
        "line": 666,
        "context": "{report.day}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(report.status)} border flex items-center gap-1 font-medium`}",
        "line": 672,
        "context": "<Badge className={`${getStatusColor(report.status)} border flex items-center gap-1 font-medium`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(report.status)}",
        "line": 673,
        "context": "{getStatusIcon(report.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusLabel(report.status)}",
        "line": 674,
        "context": "{getStatusLabel(report.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.shift_type}",
        "line": 678,
        "context": "Shift {report.shift_type}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.overtime_hours}",
        "line": 683,
        "context": "+{report.overtime_hours}h OT",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.check_in_time || '-'}",
        "line": 692,
        "context": "{report.check_in_time || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.check_out_time || '-'}",
        "line": 699,
        "context": "{report.check_out_time || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.work_duration || '-'}",
        "line": 706,
        "context": "{report.work_duration || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.location}",
        "line": 713,
        "context": "{report.location}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.notes}",
        "line": 723,
        "context": "<strong>Catatan:</strong> {report.notes}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{report.supervisor_notes}",
        "line": 731,
        "context": "<strong>Catatan Supervisor:</strong> {report.supervisor_notes}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{week.week}",
        "line": 777,
        "context": "key={week.week}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 781,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{week.week}",
        "line": 783,
        "context": "<h4 className=\"font-bold text-gray-900 dark:text-white mb-3\">{week.week}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{week.attendance_rate}",
        "line": 787,
        "context": "<p className=\"font-bold text-emerald-600 dark:text-emerald-400\">{week.attendance_rate}%</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{week.average_hours}",
        "line": 791,
        "context": "<p className=\"font-bold text-blue-600 dark:text-blue-400\">{week.average_hours}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{week.overtime_hours}",
        "line": 795,
        "context": "<p className=\"font-bold text-amber-600 dark:text-amber-400\">{week.overtime_hours}h</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{week.late_count}",
        "line": 799,
        "context": "<p className=\"font-bold text-red-600 dark:text-red-400\">{week.late_count}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Efficiency', value: performanceMetrics.efficiency_score, color: 'emerald' }",
        "line": 816,
        "context": "{ label: 'Efficiency', value: performanceMetrics.efficiency_score, color: 'emerald' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Quality', value: performanceMetrics.quality_rating, color: 'blue' }",
        "line": 817,
        "context": "{ label: 'Quality', value: performanceMetrics.quality_rating, color: 'blue' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Teamwork', value: performanceMetrics.teamwork_score, color: 'purple' }",
        "line": 818,
        "context": "{ label: 'Teamwork', value: performanceMetrics.teamwork_score, color: 'purple' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Professional', value: performanceMetrics.professionalism_rating, color: 'amber' }",
        "line": 819,
        "context": "{ label: 'Professional', value: performanceMetrics.professionalism_rating, color: 'amber' },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Overall', value: performanceMetrics.overall_performance, color: 'indigo' }",
        "line": 820,
        "context": "{ label: 'Overall', value: performanceMetrics.overall_performance, color: 'indigo' }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{metric.label}",
        "line": 823,
        "context": "key={metric.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 824,
        "context": "initial={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 826,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-center p-4 bg-gradient-to-br from-${metric.color}-50 to-${metric.color}-100 dark:from-${metric.color}-950/50 dark:to-${metric.color}-900/30 border border-${metric.color}-200 dark:border-${metric.color}-700`}",
        "line": 828,
        "context": "<Card className={`text-center p-4 bg-gradient-to-br from-${metric.color}-50 to-${metric.color}-100 dark:from-${metric.color}-950/50 dark:to-${metric.color}-900/30 border border-${metric.color}-200 dark:border-${metric.color}-700`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-3xl font-bold text-${metric.color}-600 dark:text-${metric.color}-400 mb-2`}",
        "line": 829,
        "context": "<div className={`text-3xl font-bold text-${metric.color}-600 dark:text-${metric.color}-400 mb-2`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{metric.value}",
        "line": 830,
        "context": "{metric.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{metric.label}",
        "line": 833,
        "context": "{metric.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 857,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 }}",
        "line": 882,
        "context": "transition={{ delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}",
        "line": 385,
        "context": "<div className={`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{exportLoading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <Download className=\"w-4 h-4\" />}",
        "line": 447,
        "context": "{exportLoading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <Download className=\"w-4 h-4\" />}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}",
        "line": 568,
        "context": "<span className={stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/LaporanPresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}",
        "line": 569,
        "context": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}%",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.random().toString(36).substr(2, 9)}",
        "line": 32,
        "context": "const [mapId] = useState(`leaflet-map-${Math.random().toString(36).substr(2, 9)}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 94,
        "context": "L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}, ${lng.toFixed(6)}",
        "line": 166,
        "context": "const address = data.display_name || `${lat.toFixed(6)}, ${lng.toFixed(6)}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{lat.toFixed(6)}, ${lng.toFixed(6)}\\n📏 Akurasi: ${Math.round(accuracy)}",
        "line": 198,
        "context": "alert(`✅ Lokasi berhasil dideteksi!\\n📍 ${lat.toFixed(6)}, ${lng.toFixed(6)}\\n📏 Akurasi: ${Math.round(accuracy)} meter`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LeafletMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "line": 276,
        "context": "{currentCoords.lat.toFixed(6)}, {currentCoords.lng.toFixed(6)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/LeafletMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "directObjectRender",
        "match": "{\n      icon: Stethoscope,\n      title: 'Kelola Jadwal Jaga',\n      description: 'Atur dan pantau jadwal kerja dengan mudah'\n    }",
        "line": 81,
        "context": "{",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.6, type: \"spring\" }}",
        "line": 139,
        "context": "transition={{ delay: 0.3, duration: 0.6, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, duration: 0.6 }}",
        "line": 149,
        "context": "transition={{ delay: 0.4, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5, duration: 0.6 }}",
        "line": 158,
        "context": "transition={{ delay: 0.5, duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.6 }}",
        "line": 172,
        "context": "transition={{ delay: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7 }}",
        "line": 201,
        "context": "transition={{ delay: 0.7 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setEmail(e.target.value)}",
        "line": 208,
        "context": "onChange={(e) => setEmail(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.8 }}",
        "line": 219,
        "context": "transition={{ delay: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setPassword(e.target.value)}",
        "line": 227,
        "context": "onChange={(e) => setPassword(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.9 }}",
        "line": 252,
        "context": "transition={{ delay: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 1.0 }}",
        "line": 286,
        "context": "transition={{ delay: 1.0 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -2 }}",
        "line": 312,
        "context": "whileHover={{ scale: 1.02, y: -2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 313,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.title}",
        "line": 320,
        "context": "<h4 className=\"text-sm mb-1\">{feature.title}</h4>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "objectInJSX",
        "match": "{feature.description}",
        "line": 322,
        "context": "{feature.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "pattern": "conditionalObjects",
        "match": "{showPassword ? 'text' : 'password'}",
        "line": 225,
        "context": "type={showPassword ? 'text' : 'password'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [activeTab, setActiveTab] = useState('presensi');\n\n  const tabs = [\n    { id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga }",
        "line": 20,
        "context": "export function MainApp({ onLogout, userData }: MainAppProps) {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.95 }}",
        "line": 40,
        "context": "initial={{ opacity: 0, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 42,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, ease: \"easeOut\" }}",
        "line": 52,
        "context": "transition={{ duration: 0.6, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, duration: 0.5, type: \"spring\" }}",
        "line": 65,
        "context": "transition={{ delay: 0.3, duration: 0.5, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 71,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 72,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 79,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 80,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 88,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 89,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, duration: 0.5 }}",
        "line": 107,
        "context": "transition={{ delay: 0.4, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: \"easeInOut\" }}",
        "line": 129,
        "context": "transition={{ duration: 0.3, ease: \"easeInOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}",
        "line": 140,
        "context": "transition={{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 152,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{() => handleTabChange(tab.id)}",
        "line": 153,
        "context": "onClick={() => handleTabChange(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 155,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 156,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1 + 0.3, duration: 0.4 }}",
        "line": 159,
        "context": "transition={{ delay: index * 0.1 + 0.3, duration: 0.4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 167,
        "context": "initial={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 169,
        "context": "exit={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2, ease: \"easeInOut\" }}",
        "line": 170,
        "context": "transition={{ duration: 0.2, ease: \"easeInOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 182,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 197,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 199,
        "context": "{tab.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -6.200000, lng: 106.816666 }",
        "line": 33,
        "context": "center: { lat: -6.200000, lng: 106.816666 }, // Jakarta",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -6.200000, lng: 106.816666 }",
        "line": 47,
        "context": "position: { lat: -6.200000, lng: 106.816666 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{import.meta.env.VITE_GOOGLE_MAPS_API_KEY}",
        "line": 135,
        "context": "script.src = `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}&libraries=places`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 280,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 281,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/MobileGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "line": 259,
        "context": "className={`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{s}.tile.openstreetmap.org/{z}/{x}/{y}",
        "line": 60,
        "context": "L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 105,
        "context": "setCurrentLocation({ lat: -7.808758, lng: 111.962646 });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 107,
        "context": "onLocationSelect({ lat: -7.808758, lng: 111.962646 });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{() => window.location.reload()}",
        "line": 310,
        "context": "onClick={() => window.location.reload()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 326,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 327,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 403,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 404,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 13,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/OpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "line": 384,
        "context": "className={`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{ error: e.message }",
        "line": 202,
        "context": "debugInfo.methods.standard = { error: e.message };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{ error: e.message }",
        "line": 230,
        "context": "debugInfo.methods.directToday = { error: e.message };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{ error: e.message }",
        "line": 244,
        "context": "debugInfo.methods.serverDuration = { error: e.message };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{ error: e.message }",
        "line": 266,
        "context": "debugInfo.methods.manualToday = { error: e.message };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}",
        "line": 292,
        "context": "const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{result.data.time_in}\\nLokasi: ${checkinLocation?.address || 'Koordinat: ' + checkinLocation?.lat + ', ' + checkinLocation?.lng}",
        "line": 477,
        "context": "alert(`Check-in berhasil!\\nWaktu: ${result.data.time_in}\\nLokasi: ${checkinLocation?.address || 'Koordinat: ' + checkinLocation?.lat + ', ' + checkinLocation?.lng}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{result.data.time_out}\\nTotal Jam Kerja: ${workDuration}\\nLokasi: ${checkoutLocation?.address || 'Koordinat: ' + checkoutLocation?.lat + ', ' + checkoutLocation?.lng}",
        "line": 558,
        "context": "alert(`Check-out berhasil!\\nWaktu: ${result.data.time_out}\\nTotal Jam Kerja: ${workDuration}\\nLokasi: ${checkoutLocation?.address || 'Koordinat: ' + checkoutLocation?.lat + ', ' + checkoutLocation?.lng}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: [1, 1.02, 1] }}",
        "line": 685,
        "context": "animate={{ scale: [1, 1.02, 1] }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3 }}",
        "line": 705,
        "context": "transition={{ delay: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.9, y: 20 }}",
        "line": 716,
        "context": "initial={{ opacity: 0, scale: 0.9, y: 20 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{workDurationData.isActive ? 'Jam Kerja Live' : 'Total Jam Kerja'}",
        "line": 767,
        "context": "{workDurationData.isActive ? 'Jam Kerja Live' : 'Total Jam Kerja'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: [0.7, 1, 0.7] }}",
        "line": 827,
        "context": "animate={{ opacity: [0.7, 1, 0.7] }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{methodEmojis[currentData.debugInfo?.result?.successfulMethod || 'none']} {methodNames[currentData.debugInfo?.result?.successfulMethod || 'none']}",
        "line": 856,
        "context": "{methodEmojis[currentData.debugInfo?.result?.successfulMethod || 'none']} {methodNames[currentData.debugInfo?.result?.successfulMethod || 'none']}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.9 }}",
        "line": 869,
        "context": "initial={{ opacity: 0, scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: [1, 1.02, 1] }}",
        "line": 877,
        "context": "animate={{ scale: [1, 1.02, 1] }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 890,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 891,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 904,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 905,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStatus.message}",
        "line": 1038,
        "context": "Status: {attendanceStatus.message}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{checkinLocation.address || `${checkinLocation.lat.toFixed(6)}, ${checkinLocation.lng.toFixed(6)}`}",
        "line": 1087,
        "context": "<p><strong>Check-in:</strong> {checkinLocation.address || `${checkinLocation.lat.toFixed(6)}, ${checkinLocation.lng.toFixed(6)}`}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(checkinLocation.accuracy)}",
        "line": 1089,
        "context": "<p><strong>Akurasi:</strong> {Math.round(checkinLocation.accuracy)} meter</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{checkoutLocation.address || `${checkoutLocation.lat.toFixed(6)}, ${checkoutLocation.lng.toFixed(6)}`}",
        "line": 1095,
        "context": "<p><strong>Check-out:</strong> {checkoutLocation.address || `${checkoutLocation.lat.toFixed(6)}, ${checkoutLocation.lng.toFixed(6)}`}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round(checkoutLocation.accuracy)}",
        "line": 1097,
        "context": "<p><strong>Akurasi:</strong> {Math.round(checkoutLocation.accuracy)} meter</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 1113,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, x: 5 }}",
        "line": 1136,
        "context": "whileHover={{ scale: 1.01, x: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.99 }}",
        "line": 1137,
        "context": "whileTap={{ scale: 0.99 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 1138,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.01, x: 5 }}",
        "line": 1149,
        "context": "whileHover={{ scale: 1.01, x: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.99 }}",
        "line": 1150,
        "context": "whileTap={{ scale: 0.99 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 1151,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{lat: number; lng: number; accuracy?: number; address?: string}",
        "line": 35,
        "context": "const [checkinLocation, setCheckinLocation] = useState<{lat: number; lng: number; accuracy?: number; address?: string} | null>(null);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{lat: number; lng: number; accuracy?: number; address?: string}",
        "line": 36,
        "context": "const [checkoutLocation, setCheckoutLocation] = useState<{lat: number; lng: number; accuracy?: number; address?: string} | null>(null);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{1,2}):(\\d{2})(?::(\\d{2}",
        "line": 253,
        "context": "const match = timeStr.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?/);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{result.data.time_in}\\nLokasi: ${checkinLocation?.address || 'Koordinat: ' + checkinLocation?.lat + ', ' + checkinLocation?.lng}",
        "line": 477,
        "context": "alert(`Check-in berhasil!\\nWaktu: ${result.data.time_in}\\nLokasi: ${checkinLocation?.address || 'Koordinat: ' + checkinLocation?.lat + ', ' + checkinLocation?.lng}`);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{result.data.time_out}\\nTotal Jam Kerja: ${workDuration}\\nLokasi: ${checkoutLocation?.address || 'Koordinat: ' + checkoutLocation?.lat + ', ' + checkoutLocation?.lng}",
        "line": 558,
        "context": "alert(`Check-out berhasil!\\nWaktu: ${result.data.time_out}\\nTotal Jam Kerja: ${workDuration}\\nLokasi: ${checkoutLocation?.address || 'Koordinat: ' + checkoutLocation?.lat + ', ' + checkoutLocation?.lng}`);",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{lat: number; lng: number; accuracy?: number; address?: string}",
        "line": 614,
        "context": "const handleLocationSelect = (location: {lat: number; lng: number; accuracy?: number; address?: string}) => {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{workDurationData.isActive ? 'Jam Kerja Live' : 'Total Jam Kerja'}",
        "line": 767,
        "context": "{workDurationData.isActive ? 'Jam Kerja Live' : 'Total Jam Kerja'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{isLoading ? 'Processing...' : 'Check In'}",
        "line": 899,
        "context": "{isLoading ? 'Processing...' : 'Check In'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{isLoading ? 'Processing...' : 'Check Out'}",
        "line": 913,
        "context": "{isLoading ? 'Processing...' : 'Check Out'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{showMap ? 'Sembunyikan' : 'Tampilkan'}",
        "line": 1060,
        "context": "{showMap ? 'Sembunyikan' : 'Tampilkan'} Peta",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "pattern": "conditionalObjects",
        "match": "{attendanceStatus?.can_check_in ? 'Lokasi Check-in' : 'Lokasi Check-out'}",
        "line": 1071,
        "context": "{attendanceStatus?.can_check_in ? 'Lokasi Check-in' : 'Lokasi Check-out'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ staggerChildren: 0.1, delayChildren: 0.2 }",
        "line": 401,
        "context": "transition: { staggerChildren: 0.1, delayChildren: 0.2 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "line": 478,
        "context": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStats.attendance_rate}",
        "line": 497,
        "context": "value: `${attendanceStats.attendance_rate}%`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 2.3, direction: 'up' as const }",
        "line": 498,
        "context": "change: { value: 2.3, direction: 'up' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStats.present_days}/${attendanceStats.total_days}",
        "line": 501,
        "context": "description: `${attendanceStats.present_days}/${attendanceStats.total_days} hari`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStats.total_work_hours}",
        "line": 505,
        "context": "value: `${attendanceStats.total_work_hours}h`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 8.1, direction: 'up' as const }",
        "line": 506,
        "context": "change: { value: 8.1, direction: 'up' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStats.average_work_hours}",
        "line": 509,
        "context": "description: `Avg ${attendanceStats.average_work_hours}h/hari`",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStats.perfect_attendance_streak}",
        "line": 513,
        "context": "value: `${attendanceStats.perfect_attendance_streak}`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{attendanceStats.overtime_hours}",
        "line": 521,
        "context": "value: `${attendanceStats.overtime_hours}h`,",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 4.2, direction: 'down' as const }",
        "line": 522,
        "context": "change: { value: 4.2, direction: 'down' as const },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 538,
        "context": "key={stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, y: -4 }}",
        "line": 540,
        "context": "whileHover={{ scale: 1.02, y: -4 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 541,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`w-8 h-8 ${colorClasses.split(' ').find(c => c.includes('text-'))} mx-auto mb-4`}",
        "line": 545,
        "context": "<Icon className={`w-8 h-8 ${colorClasses.split(' ').find(c => c.includes('text-'))} mx-auto mb-4`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`text-3xl font-bold ${colorClasses.split(' ').find(c => c.includes('text-'))} mb-2`}",
        "line": 548,
        "context": "className={`text-3xl font-bold ${colorClasses.split(' ').find(c => c.includes('text-'))} mb-2`}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.5 }}",
        "line": 549,
        "context": "initial={{ opacity: 0, scale: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6, delay: index * 0.1 }}",
        "line": 551,
        "context": "transition={{ duration: 0.6, delay: index * 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.value}",
        "line": 553,
        "context": "{stat.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.title}",
        "line": 557,
        "context": "{stat.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}",
        "line": 566,
        "context": "<span className={stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}",
        "line": 567,
        "context": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stat.description}",
        "line": 572,
        "context": "{stat.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{currentShift ? `Shift ${currentShift.type} • ${currentShift.start_time} - ${currentShift.end_time}` : 'Tidak ada shift aktif'}",
        "line": 594,
        "context": "{currentShift ? `Shift ${currentShift.type} • ${currentShift.start_time} - ${currentShift.end_time}` : 'Tidak ada shift aktif'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{currentShift.location}",
        "line": 620,
        "context": "<p className=\"text-sm text-gray-600 dark:text-gray-400\">{currentShift.location}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{currentShift.expected_duration}",
        "line": 628,
        "context": "<p className=\"text-sm text-gray-600 dark:text-gray-400\">{currentShift.expected_duration} jam</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{currentShift.is_checked_in ? `Check in: ${currentShift.check_in_time}` : 'Belum check in'}",
        "line": 637,
        "context": "{currentShift.is_checked_in ? `Check in: ${currentShift.check_in_time}` : 'Belum check in'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 665,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 666,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userLocation.latitude.toFixed(6)}, {userLocation.longitude.toFixed(6)}",
        "line": 699,
        "context": "Lokasi terdeteksi: {userLocation.latitude.toFixed(6)}, {userLocation.longitude.toFixed(6)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.id}",
        "line": 741,
        "context": "key={record.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2, delay: index * 0.05 }}",
        "line": 746,
        "context": "transition={{ duration: 0.2, delay: index * 0.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(record.date)}",
        "line": 752,
        "context": "{formatDate(record.date)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.day}",
        "line": 755,
        "context": "{record.day}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{`${getStatusColor(record.status)} border flex items-center gap-1 font-medium`}",
        "line": 761,
        "context": "<Badge className={`${getStatusColor(record.status)} border flex items-center gap-1 font-medium`}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusIcon(record.status)}",
        "line": 762,
        "context": "{getStatusIcon(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusLabel(record.status)}",
        "line": 763,
        "context": "{getStatusLabel(record.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.shift_type}",
        "line": 767,
        "context": "Shift {record.shift_type}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.overtime_hours}",
        "line": 772,
        "context": "+{record.overtime_hours}h overtime",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.check_in_time || '-'}",
        "line": 781,
        "context": "{record.check_in_time || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.check_out_time || '-'}",
        "line": 788,
        "context": "{record.check_out_time || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.work_duration || '-'}",
        "line": 795,
        "context": "{record.work_duration || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.location_in || '-'}",
        "line": 802,
        "context": "{record.location_in || '-'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{record.notes}",
        "line": 810,
        "context": "<strong>Catatan:</strong> {record.notes}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}",
        "line": 431,
        "context": "<div className={`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300 ${darkMode ? 'dark' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}",
        "line": 566,
        "context": "<span className={stat.change.direction === 'up' ? 'text-emerald-600' : 'text-red-600'}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}",
        "line": 567,
        "context": "{stat.change.direction === 'up' ? '+' : ''}{stat.change.value}%",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentShift ? `Shift ${currentShift.type} • ${currentShift.start_time} - ${currentShift.end_time}` : 'Tidak ada shift aktif'}",
        "line": 594,
        "context": "{currentShift ? `Shift ${currentShift.type} • ${currentShift.start_time} - ${currentShift.end_time}` : 'Tidak ada shift aktif'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentShift?.is_checked_in ? 'Checked In' : 'Ready to Check In'}",
        "line": 605,
        "context": "{currentShift?.is_checked_in ? 'Checked In' : 'Ready to Check In'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentShift.is_checked_in ? `Check in: ${currentShift.check_in_time}` : 'Belum check in'}",
        "line": 637,
        "context": "{currentShift.is_checked_in ? `Check in: ${currentShift.check_in_time}` : 'Belum check in'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/PresensiMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{checkInStatus === 'success' && (currentShift?.is_checked_in ? 'Check Out Berhasil!' : 'Check In Berhasil!')}",
        "line": 687,
        "context": "{checkInStatus === 'success' && (currentShift?.is_checked_in ? 'Check Out Berhasil!' : 'Check In Berhasil!')}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{ default: module.CircularProgress }",
        "line": 30,
        "context": "const CircularProgress = lazy(() => import('../ui/circular-progress').then(module => ({ default: module.CircularProgress })));",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{ default: module.TrendIndicator }",
        "line": 31,
        "context": "const TrendIndicator = lazy(() => import('../ui/trend-indicator').then(module => ({ default: module.TrendIndicator })));",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nama}",
        "line": 242,
        "context": "{userProfile.nama}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nama}",
        "line": 288,
        "context": "{userProfile.nama}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.spesialisasi}",
        "line": 291,
        "context": "{userProfile.spesialisasi}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.status}",
        "line": 295,
        "context": "{userProfile.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.email}",
        "line": 302,
        "context": "<span className=\"text-gray-600 dark:text-gray-400\">{userProfile.email}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.telefon}",
        "line": 306,
        "context": "<span className=\"text-gray-600 dark:text-gray-400\">{userProfile.telefon}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.rumahSakit}",
        "line": 310,
        "context": "<span className=\"text-gray-600 dark:text-gray-400\">{userProfile.rumahSakit}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nomorSip}",
        "line": 314,
        "context": "<span className=\"text-gray-600 dark:text-gray-400\">{userProfile.nomorSip}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(userProfile.tanggalBergabung)}",
        "line": 318,
        "context": "<span className=\"text-gray-600 dark:text-gray-400\">Bergabung: {formatDate(userProfile.tanggalBergabung)}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 336,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 346,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.5 }}",
        "line": 354,
        "context": "initial={{ opacity: 0, scale: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2, type: \"spring\", stiffness: 200 }}",
        "line": 356,
        "context": "transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performanceScore}",
        "line": 358,
        "context": "{stats.performanceScore}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.performanceScore}",
        "line": 362,
        "context": "value={stats.performanceScore}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.rank} dari {stats.totalStaff}",
        "line": 370,
        "context": "Peringkat #{stats.rank} dari {stats.totalStaff}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 383,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5 }}",
        "line": 393,
        "context": "transition={{ duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendanceRate}",
        "line": 399,
        "context": "<p className=\"metric-card-value\">{stats.attendanceRate}%</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendanceRate}",
        "line": 401,
        "context": "value={stats.attendanceRate}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendanceRate}",
        "line": 409,
        "context": "value={stats.attendanceRate}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.attendanceRate - 2}",
        "line": 410,
        "context": "previousValue={stats.attendanceRate - 2}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.ratingKinerja}",
        "line": 438,
        "context": "{stats.ratingKinerja}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.totalJam.toLocaleString('id-ID')}",
        "line": 448,
        "context": "{stats.totalJam.toLocaleString('id-ID')} jam",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.pengalamanTahun}",
        "line": 457,
        "context": "{stats.pengalamanTahun} tahun",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(stats.totalJaspel)}",
        "line": 463,
        "context": "{formatCurrency(stats.totalJaspel)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-5 h-5 text-blue-500 ${pullToRefreshDistance > 80 ? 'animate-spin' : ''}`}",
        "line": 217,
        "context": "<RefreshCw className={`w-5 h-5 text-blue-500 ${pullToRefreshDistance > 80 ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/Profil.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`}",
        "line": 280,
        "context": "<RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1, rotate: 5 }}",
        "line": 150,
        "context": "whileHover={{ scale: 1.1, rotate: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 151,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2 }}",
        "line": 160,
        "context": "transition={{ delay: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3 }}",
        "line": 168,
        "context": "transition={{ delay: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 177,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 204,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 205,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: [1, 1.1, 1] }}",
        "line": 214,
        "context": "animate={{ scale: [1, 1.1, 1] }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.2 }}",
        "line": 223,
        "context": "whileHover={{ scale: 1.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 233,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nama}",
        "line": 235,
        "context": "{userProfile.nama}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.spesialisasi}",
        "line": 240,
        "context": "{userProfile.spesialisasi}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.status}",
        "line": 246,
        "context": "✨ {userProfile.status}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 251,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.ratingKinerja}",
        "line": 266,
        "context": "{stats.ratingKinerja}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 274,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 275,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 319,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 320,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.email}",
        "line": 335,
        "context": "{userProfile.email}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 344,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 345,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 351,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.telefon}",
        "line": 360,
        "context": "{userProfile.telefon}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 369,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 370,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.rumahSakit}",
        "line": 385,
        "context": "{userProfile.rumahSakit}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 394,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 395,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 401,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{userProfile.nomorSip}",
        "line": 410,
        "context": "{userProfile.nomorSip}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 419,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 420,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6 }}",
        "line": 427,
        "context": "transition={{ duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatDate(userProfile.tanggalBergabung)}",
        "line": 436,
        "context": "{formatDate(userProfile.tanggalBergabung)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 479,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6 }}",
        "line": 485,
        "context": "transition={{ duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.1, type: \"spring\" }}",
        "line": 493,
        "context": "transition={{ delay: 0.1, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.totalJam.toLocaleString()}",
        "line": 495,
        "context": "{stats.totalJam.toLocaleString()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.5, duration: 1 }}",
        "line": 505,
        "context": "transition={{ delay: 0.5, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 518,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.2 }}",
        "line": 523,
        "context": "whileHover={{ scale: 1.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2, type: \"spring\" }}",
        "line": 531,
        "context": "transition={{ delay: 0.2, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.ratingKinerja}",
        "line": 533,
        "context": "{stats.ratingKinerja}/5",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${(stats.ratingKinerja / 5) * 100}%` }}",
        "line": 542,
        "context": "animate={{ width: `${(stats.ratingKinerja / 5) * 100}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.6, duration: 1 }}",
        "line": 543,
        "context": "transition={{ delay: 0.6, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 556,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.6 }}",
        "line": 562,
        "context": "transition={{ duration: 0.6 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.3, type: \"spring\" }}",
        "line": 570,
        "context": "transition={{ delay: 0.3, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{stats.pengalamanTahun}",
        "line": 572,
        "context": "{stats.pengalamanTahun}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.7, duration: 1 }}",
        "line": 582,
        "context": "transition={{ delay: 0.7, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 595,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.4, type: \"spring\" }}",
        "line": 616,
        "context": "transition={{ delay: 0.4, type: \"spring\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{formatCurrency(stats.totalJaspel)}",
        "line": 618,
        "context": "{formatCurrency(stats.totalJaspel)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.8, duration: 1 }}",
        "line": 628,
        "context": "transition={{ delay: 0.8, duration: 1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 664,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 665,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 666,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 691,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 692,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 693,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.1 }}",
        "line": 702,
        "context": "whileHover={{ scale: 1.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02, x: 8 }}",
        "line": 731,
        "context": "whileHover={{ scale: 1.02, x: 8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.98 }}",
        "line": 732,
        "context": "whileTap={{ scale: 0.98 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 733,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ProfilMinimalist.tsx",
        "pattern": "conditionalObjects",
        "match": "{`designer-container theme-medical ${darkMode ? 'designer-theme-dark' : ''}`}",
        "line": 116,
        "context": "<div className={`designer-container theme-medical ${darkMode ? 'designer-theme-dark' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 43,
        "context": "const defaultLocation = { lat: -7.808758, lng: 111.962646 };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 59,
        "context": "const defaultLocation = { lat: -7.808758, lng: 111.962646 };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 160,
        "context": "{currentLocation.lat.toFixed(8)}°",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 166,
        "context": "{currentLocation.lng.toFixed(8)}°",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}",
        "line": 264,
        "context": "{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}",
        "line": 267,
        "context": "{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{locationSource === 'gps' ? 'Perbarui Lokasi GPS' : 'Deteksi Lokasi GPS'}",
        "line": 189,
        "context": "{locationSource === 'gps' ? 'Perbarui Lokasi GPS' : 'Deteksi Lokasi GPS'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}",
        "line": 264,
        "context": "{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}",
        "line": 267,
        "context": "{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{locationSource === 'gps' ? '✅' : '❌'}",
        "line": 291,
        "context": "{locationSource === 'gps' ? '✅' : '❌'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{locationSource === 'gps' ? 'Aktif' : 'Tidak aktif'}",
        "line": 295,
        "context": "{locationSource === 'gps' ? 'Aktif' : 'Tidak aktif'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentLocation ? '📍' : '❌'}",
        "line": 303,
        "context": "{currentLocation ? '📍' : '❌'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/ReliableMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentLocation ? 'Tersedia' : 'Belum ada'}",
        "line": 307,
        "context": "{currentLocation ? 'Tersedia' : 'Belum ada'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -6.200000, lng: 106.816666 }",
        "line": 36,
        "context": "center: { lat: -6.200000, lng: 106.816666 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -6.200000, lng: 106.816666 }",
        "line": 43,
        "context": "position: { lat: -6.200000, lng: 106.816666 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}",
        "line": 220,
        "context": "<p><strong>Lokasi:</strong> {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}",
        "line": 277,
        "context": "<p><strong>Koordinat:</strong> {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{isLoading ? 'hidden' : 'block'}",
        "line": 265,
        "context": "className={isLoading ? 'hidden' : 'block'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 47,
        "context": "const defaultLocation = { lat: -7.808758, lng: 111.962646 };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 64,
        "context": "const defaultLocation = { lat: -7.808758, lng: 111.962646 };",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{newLocation.lat}, ${newLocation.lng}",
        "line": 101,
        "context": "console.log(`📍 Map clicked: ${newLocation.lat}, ${newLocation.lng}`);",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}, {currentLocation.lng.toFixed(8)}",
        "line": 169,
        "context": "{currentLocation.lat.toFixed(8)}, {currentLocation.lng.toFixed(8)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{{ left: clickPosition.x, top: clickPosition.y }}",
        "line": 312,
        "context": "style={{ left: clickPosition.x, top: clickPosition.y }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}",
        "line": 324,
        "context": "<div className=\"font-bold text-green-600\">{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}",
        "line": 325,
        "context": "<div className=\"font-bold text-blue-600\">{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}</div>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 398,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 399,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation ? `${currentLocation.lat}, ${currentLocation.lng}` : 'null'}",
        "line": 421,
        "context": "<p>Current Location: {currentLocation ? `${currentLocation.lat}, ${currentLocation.lng}` : 'null'}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 464,
        "context": "Latitude: {currentLocation.lat.toFixed(8)}<br />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 465,
        "context": "Longitude: {currentLocation.lng.toFixed(8)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{locationSource === 'gps' ? '(GPS)' : locationSource === 'manual' ? '(Manual)' : '(Default)'}",
        "line": 166,
        "context": "📍 Lokasi Saat Ini {locationSource === 'gps' ? '(GPS)' : locationSource === 'manual' ? '(Manual)' : '(Default)'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}",
        "line": 324,
        "context": "<div className=\"font-bold text-green-600\">{Math.abs(currentLocation.lat).toFixed(6)}°{currentLocation.lat >= 0 ? 'N' : 'S'}</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}",
        "line": 325,
        "context": "<div className=\"font-bold text-blue-600\">{Math.abs(currentLocation.lng).toFixed(6)}°{currentLocation.lng >= 0 ? 'E' : 'W'}</div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentLocation ? `${currentLocation.lat}, ${currentLocation.lng}` : 'null'}",
        "line": 421,
        "context": "<p>Current Location: {currentLocation ? `${currentLocation.lat}, ${currentLocation.lng}` : 'null'}</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{isAutoDetecting ? 'true' : 'false'}",
        "line": 423,
        "context": "<p>Auto Detecting: {isAutoDetecting ? 'true' : 'false'}</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{isGpsLoading ? 'true' : 'false'}",
        "line": 424,
        "context": "<p>GPS Loading: {isGpsLoading ? 'true' : 'false'}</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentLocation ? '✅ ADA' : '❌ KOSONG'}",
        "line": 444,
        "context": "{currentLocation ? '✅ ADA' : '❌ KOSONG'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{isAutoDetecting ? '🔄 PROSES' : '✅ SELESAI'}",
        "line": 450,
        "context": "{isAutoDetecting ? '🔄 PROSES' : '✅ SELESAI'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/SimpleOpenStreetMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentLocation ? '✅ YA' : '❌ TIDAK'}",
        "line": 456,
        "context": "{currentLocation ? '✅ YA' : '❌ TIDAK'}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 39,
        "context": "center: { lat: -7.808758, lng: 111.962646 }, // User's coordinates",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 55,
        "context": "position: { lat: -7.808758, lng: 111.962646 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 99,
        "context": "setCurrentLocation({ lat: -7.808758, lng: 111.962646 });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{ lat: -7.808758, lng: 111.962646 }",
        "line": 101,
        "context": "onLocationSelect({ lat: -7.808758, lng: 111.962646 });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{() => window.open('https://developers.google.com/maps/documentation/javascript/get-api-key', '_blank')}",
        "line": 296,
        "context": "onClick={() => window.open('https://developers.google.com/maps/documentation/javascript/get-api-key', '_blank')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lat.toFixed(8)}",
        "line": 341,
        "context": "<p><strong>Latitude:</strong> {currentLocation.lat.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "objectInJSX",
        "match": "{currentLocation.lng.toFixed(8)}",
        "line": 342,
        "context": "<p><strong>Longitude:</strong> {currentLocation.lng.toFixed(8)}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{ lat: number; lng: number; accuracy?: number; address?: string }",
        "line": 6,
        "context": "onLocationSelect?: (location: { lat: number; lng: number; accuracy?: number; address?: string }) => void;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TestGoogleMap.tsx",
        "pattern": "conditionalObjects",
        "match": "{`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "line": 322,
        "context": "className={`transition-opacity duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "directObjectRender",
        "match": "{ key: 'jadwal', label: 'Jadwal Jaga', icon: Calendar }",
        "line": 105,
        "context": "{ key: 'jadwal', label: 'Jadwal Jaga', icon: Calendar },",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05, rotate: 5 }}",
        "line": 160,
        "context": "whileHover={{ scale: 1.05, rotate: 5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 161,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{item.key}",
        "line": 175,
        "context": "key={item.key}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{currentPage === item.key ? \"default\" : \"ghost\"}",
        "line": 176,
        "context": "variant={currentPage === item.key ? \"default\" : \"ghost\"}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onNavigate(item.key)}",
        "line": 183,
        "context": "onClick={() => onNavigate(item.key)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 186,
        "context": "<span className=\"hidden xl:inline\">{item.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setSearchQuery(e.target.value)}",
        "line": 201,
        "context": "onChange={(e) => setSearchQuery(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "line": 224,
        "context": "{currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{currentTime.toLocaleDateString('id-ID', { day: 'numeric', month: 'short' })}",
        "line": 227,
        "context": "{currentTime.toLocaleDateString('id-ID', { day: 'numeric', month: 'short' })}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: -10, scale: 0.95 }}",
        "line": 270,
        "context": "initial={{ opacity: 0, y: -10, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: -10, scale: 0.95 }}",
        "line": 272,
        "context": "exit={{ opacity: 0, y: -10, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 273,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{notification.id}",
        "line": 290,
        "context": "key={notification.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{notification.title}",
        "line": 304,
        "context": "{notification.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{notification.message}",
        "line": 307,
        "context": "{notification.message}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{new Date(notification.timestamp).toLocaleDateString('id-ID')}",
        "line": 310,
        "context": "{new Date(notification.timestamp).toLocaleDateString('id-ID')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.avatar || user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "line": 348,
        "context": "{user.avatar || user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{`absolute -bottom-1 -right-1 w-4 h-4 ${getStatusColor(user.status)} rounded-full border-2 border-white dark:border-gray-900`}",
        "line": 351,
        "context": "<div className={`absolute -bottom-1 -right-1 w-4 h-4 ${getStatusColor(user.status)} rounded-full border-2 border-white dark:border-gray-900`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.name}",
        "line": 356,
        "context": "{user.name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.role}",
        "line": 359,
        "context": "{user.role}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: -10, scale: 0.95 }}",
        "line": 371,
        "context": "initial={{ opacity: 0, y: -10, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, y: -10, scale: 0.95 }}",
        "line": 373,
        "context": "exit={{ opacity: 0, y: -10, scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 374,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.avatar || user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "line": 384,
        "context": "{user.avatar || user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{`absolute -bottom-1 -right-1 w-5 h-5 ${getStatusColor(user.status)} rounded-full border-3 border-white dark:border-gray-900`}",
        "line": 387,
        "context": "<div className={`absolute -bottom-1 -right-1 w-5 h-5 ${getStatusColor(user.status)} rounded-full border-3 border-white dark:border-gray-900`} />",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.name}",
        "line": 391,
        "context": "<h3 className=\"font-bold text-gray-900 dark:text-white\">{user.name}</h3>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.role}",
        "line": 392,
        "context": "<p className=\"text-sm text-gray-600 dark:text-gray-400\">{user.role}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{user.employee_id}",
        "line": 393,
        "context": "<p className=\"text-xs text-gray-500 dark:text-gray-500\">ID: {user.employee_id}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{getStatusLabel(user.status)}",
        "line": 395,
        "context": "{getStatusLabel(user.status)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{item.action}",
        "line": 409,
        "context": "key={item.action}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 418,
        "context": "<span className=\"text-gray-700 dark:text-gray-300\">{item.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => setSearchQuery(e.target.value)}",
        "line": 454,
        "context": "onChange={(e) => setSearchQuery(e.target.value)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{item.key}",
        "line": 492,
        "context": "key={item.key}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{currentPage === item.key ? \"default\" : \"ghost\"}",
        "line": 493,
        "context": "variant={currentPage === item.key ? \"default\" : \"ghost\"}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 505,
        "context": "{item.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentPage === item.key ? \"default\" : \"ghost\"}",
        "line": 176,
        "context": "variant={currentPage === item.key ? \"default\" : \"ghost\"}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "conditionalObjects",
        "match": "{`w-4 h-4 ${networkStatus === 'slow' ? 'text-amber-500' : 'text-emerald-500'}`}",
        "line": 217,
        "context": "<Wifi className={`w-4 h-4 ${networkStatus === 'slow' ? 'text-amber-500' : 'text-emerald-500'}`} />",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "conditionalObjects",
        "match": "{unreadNotifications > 9 ? '9+' : unreadNotifications}",
        "line": 259,
        "context": "{unreadNotifications > 9 ? '9+' : unreadNotifications}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "pattern": "conditionalObjects",
        "match": "{currentPage === item.key ? \"default\" : \"ghost\"}",
        "line": 493,
        "context": "variant={currentPage === item.key ? \"default\" : \"ghost\"}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/paramedis/TopBarIntegration.tsx",
        "pattern": "directObjectRender",
        "match": "{\n  const [currentPage, setCurrentPage] = useState<'dashboard' | 'jadwal' | 'presensi' | 'laporan'>('dashboard');\n  const [darkMode, setDarkMode] = useState(false);\n  const [networkStatus, setNetworkStatus] = useState<'online' | 'offline' | 'slow'>('online');\n\n  // Sample user data - in real app, this would come from authentication context\n  const user = {\n    id: '1',\n    name: 'Dr. Sarah Ahmad',\n    role: 'Paramedis Senior',\n    avatar: 'SA',\n    status: 'online' as const,\n    employee_id: 'EMP001'\n  }",
        "line": 6,
        "context": "export const TopBarIntegration: React.FC = () => {",
        "suggestion": "Consider using JSON.stringify() or extract specific properties"
      },
      {
        "file": "resources/js/components/paramedis/TopBarIntegration.tsx",
        "pattern": "objectInJSX",
        "match": "{currentPage.charAt(0).toUpperCase() + currentPage.slice(1)}",
        "line": 139,
        "context": "Welcome to {currentPage.charAt(0).toUpperCase() + currentPage.slice(1)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/paramedis/TopBarIntegration.tsx",
        "pattern": "conditionalObjects",
        "match": "{darkMode ? 'dark' : ''}",
        "line": 119,
        "context": "<div className={darkMode ? 'dark' : ''}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/ErrorBoundary.tsx",
        "pattern": "objectInJSX",
        "match": "{() => window.location.reload()}",
        "line": 77,
        "context": "onClick={() => window.location.reload()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`mobile-overlay ${mobileOverlayVisible ? 'show' : ''}`} onClick={closeMobileSidebar}",
        "line": 1327,
        "context": "<div className={`mobile-overlay ${mobileOverlayVisible ? 'show' : ''}`} onClick={closeMobileSidebar}></div>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`app-container ${sidebarCollapsed ? 'sidebar-collapsed' : ''}`}",
        "line": 1329,
        "context": "<div className={`app-container ${sidebarCollapsed ? 'sidebar-collapsed' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`sidebar ${sidebarCollapsed ? 'collapsed' : ''} ${mobileOverlayVisible ? 'open' : ''}`}",
        "line": 1331,
        "context": "<nav className={`sidebar ${sidebarCollapsed ? 'collapsed' : ''} ${mobileOverlayVisible ? 'open' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`nav-group ${collapsedGroups['manajemen-pasien'] ? 'collapsed' : ''}`}",
        "line": 1371,
        "context": "<div className={`nav-group ${collapsedGroups['manajemen-pasien'] ? 'collapsed' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`nav-group ${collapsedGroups['data-entry'] ? 'collapsed' : ''}`}",
        "line": 1409,
        "context": "<div className={`nav-group ${collapsedGroups['data-entry'] ? 'collapsed' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`nav-group ${collapsedGroups['manajemen-transaksi'] ? 'collapsed' : ''}`}",
        "line": 1458,
        "context": "<div className={`nav-group ${collapsedGroups['manajemen-transaksi'] ? 'collapsed' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`nav-group ${collapsedGroups['laporan-analitik'] ? 'collapsed' : ''}`}",
        "line": 1485,
        "context": "<div className={`nav-group ${collapsedGroups['laporan-analitik'] ? 'collapsed' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{`nav-group ${collapsedGroups['pengaturan'] ? 'collapsed' : ''}`}",
        "line": 1532,
        "context": "<div className={`nav-group ${collapsedGroups['pengaturan'] ? 'collapsed' : ''}`}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{{ display: isMobile ? 'flex' : 'none' }}",
        "line": 1602,
        "context": "style={{ display: isMobile ? 'flex' : 'none' }}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{{ fontSize: isMobile ? '18px' : isTablet ? '22px' : '24px' }}",
        "line": 1612,
        "context": "<h1 style={{ fontSize: isMobile ? '18px' : isTablet ? '22px' : '24px' }}>Dashboard</h1>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{{ fontSize: isMobile ? '12px' : '14px' }}",
        "line": 1613,
        "context": "<p style={{ fontSize: isMobile ? '12px' : '14px' }}>Sistem Manajemen Data Klinik - Agustus 2025</p>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{{ display: isMobile ? 'none' : 'flex' }}",
        "line": 1616,
        "context": "<div className=\"user-info\" style={{ display: isMobile ? 'none' : 'flex' }}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/petugas/PetugasWorkerDashboard.tsx",
        "pattern": "conditionalObjects",
        "match": "{{ fontSize: isMobile ? '16px' : isTablet ? '18px' : '20px' }}",
        "line": 1631,
        "context": "<h3 className=\"chart-title\" style={{ fontSize: isMobile ? '16px' : isTablet ? '18px' : '20px' }}>",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/EnhancedPagination.tsx",
        "pattern": "objectInJSX",
        "match": "{(e) => handleItemsPerPageChange(parseInt(e.target.value))}",
        "line": 137,
        "context": "onChange={(e) => handleItemsPerPageChange(parseInt(e.target.value))}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/EnhancedPagination.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${isCurrentPage ? 'Halaman saat ini, ' : 'Ke '}halaman ${pageNum}`}",
        "line": 100,
        "context": "aria-label={`${isCurrentPage ? 'Halaman saat ini, ' : 'Ke '}halaman ${pageNum}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/EnhancedPagination.tsx",
        "pattern": "conditionalObjects",
        "match": "{isCurrentPage ? 'page' : undefined}",
        "line": 101,
        "context": "aria-current={isCurrentPage ? 'page' : undefined}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{hover ? { scale: 0.98 } : {}}",
        "line": 39,
        "context": "whileTap={hover ? { scale: 0.98 } : {}}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.2 }}",
        "line": 40,
        "context": "transition={{ duration: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.05 }}",
        "line": 83,
        "context": "whileHover={{ scale: 1.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.95 }}",
        "line": 84,
        "context": "whileTap={{ scale: 0.95 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 1.02 }}",
        "line": 130,
        "context": "whileHover={{ scale: 1.02 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 133,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.2 }}",
        "line": 149,
        "context": "transition={{ delay: 0.2 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.1, duration: 0.5 }}",
        "line": 268,
        "context": "transition={{ delay: index * 0.1, duration: 0.5 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.id}",
        "line": 299,
        "context": "key={tab.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{() => onTabChange(tab.id)}",
        "line": 300,
        "context": "onClick={() => onTabChange(tab.id)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ scale: 0.9 }}",
        "line": 302,
        "context": "whileTap={{ scale: 0.9 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.icon}",
        "line": 311,
        "context": "{tab.icon}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: 0.1 }}",
        "line": 320,
        "context": "transition={{ delay: 0.1 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{tab.label}",
        "line": 322,
        "context": "{tab.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{action.onClick}",
        "line": 358,
        "context": "<ModernButton onClick={action.onClick} variant=\"primary\">",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "objectInJSX",
        "match": "{action.label}",
        "line": 359,
        "context": "{action.label}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 41,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 86,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 171,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 230,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "conditionalObjects",
        "match": "{hover ? { y: -4 } : {}}",
        "line": 38,
        "context": "whileHover={hover ? { y: -4 } : {}}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "conditionalObjects",
        "match": "{hover ? { scale: 0.98 } : {}}",
        "line": 39,
        "context": "whileTap={hover ? { scale: 0.98 } : {}}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "conditionalObjects",
        "match": "{`text-sm font-medium ${trend === 'up' ? 'text-green-200' : 'text-red-200'}`}",
        "line": 146,
        "context": "className={`text-sm font-medium ${trend === 'up' ? 'text-green-200' : 'text-red-200'}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "conditionalObjects",
        "match": "{trend === 'up' ? '↑' : '↓'} {change}",
        "line": 151,
        "context": "{trend === 'up' ? '↑' : '↓'} {change}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/ModernComponents.tsx",
        "pattern": "conditionalObjects",
        "match": "{isActive ? { y: -4 } : { y: 0 }}",
        "line": 309,
        "context": "animate={isActive ? { y: -4 } : { y: 0 }}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/TimeFilter.tsx",
        "pattern": "objectInJSX",
        "match": "{filterOptions.map(({ value, label, icon: Icon, description }",
        "line": 46,
        "context": "{filterOptions.map(({ value, label, icon: Icon, description }) => {",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/TimeFilter.tsx",
        "pattern": "conditionalObjects",
        "match": "{`${description}${isSelected ? ' (dipilih)' : ''}`}",
        "line": 60,
        "context": "aria-label={`${description}${isSelected ? ' (dipilih)' : ''}`}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/accordion.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 12,
        "context": "return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/accordion.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 23,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/accordion.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 41,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/accordion.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 59,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 12,
        "context": "return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "<AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 27,
        "context": "<AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 42,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 60,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 74,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 90,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 103,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 116,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 128,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert-dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 140,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 32,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 45,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/alert.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 61,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/aspect-ratio.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 8,
        "context": "return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/avatar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/avatar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 32,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/avatar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 48,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/badge.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 41,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/badge.tsx",
        "pattern": "conditionalObjects",
        "match": "{ asChild?: boolean }",
        "line": 34,
        "context": "VariantProps<typeof badgeVariants> & { asChild?: boolean }) {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"inline-flex items-center gap-1.5\", className)}",
        "line": 28,
        "context": "className={cn(\"inline-flex items-center gap-1.5\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"[&>svg]:size-3.5\", className)}",
        "line": 75,
        "context": "className={cn(\"[&>svg]:size-3.5\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 8,
        "context": "return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 29,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 47,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 60,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 76,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/breadcrumb.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 93,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/button.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 54,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/calendar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 64,
        "context": "<ChevronLeft className={cn(\"size-4\", className)} {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/calendar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 67,
        "context": "<ChevronRight className={cn(\"size-4\", className)} {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/calendar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 70,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 15,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 31,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 44,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 57,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 73,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 86,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 99,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/carousel.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 127,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/carousel.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 150,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/carousel.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 169,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/carousel.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 196,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/carousel.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 226,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{id || uniqueId.replace(/:/g, \"\")}",
        "line": 51,
        "context": "const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{nameKey || item.name || item.dataKey || \"value\"}",
        "line": 184,
        "context": "const key = `${nameKey || item.name || item.dataKey || \"value\"}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{item.dataKey}",
        "line": 190,
        "context": "key={item.dataKey}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{itemConfig?.label || item.name}",
        "line": 233,
        "context": "{itemConfig?.label || item.name}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{item.value.toLocaleString()}",
        "line": 238,
        "context": "{item.value.toLocaleString()}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{nameKey || item.dataKey || \"value\"}",
        "line": 280,
        "context": "const key = `${nameKey || item.dataKey || \"value\"}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "objectInJSX",
        "match": "{item.value}",
        "line": 285,
        "context": "key={item.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 62,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "conditionalObjects",
        "match": "{ color?: string; theme?: never }",
        "line": 17,
        "context": "| { color?: string; theme?: never }",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "conditionalObjects",
        "match": "{ color?: never; theme: Record<keyof typeof THEMES, string> }",
        "line": 18,
        "context": "| { color?: never; theme: Record<keyof typeof THEMES, string> }",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "conditionalObjects",
        "match": "{!nestLabel ? tooltipLabel : null}",
        "line": 181,
        "context": "{!nestLabel ? tooltipLabel : null}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/chart.tsx",
        "pattern": "conditionalObjects",
        "match": "{nestLabel ? tooltipLabel : null}",
        "line": 231,
        "context": "{nestLabel ? tooltipLabel : null}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/checkbox.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 20,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/circular-progress.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5, ease: \"easeOut\" }}",
        "line": 59,
        "context": "transition={{ duration: 0.5, ease: \"easeOut\" }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/collapsible.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 8,
        "context": "return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/collapsible.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 17,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/collapsible.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 28,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 27,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 42,
        "context": "<Dialog {...props}>",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 72,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 89,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 101,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 117,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 130,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 146,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/command.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 162,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 12,
        "context": "return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "<ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 27,
        "context": "<ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 35,
        "context": "<ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 42,
        "context": "return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 51,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 72,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 91,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 108,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 132,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 151,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 175,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 202,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 215,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/context-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 231,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 12,
        "context": "return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 18,
        "context": "return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 24,
        "context": "return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 30,
        "context": "return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 44,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 63,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 80,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 93,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 106,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dialog.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 119,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"flex flex-col gap-1.5 p-4\", className)}",
        "line": 79,
        "context": "className={cn(\"flex flex-col gap-1.5 p-4\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 11,
        "context": "return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 17,
        "context": "return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 23,
        "context": "return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 29,
        "context": "return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 43,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 66,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 80,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 90,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 103,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/drawer.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 116,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 12,
        "context": "return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "<DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 29,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 48,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 58,
        "context": "<DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 80,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 99,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 117,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 134,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 161,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 174,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 190,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 198,
        "context": "return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 217,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/dropdown-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 236,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "objectInJSX",
        "match": "{{ name: props.name }}",
        "line": 39,
        "context": "<FormFieldContext.Provider value={{ name: props.name }}>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "objectInJSX",
        "match": "{ name: fieldContext.name }",
        "line": 49,
        "context": "const formState = useFormState({ name: fieldContext.name });",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 40,
        "context": "<Controller {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 84,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 102,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 121,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 134,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/form.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 152,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/hover-card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 11,
        "context": "return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/hover-card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 18,
        "context": "<HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/hover-card.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 38,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/input-otp.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 24,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/input-otp.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 34,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/input-otp.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 57,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/input-otp.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 71,
        "context": "<div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/input.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 16,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/label.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 20,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 28,
        "context": "return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 34,
        "context": "return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 40,
        "context": "return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 47,
        "context": "<MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 62,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 85,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 109,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 128,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 152,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 179,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 192,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 208,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 216,
        "context": "return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 235,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/menubar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 254,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 24,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 43,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 56,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 74,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 97,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 118,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 135,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/navigation-menu.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 151,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}",
        "line": 76,
        "context": "className={cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}",
        "line": 93,
        "context": "className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 18,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 31,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 37,
        "context": "return <li data-slot=\"pagination-item\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 63,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 77,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 94,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 111,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/pagination.tsx",
        "pattern": "conditionalObjects",
        "match": "{isActive ? \"page\" : undefined}",
        "line": 53,
        "context": "aria-current={isActive ? \"page\" : undefined}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/popover.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 11,
        "context": "return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/popover.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 17,
        "context": "return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/popover.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 36,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/popover.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 45,
        "context": "return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/progress.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 20,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/radio-group.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 17,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/radio-group.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 33,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/resizable.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 20,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/resizable.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 28,
        "context": "return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/resizable.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 45,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/scroll-area.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 17,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/scroll-area.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 48,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}",
        "line": 99,
        "context": "className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 16,
        "context": "return <SelectPrimitive.Root data-slot=\"select\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 22,
        "context": "return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 28,
        "context": "return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 47,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 74,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 100,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 117,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 137,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 153,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/select.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 171,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/separator.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 23,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(\"flex flex-col gap-1.5 p-4\", className)}",
        "line": 88,
        "context": "className={cn(\"flex flex-col gap-1.5 p-4\", className)}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 10,
        "context": "return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 16,
        "context": "return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 22,
        "context": "return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 28,
        "context": "return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 42,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 72,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 89,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 99,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 112,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sheet.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 125,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.floor(Math.random() * 40) + 50}",
        "line": 611,
        "context": "return `${Math.floor(Math.random() * 40) + 50}%`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 145,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 176,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 185,
        "context": "<Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 242,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 274,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 302,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 316,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 330,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 341,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 352,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 366,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 380,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 391,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 412,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 435,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 449,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 460,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 471,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 521,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...tooltip}",
        "line": 542,
        "context": "{...tooltip}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 575,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 597,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 619,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 650,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 664,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 696,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "conditionalObjects",
        "match": "{state === \"collapsed\" ? collapsible : \"\"}",
        "line": 212,
        "context": "data-collapsible={state === \"collapsed\" ? collapsible : \"\"}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "conditionalObjects",
        "match": "{ asChild?: boolean }",
        "line": 400,
        "context": "}: ComponentProps<\"div\"> & { asChild?: boolean }) {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/sidebar.tsx",
        "pattern": "conditionalObjects",
        "match": "{ asChild?: boolean }",
        "line": 421,
        "context": "}: ComponentProps<\"button\"> & { asChild?: boolean }) {",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/skeleton.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 8,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/slider.tsx",
        "pattern": "objectInJSX",
        "match": "{Array.from({ length: _values.length }",
        "line": 52,
        "context": "{Array.from({ length: _values.length }, (_, index) => (",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/slider.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 37,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/sonner.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 20,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/switch.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 19,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 16,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 27,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 37,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 50,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 63,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 76,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 89,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/table.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 102,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tabs.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 16,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tabs.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 32,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tabs.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 48,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tabs.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 61,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/textarea.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 13,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/toggle-group.tsx",
        "pattern": "objectInJSX",
        "match": "{context.variant || variant}",
        "line": 56,
        "context": "data-variant={context.variant || variant}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/toggle-group.tsx",
        "pattern": "objectInJSX",
        "match": "{context.size || size}",
        "line": 57,
        "context": "data-size={context.size || size}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/toggle-group.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 34,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/toggle-group.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 66,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/toggle.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 42,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tooltip.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 16,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tooltip.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 26,
        "context": "<TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tooltip.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 34,
        "context": "return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/tooltip.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 52,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "objectInJSX",
        "match": "{isPositive ? '+' : ''}${change.toFixed(1)}",
        "line": 41,
        "context": "return `${isPositive ? '+' : ''}${change.toFixed(1)}%`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "objectInJSX",
        "match": "{isPositive ? '+' : ''}Rp ${Math.abs(diff).toLocaleString('id-ID')}",
        "line": 44,
        "context": "return `${isPositive ? '+' : ''}Rp ${Math.abs(diff).toLocaleString('id-ID')}`;",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "objectInJSX",
        "match": "{{ opacity: 0, scale: 0.8 }}",
        "line": 60,
        "context": "initial={{ opacity: 0, scale: 0.8 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3 }}",
        "line": 62,
        "context": "transition={{ duration: 0.3 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "conditionalObjects",
        "match": "{isPositive ? '+' : ''}${change.toFixed(1)}",
        "line": 41,
        "context": "return `${isPositive ? '+' : ''}${change.toFixed(1)}%`;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "conditionalObjects",
        "match": "{isPositive ? '+' : ''}Rp ${Math.abs(diff).toLocaleString('id-ID')}",
        "line": 44,
        "context": "return `${isPositive ? '+' : ''}Rp ${Math.abs(diff).toLocaleString('id-ID')}`;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/trend-indicator.tsx",
        "pattern": "conditionalObjects",
        "match": "{isPositive ? '+' : ''}${diff}",
        "line": 47,
        "context": "return `${isPositive ? '+' : ''}${diff}`;",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.3, ease: 'easeOut' }}",
        "line": 96,
        "context": "transition={{ duration: 0.3, ease: 'easeOut' }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.abs(trend.value)}{trend.percentage ? '%' : ''}",
        "line": 200,
        "context": "{Math.abs(trend.value)}{trend.percentage ? '%' : ''}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.round((progress.current / progress.target) * 100)}",
        "line": 218,
        "context": "{Math.round((progress.current / progress.target) * 100)}%",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{{ width: `${(progress.current / progress.target) * 100}%` }}",
        "line": 225,
        "context": "animate={{ width: `${(progress.current / progress.target) * 100}%` }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{{ duration: 0.5, ease: 'easeOut' }}",
        "line": 226,
        "context": "transition={{ duration: 0.5, ease: 'easeOut' }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{action.onClick}",
        "line": 237,
        "context": "onClick={action.onClick}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{status.message}",
        "line": 324,
        "context": "<p className=\"text-sm font-medium\">{status.message}</p>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{section.icon}",
        "line": 340,
        "context": "<span className=\"text-gray-400 dark:text-gray-500\">{section.icon}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{section.label}",
        "line": 342,
        "context": "<span className=\"text-sm text-gray-600 dark:text-gray-400\">{section.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{section.value}",
        "line": 345,
        "context": "{section.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{action.onClick}",
        "line": 365,
        "context": "onClick={action.onClick}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{cn(baseClasses, variantClasses[action.variant || 'secondary'])}",
        "line": 366,
        "context": "className={cn(baseClasses, variantClasses[action.variant || 'secondary'])}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{action.icon}",
        "line": 368,
        "context": "{action.icon}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{action.label}",
        "line": 369,
        "context": "<span>{action.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{action.variant === 'primary' && <ArrowRight className=\"w-4 h-4\" />}",
        "line": 370,
        "context": "{action.variant === 'primary' && <ArrowRight className=\"w-4 h-4\" />}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.id}",
        "line": 450,
        "context": "key={activity.id}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{{ delay: index * 0.05 }}",
        "line": 454,
        "context": "transition={{ delay: index * 0.05 }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.title}",
        "line": 470,
        "context": "{activity.title}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.description}",
        "line": 474,
        "context": "{activity.description}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.timestamp}",
        "line": 478,
        "context": "{activity.timestamp}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{activity.user.name}",
        "line": 480,
        "context": "<span> • {activity.user.name}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{activities.length - maxItems}",
        "line": 492,
        "context": "View {activities.length - maxItems} more activities →",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{Math.abs(trend.value)}",
        "line": 569,
        "context": "<span>{Math.abs(trend.value)}%</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{{ backgroundColor: item.color }}",
        "line": 583,
        "context": "style={{ backgroundColor: item.color }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{item.label}",
        "line": 586,
        "context": "<span className=\"text-sm text-gray-600 dark:text-gray-400\">{item.label}</span>",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{item.value}",
        "line": 590,
        "context": "{item.value}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "objectInJSX",
        "match": "{item.percentage}",
        "line": 594,
        "context": "({item.percentage}%)",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "spreadInJSX",
        "match": "{...props}",
        "line": 105,
        "context": "{...props}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/world-class-cards.tsx",
        "pattern": "conditionalObjects",
        "match": "{Math.abs(trend.value)}{trend.percentage ? '%' : ''}",
        "line": 200,
        "context": "{Math.abs(trend.value)}{trend.percentage ? '%' : ''}",
        "suggestion": "Ensure both branches return valid React children"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 12.5, direction: 'up' as const, percentage: true }",
        "line": 51,
        "context": "trend: { value: 12.5, direction: 'up' as const, percentage: true },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 8.2, direction: 'up' as const, percentage: true }",
        "line": 60,
        "context": "trend: { value: 8.2, direction: 'up' as const, percentage: true }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: -2.1, direction: 'down' as const, percentage: true }",
        "line": 68,
        "context": "trend: { value: -2.1, direction: 'down' as const, percentage: true },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 3.2, direction: 'up' as const, percentage: true }",
        "line": 77,
        "context": "trend: { value: 3.2, direction: 'up' as const, percentage: true }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Email', value: 'ahmad.s@email.com', icon: <Mail className=\"w-4 h-4\" /> }",
        "line": 89,
        "context": "{ label: 'Email', value: 'ahmad.s@email.com', icon: <Mail className=\"w-4 h-4\" /> },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ value: 15.3, direction: 'up' as const, percentage: true }",
        "line": 155,
        "context": "trend: { value: 15.3, direction: 'up' as const, percentage: true },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Consultations', value: 'Rp 85.2M', color: '#3B82F6', percentage: 58 }",
        "line": 157,
        "context": "{ label: 'Consultations', value: 'Rp 85.2M', color: '#3B82F6', percentage: 58 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Procedures', value: 'Rp 35.6M', color: '#10B981', percentage: 24 }",
        "line": 158,
        "context": "{ label: 'Procedures', value: 'Rp 35.6M', color: '#10B981', percentage: 24 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Medications', value: 'Rp 15.0M', color: '#F59E0B', percentage: 10 }",
        "line": 159,
        "context": "{ label: 'Medications', value: 'Rp 15.0M', color: '#F59E0B', percentage: 10 },",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{ label: 'Lab Tests', value: 'Rp 10.0M', color: '#8B5CF6', percentage: 8 }",
        "line": 160,
        "context": "{ label: 'Lab Tests', value: 'Rp 10.0M', color: '#8B5CF6', percentage: 8 }",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{metric.title}",
        "line": 191,
        "context": "onClick: () => console.log(`Viewing ${metric.title}`)",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{{ value: 4.2, direction: 'up', percentage: true }}",
        "line": 292,
        "context": "trend={{ value: 4.2, direction: 'up', percentage: true }}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "objectInJSX",
        "match": "{() => console.log('Refreshing data...')}",
        "line": 364,
        "context": "onClick={() => console.log('Refreshing data...')}",
        "suggestion": "Ensure the expression returns a valid React child (string, number, element)"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "spreadInJSX",
        "match": "{...metric}",
        "line": 187,
        "context": "{...metric}",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "spreadInJSX",
        "match": "{...patientInfo} loading={loading}",
        "line": 204,
        "context": "<InfoCard {...patientInfo} loading={loading} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      },
      {
        "file": "resources/js/components/ui/world-class-design-system.tsx",
        "pattern": "spreadInJSX",
        "match": "{...financialSummary} loading={loading}",
        "line": 284,
        "context": "<SummaryCard {...financialSummary} loading={loading} />",
        "suggestion": "Avoid spreading objects directly in JSX"
      }
    ],
    "objectReferences": [],
    "jadwalUsages": [
      {
        "file": "resources/js/components/Dashboard.tsx",
        "line": 65,
        "context": "jadwalMendatang: data.jadwal || [",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 17,
        "context": "jadwal: JadwalItem[];",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 30,
        "context": "jadwal: [],",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 42,
        "context": "// Fetch jadwal data from API",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 48,
        "context": "const response = await fetch('/api/v2/dashboards/dokter/jadwal', {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 59,
        "context": "jadwal: data.jadwal || [",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 59,
        "context": "jadwal: data.jadwal || [",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 105,
        "context": "jadwal: [",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 150,
        "context": "console.error('Failed to fetch jadwal data:', error);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 167,
        "context": "const response = await fetch(`/api/v2/dashboards/dokter/jadwal/${id}/cancel`, {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 179,
        "context": "jadwal: prev.jadwal.map(item =>",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 179,
        "context": "jadwal: prev.jadwal.map(item =>",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 225,
        "context": "const filteredJadwal = jadwalData.jadwal.filter(item =>",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 251,
        "context": "<p className=\"text-blue-100 text-sm\">Kelola jadwal kerja Anda</p>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 328,
        "context": "{ key: 'all', label: 'Semua', count: jadwalData.jadwal.length },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 357,
        "context": "<p className=\"text-gray-600\">Tidak ada jadwal {filter === 'all' ? '' : `yang ${filter}`}</p>",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/Login.tsx",
        "line": 84,
        "context": "description: 'Atur dan pantau jadwal kerja dengan mudah'",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/MainApp.tsx",
        "line": 24,
        "context": "{ id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/App.tsx",
        "line": 122,
        "context": "case 'jadwal':",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/Dashboard.tsx",
        "line": 201,
        "context": "'missions': 'jadwal',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/DebugJadwalError.tsx",
        "line": 89,
        "context": "message.includes('jadwal') ||",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "line": 257,
        "context": "// Fetch today's jadwal jaga",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "line": 264,
        "context": "const response = await fetch(`/api/v2/dashboards/dokter/jadwal-jaga?date=${today}`, {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "line": 275,
        "context": "// Handle both single jadwal and array of jadwal",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "line": 275,
        "context": "// Handle both single jadwal and array of jadwal",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "line": 298,
        "context": "console.error('Failed to fetch jadwal jaga - Response:', response.status, response.statusText);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/EnhancedPresensi.tsx",
        "line": 301,
        "context": "console.error('Failed to fetch jadwal jaga:', error);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "line": 83,
        "context": "{ icon: Calendar, label: 'Missions', color: 'from-blue-500 to-cyan-500', tab: 'jadwal' },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/HolisticMedicalDashboard.tsx",
        "line": 296,
        "context": "onClick={() => onNavigate?.('jadwal')}",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 46,
        "context": "const response = await fetch('/dokter/web-api/jadwal-jaga', {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 72,
        "context": "console.error('Error fetching jadwal:', err);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 73,
        "context": "setError('Gagal memuat jadwal jaga');",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 110,
        "context": "const getShiftTime = (jadwal: JadwalJagaItem) => {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 111,
        "context": "if (jadwal.jam_jaga_custom) {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 112,
        "context": "return jadwal.jam_jaga_custom;",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 115,
        "context": "if (jadwal.shift_template) {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 116,
        "context": "return `${jadwal.shift_template.jam_masuk} - ${jadwal.shift_template.jam_pulang}`;",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 116,
        "context": "return `${jadwal.shift_template.jam_masuk} - ${jadwal.shift_template.jam_pulang}`;",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 122,
        "context": "const getShiftName = (jadwal: JadwalJagaItem) => {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 123,
        "context": "return jadwal.shift_template?.nama_shift || 'Shift Khusus';",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 132,
        "context": "<span className=\"ml-2 text-gray-600\">Memuat jadwal jaga...</span>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 158,
        "context": "<p className=\"text-gray-500 text-lg\">Tidak ada jadwal jaga</p>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 163,
        "context": "{jadwalList.map((jadwal) => (",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 165,
        "context": "key={jadwal.id}",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 175,
        "context": "{formatDate(jadwal.tanggal_jaga)}",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 178,
        "context": "{getShiftName(jadwal)}",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 187,
        "context": "{getShiftTime(jadwal)}",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 195,
        "context": "<span className=\"text-gray-700\">{jadwal.unit_kerja}</span>",
        "isInJSX": true,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 196,
        "context": "{jadwal.unit_instalasi && (",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 198,
        "context": "({jadwal.unit_instalasi})",
        "isInJSX": true,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 207,
        "context": "<span className=\"text-gray-700\">{jadwal.peran}</span>",
        "isInJSX": true,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 211,
        "context": "{jadwal.keterangan && (",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 214,
        "context": "<span className=\"font-medium\">Catatan:</span> {jadwal.keterangan}",
        "isInJSX": true,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 222,
        "context": "{getStatusBadge(jadwal.status_jaga)}",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 47,
        "context": "const response = await fetch('/api/v2/dashboards/dokter/jadwal-jaga', {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 61,
        "context": "console.error('Invalid jadwal data format:', data.data);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 67,
        "context": "console.error('Error fetching jadwal data:', error);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 80,
        "context": "return scheduleData.map((jadwal) => {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 83,
        "context": "const jadwalDate = jadwal.tanggal ? new Date(jadwal.tanggal) : new Date();",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 83,
        "context": "const jadwalDate = jadwal.tanggal ? new Date(jadwal.tanggal) : new Date();",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 89,
        "context": "id: jadwal.id || Date.now() + Math.random(),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 90,
        "context": "missionName: `Shift ${jadwal.shift || 'Pagi'}`,",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 92,
        "context": "day: jadwal.hari || 'Senin',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 93,
        "context": "shift: jadwal.shift || 'Pagi',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 94,
        "context": "time: jadwal.jam_masuk && jadwal.jam_keluar ?",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 94,
        "context": "time: jadwal.jam_masuk && jadwal.jam_keluar ?",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 95,
        "context": "`${jadwal.jam_masuk} - ${jadwal.jam_keluar}` :",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 95,
        "context": "`${jadwal.jam_masuk} - ${jadwal.jam_keluar}` :",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 97,
        "context": "location: jadwal.unit_kerja && jadwal.ruangan ?",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 97,
        "context": "location: jadwal.unit_kerja && jadwal.ruangan ?",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 98,
        "context": "`${jadwal.unit_kerja} - ${jadwal.ruangan}` :",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 98,
        "context": "`${jadwal.unit_kerja} - ${jadwal.ruangan}` :",
        "isInJSX": false,
        "riskLevel": "HIGH"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 100,
        "context": "supervisor: jadwal.supervisor || 'Dr. Supervisor',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 101,
        "context": "contact: jadwal.kontak_supervisor || '+62 812-xxxx-xxxx',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 102,
        "context": "difficulty: getDifficultyFromShift(jadwal.shift, jadwal.unit_kerja),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 102,
        "context": "difficulty: getDifficultyFromShift(jadwal.shift, jadwal.unit_kerja),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 103,
        "context": "xpReward: calculateXpReward(jadwal.shift, jadwal.unit_kerja),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 103,
        "context": "xpReward: calculateXpReward(jadwal.shift, jadwal.unit_kerja),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 104,
        "context": "status: jadwal.status || 'scheduled',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 105,
        "context": "missionType: getMissionType(jadwal.unit_kerja),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 106,
        "context": "urgency: getUrgency(jadwal.unit_kerja, jadwal.catatan),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 106,
        "context": "urgency: getUrgency(jadwal.unit_kerja, jadwal.catatan),",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 107,
        "context": "notes: jadwal.catatan || ''",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 110,
        "context": "console.error('Error transforming jadwal:', error, jadwal);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/JadwalJagaTraditional.tsx",
        "line": 110,
        "context": "console.error('Error transforming jadwal:', error, jadwal);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/Login.tsx",
        "line": 84,
        "context": "description: 'Atur dan pantau jadwal kerja dengan mudah'",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MainApp.tsx",
        "line": 24,
        "context": "{ id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "line": 67,
        "context": "const response = await UnifiedAuth.makeRequest('/dokter/web-api/jadwal-jaga');",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "line": 90,
        "context": "console.error('Error fetching jadwal:', err);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "line": 91,
        "context": "setError('Gagal memuat jadwal jaga');",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "line": 173,
        "context": "<p className=\"text-gray-400 text-sm sm:text-base\">Ringkasan jadwal jaga bulan ini</p>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "line": 242,
        "context": "<span className=\"text-gray-400\">Memuat jadwal jaga...</span>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MedicalMissionPage.tsx",
        "line": 369,
        "context": "<p className=\"text-gray-400 text-lg\">Tidak ada jadwal jaga</p>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/MedicalRPGBottomNav.tsx",
        "line": 43,
        "context": "id: 'jadwal',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "line": 399,
        "context": "// Calculate target minutes and shortfall for today using dynamic jadwal jaga",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "line": 402,
        "context": "// Get dynamic target from jadwal jaga API",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "line": 403,
        "context": "const response = await apiCall('/api/jadwal-jaga/duration');",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/Presensi.tsx",
        "line": 456,
        "context": "console.error('❌ Error fetching jadwal duration:', error);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/SafeErrorBoundary.tsx",
        "line": 40,
        "context": "// Check if it's the jadwal object error",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "line": 28,
        "context": "const response = await fetch('/api/v2/dashboards/dokter/jadwal-jaga', {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/dokter/SimpleJadwalJaga.tsx",
        "line": 63,
        "context": "console.error('Error fetching jadwal:', err);",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "line": 122,
        "context": "{ id: 'jadwal', label: 'Jadwal', icon: Calendar },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "line": 133,
        "context": "case 'jadwal':",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/App.tsx",
        "line": 153,
        "context": "if (['dashboard', 'jadwal', 'jaspel', 'presensi', 'laporan', 'profil'].includes(activeTab)) {",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "line": 116,
        "context": "{ id: 'jadwal', label: 'Jadwal Jaga', icon: Calendar },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/AppModern.tsx",
        "line": 366,
        "context": "case 'jadwal':",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "line": 182,
        "context": "description: 'Lihat jadwal',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "line": 184,
        "context": "href: '/paramedis/jadwal',",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "line": 85,
        "context": "const url = `/api/v2/dashboards/paramedis/jadwal-jaga/mobile-data?${params}`;",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "line": 332,
        "context": "Manajemen jadwal kerja profesional",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "line": 363,
        "context": "<p className=\"font-medium\">Memuat jadwal jaga...</p>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga-Clean.tsx",
        "line": 376,
        "context": "<h3 className=\"text-lg font-semibold mb-2\">Belum ada jadwal jaga</h3>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "line": 91,
        "context": "`/paramedis/api/v2/jadwal-jaga/mobile-data?${params}`,",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "line": 92,
        "context": "`/api/v2/jadwal-jaga/mobile-data-alt?${params}`",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "line": 508,
        "context": "Sistem WORLD-CLASS - Manajemen jadwal kerja profesional",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "line": 573,
        "context": "<p className=\"font-semibold text-lg\">Memuat jadwal jaga...</p>",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJaga.tsx",
        "line": 608,
        "context": "Belum ada jadwal jaga",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 118,
        "context": "// Mock jadwal data - in real app, this would come from API",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 203,
        "context": "setError('Gagal memuat data jadwal jaga');",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 324,
        "context": "currentPage=\"jadwal\"",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 330,
        "context": "searchPlaceholder=\"Cari lokasi, shift, jadwal...\"",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 355,
        "context": "Manajemen jadwal kerja profesional • Februari 2025",
        "isInJSX": true,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 496,
        "context": "{filteredData.length} jadwal",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 559,
        "context": "{searchQuery ? 'Tidak ada jadwal yang sesuai dengan pencarian' : 'Belum ada jadwal jaga'}",
        "isInJSX": true,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/JadwalJagaMinimalist.tsx",
        "line": 559,
        "context": "{searchQuery ? 'Tidak ada jadwal yang sesuai dengan pencarian' : 'Belum ada jadwal jaga'}",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/Login.tsx",
        "line": 84,
        "context": "description: 'Atur dan pantau jadwal kerja dengan mudah'",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/MainApp.tsx",
        "line": 24,
        "context": "{ id: 'jadwal', label: 'Jadwal', icon: Calendar, component: JadwalJaga },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/Presensi.tsx",
        "line": 921,
        "context": "💡 Sistem mendukung check-in/out multiple untuk jadwal jaga berbeda dalam 1 hari",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "line": 40,
        "context": "currentPage: 'dashboard' | 'jadwal' | 'presensi' | 'laporan';",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "line": 70,
        "context": "searchPlaceholder = \"Cari data, laporan, jadwal...\",",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "line": 105,
        "context": "{ key: 'jadwal', label: 'Jadwal Jaga', icon: Calendar },",
        "isInJSX": false,
        "riskLevel": "MEDIUM"
      },
      {
        "file": "resources/js/components/paramedis/TopBarIntegration.tsx",
        "line": 7,
        "context": "const [currentPage, setCurrentPage] = useState<'dashboard' | 'jadwal' | 'presensi' | 'laporan'>('dashboard');",
        "isInJSX": false,
        "riskLevel": "LOW"
      },
      {
        "file": "resources/js/components/paramedis/TopBarIntegration.tsx",
        "line": 130,
        "context": "searchPlaceholder=\"Cari jadwal, laporan, data pasien...\"",
        "isInJSX": false,
        "riskLevel": "LOW"
      }
    ],
    "potentialIssues": [
      {
        "file": "resources/js/components/JadwalJaga.tsx",
        "line": 179,
        "severity": "MEDIUM",
        "issue": "Array map might return non-React element",
        "code": ".map(item => \n            item.id === id ? ",
        "context": "jadwal: prev.jadwal.map(item =>",
        "solution": "Ensure map returns JSX element or primitive value"
      },
      {
        "file": "resources/js/components/dokter/DokterLeafletMap.tsx",
        "line": 266,
        "severity": "MEDIUM",
        "issue": "Array map might return non-React element",
        "code": ".map(loc => [parseFloat(loc.latitude)",
        "context": "workLocations.map(loc => [parseFloat(loc.latitude), parseFloat(loc.longitude)])",
        "solution": "Ensure map returns JSX element or primitive value"
      },
      {
        "file": "resources/js/components/dokter/JadwalJaga.tsx",
        "line": 165,
        "severity": "HIGH",
        "issue": "Direct object reference in JSX",
        "code": "{jadwal.id}",
        "context": "key={jadwal.id}",
        "solution": "Convert object to string or valid React element"
      },
      {
        "file": "resources/js/components/paramedis/DashboardMinimalist.tsx",
        "line": 414,
        "severity": "MEDIUM",
        "issue": "Array map might return non-React element",
        "code": ".map(n => n[0]).join('').substring(0",
        "context": "{user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "solution": "Ensure map returns JSX element or primitive value"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "line": 348,
        "severity": "MEDIUM",
        "issue": "Array map might return non-React element",
        "code": ".map(n => n[0]).join('').substring(0",
        "context": "{user.avatar || user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "solution": "Ensure map returns JSX element or primitive value"
      },
      {
        "file": "resources/js/components/paramedis/TopBar.tsx",
        "line": 384,
        "severity": "MEDIUM",
        "issue": "Array map might return non-React element",
        "code": ".map(n => n[0]).join('').substring(0",
        "context": "{user.avatar || user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}",
        "solution": "Ensure map returns JSX element or primitive value"
      }
    ],
    "recommendations": [
      "Wrap suspicious components with the JadwalErrorBoundary component",
      "Add console.log statements before JSX returns to inspect object values",
      "Use TypeScript strict mode to catch object rendering at compile time",
      "Found 23 jadwal references in JSX context - inspect these carefully",
      "Consider using jadwal.propertyName instead of {jadwal} in JSX",
      "Found 107 potential direct object renders - convert to strings or elements",
      "Use the DebugWrapper component around suspicious render areas",
      "Enable React strict mode to catch more rendering issues",
      "Consider using a linter rule to prevent object rendering"
    ]
  }
}