<?php

namespace Tests\Unit\Widgets;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;
use App\Filament\Petugas\Widgets\QuickActionsWidget;
use App\Models\User;
use Spatie\Permission\Models\Role;

class QuickActionsWidgetTest extends TestCase
{
    use RefreshDatabase;

    protected QuickActionsWidget $widget;
    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();
        
        $this->user = User::factory()->create();
        Auth::login($this->user);
        
        $this->widget = new QuickActionsWidget();
        
        // Register test routes to avoid route not found errors
        $this->registerTestRoutes();
    }

    protected function registerTestRoutes(): void
    {
        Route::get('/test/pasiens/create', function () {
            return 'create pasien';
        })->name('filament.petugas.resources.pasiens.create');
        
        Route::get('/test/tindakans/create', function () {
            return 'create tindakan';
        })->name('filament.petugas.resources.tindakans.create');
        
        Route::get('/test/pendapatan-harians/create', function () {
            return 'create pendapatan';
        })->name('filament.petugas.resources.pendapatan-harians.create');
        
        Route::get('/test/pengeluaran-harians/create', function () {
            return 'create pengeluaran';
        })->name('filament.petugas.resources.pengeluaran-harians.create');
        
        Route::get('/test/jumlah-pasien-harians/create', function () {
            return 'create laporan';
        })->name('filament.petugas.resources.jumlah-pasien-harians.create');
        
        Route::get('/test/pasiens', function () {
            return 'view pasiens';
        })->name('filament.petugas.resources.pasiens.index');
    }

    public function test_it_returns_correct_actions_for_authenticated_user()
    {
        // Act
        $actions = $this->widget->getActions();
        
        // Assert
        $this->assertIsArray($actions);
        $this->assertCount(6, $actions); // Should have 6 actions
        
        // Check action names/keys exist
        $actionLabels = array_map(fn($action) => $action->getLabel(), $actions);
        
        $this->assertContains('Tambah Pasien', $actionLabels);
        $this->assertContains('Input Tindakan', $actionLabels);
        $this->assertContains('Input Pendapatan', $actionLabels);
        $this->assertContains('Input Pengeluaran', $actionLabels);
        $this->assertContains('Laporan Harian', $actionLabels);
        $this->assertContains('Lihat Semua Pasien', $actionLabels);
    }

    public function test_it_returns_empty_actions_for_unauthenticated_user()
    {
        // Arrange
        Auth::logout();
        
        // Act
        $actions = $this->widget->getActions();
        
        // Assert
        $this->assertIsArray($actions);
        $this->assertCount(0, $actions);
    }

    public function test_it_handles_missing_routes_gracefully()
    {
        // Arrange - Create widget with non-existent routes
        Route::getRoutes()->flush();
        
        // Act
        $actions = $this->widget->getActions();
        
        // Assert - Should handle missing routes gracefully
        $this->assertIsArray($actions);
        // Should return empty or fewer actions when routes don't exist
    }

    public function test_it_generates_correct_user_greeting()
    {
        // Test morning greeting
        $this->travelTo(now()->setHour(10)); // 10 AM
        $greeting = $this->widget->getUserGreeting();
        $this->assertStringContains('Selamat pagi', $greeting);
        $this->assertStringContains($this->user->name, $greeting);
        
        // Test afternoon greeting
        $this->travelTo(now()->setHour(14)); // 2 PM
        $greeting = $this->widget->getUserGreeting();
        $this->assertStringContains('Selamat siang', $greeting);
        
        // Test evening greeting
        $this->travelTo(now()->setHour(19)); // 7 PM
        $greeting = $this->widget->getUserGreeting();
        $this->assertStringContains('Selamat malam', $greeting);
    }

    public function test_it_handles_unauthenticated_user_greeting()
    {
        // Arrange
        Auth::logout();
        
        // Act
        $greeting = $this->widget->getUserGreeting();
        
        // Assert
        $this->assertEquals('Selamat datang!', $greeting);
    }

    public function test_it_provides_role_based_workflow_tips()
    {
        // Test default user tips
        $tips = $this->widget->getWorkflowTips();
        
        $this->assertIsArray($tips);
        $this->assertGreaterThan(5, count($tips)); // Should have base tips + role tips
        
        // Check for base tips
        $this->assertContains('Mulai hari dengan memeriksa jadwal pasien', $tips);
        $this->assertContains('Input data pasien sesegera mungkin setelah registrasi', $tips);
        $this->assertContains('Catat semua tindakan medis yang dilakukan', $tips);
        
        // Check for default role tips
        $this->assertContains('Pastikan semua input data sudah benar sebelum submit', $tips);
        $this->assertContains('Gunakan fitur bulk operation untuk efisiensi', $tips);
    }

    public function test_it_provides_supervisor_specific_tips()
    {
        // Arrange
        $supervisorRole = Role::firstOrCreate(['name' => 'supervisor'], ['display_name' => 'Supervisor']);
        $this->user->assignRole($supervisorRole);
        
        // Act
        $tips = $this->widget->getWorkflowTips();
        
        // Assert
        $this->assertIsArray($tips);
        $this->assertContains('Review dan approve validasi yang pending', $tips);
        $this->assertContains('Monitor performa tim dan berikan feedback', $tips);
    }

    public function test_it_provides_admin_specific_tips()
    {
        // Arrange
        $adminRole = Role::firstOrCreate(['name' => 'admin'], ['display_name' => 'Admin']);
        $this->user->assignRole($adminRole);
        
        // Act
        $tips = $this->widget->getWorkflowTips();
        
        // Assert
        $this->assertIsArray($tips);
        $this->assertContains('Backup data system secara berkala', $tips);
        $this->assertContains('Monitor system health dan performance', $tips);
    }

    public function test_it_handles_tips_error_gracefully()
    {
        // Arrange - Force an error by mocking Auth to throw exception
        Auth::shouldReceive('user')
            ->andThrow(new \Exception('Auth error'));
        
        // Act
        $tips = $this->widget->getWorkflowTips();
        
        // Assert - Should return fallback tips
        $this->assertIsArray($tips);
        $this->assertContains('Mulai hari dengan memeriksa jadwal pasien', $tips);
        $this->assertContains('Input data pasien sesegera mungkin setelah registrasi', $tips);
    }

    public function test_it_provides_complete_view_data()
    {
        // Act
        $viewData = $this->widget->getViewData();
        
        // Assert
        $this->assertIsArray($viewData);
        $this->assertArrayHasKey('actions', $viewData);
        $this->assertArrayHasKey('greeting', $viewData);
        $this->assertArrayHasKey('tips', $viewData);
        $this->assertArrayHasKey('user', $viewData);
        $this->assertArrayHasKey('last_updated', $viewData);
        
        $this->assertIsArray($viewData['actions']);
        $this->assertIsString($viewData['greeting']);
        $this->assertIsArray($viewData['tips']);
        $this->assertInstanceOf(User::class, $viewData['user']);
        $this->assertIsString($viewData['last_updated']);
        
        // Check greeting contains user name
        $this->assertStringContains($this->user->name, $viewData['greeting']);
        
        // Check last_updated format
        $this->assertMatchesRegularExpression('/\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}/', $viewData['last_updated']);
    }

    public function test_it_handles_view_data_error_gracefully()
    {
        // Arrange
        Auth::logout();
        
        // Act
        $viewData = $this->widget->getViewData();
        
        // Assert - Should return error view data structure
        $this->assertIsArray($viewData);
        $this->assertArrayHasKey('actions', $viewData);
        $this->assertArrayHasKey('greeting', $viewData);
        $this->assertArrayHasKey('tips', $viewData);
        $this->assertArrayHasKey('user', $viewData);
        $this->assertArrayHasKey('last_updated', $viewData);
        $this->assertArrayHasKey('error', $viewData);
        
        $this->assertEmpty($viewData['actions']);
        $this->assertEquals('Selamat datang!', $viewData['greeting']);
        $this->assertEmpty($viewData['tips']);
        $this->assertNull($viewData['user']);
        $this->assertEquals('Gagal memuat data widget', $viewData['error']);
    }

    public function test_it_checks_user_permissions_for_actions()
    {
        // Note: This test assumes permission system is implemented
        // If not implemented yet, this test documents the intended behavior
        
        // Arrange - Create a user without specific permissions
        $limitedUser = User::factory()->create();
        Auth::login($limitedUser);
        
        // Act
        $actions = $this->widget->getActions();
        
        // Assert - Should still return actions (basic permission check)
        // In a full implementation, this would filter based on actual permissions
        $this->assertIsArray($actions);
    }

    public function test_it_validates_action_configuration_structure()
    {
        // Act
        $widget = new QuickActionsWidget();
        $reflection = new \ReflectionClass($widget);
        $property = $reflection->getProperty('actionDefinitions');
        $property->setAccessible(true);
        $actionDefinitions = $property->getValue($widget);
        
        // Assert
        $this->assertIsArray($actionDefinitions);
        
        foreach ($actionDefinitions as $actionKey => $config) {
            $this->assertArrayHasKey('label', $config, "Action {$actionKey} missing label");
            $this->assertArrayHasKey('icon', $config, "Action {$actionKey} missing icon");
            $this->assertArrayHasKey('color', $config, "Action {$actionKey} missing color");
            $this->assertArrayHasKey('route', $config, "Action {$actionKey} missing route");
            $this->assertArrayHasKey('permission', $config, "Action {$actionKey} missing permission");
            
            $this->assertIsString($config['label']);
            $this->assertIsString($config['icon']);
            $this->assertIsString($config['color']);
            $this->assertIsString($config['route']);
            $this->assertIsString($config['permission']);
            
            // Validate icon format (should be heroicon)
            $this->assertStringStartsWith('heroicon-', $config['icon']);
            
            // Validate color is valid Filament color
            $this->assertContains($config['color'], ['primary', 'secondary', 'success', 'warning', 'danger', 'info', 'gray']);
        }
    }

    public function test_it_has_correct_action_definitions()
    {
        // Act
        $widget = new QuickActionsWidget();
        $reflection = new \ReflectionClass($widget);
        $property = $reflection->getProperty('actionDefinitions');
        $property->setAccessible(true);
        $actionDefinitions = $property->getValue($widget);
        
        // Assert expected actions exist
        $expectedActions = [
            'add_patient',
            'add_procedure', 
            'add_income',
            'add_expense',
            'daily_report',
            'view_patients'
        ];
        
        foreach ($expectedActions as $expectedAction) {
            $this->assertArrayHasKey($expectedAction, $actionDefinitions);
        }
        
        // Check specific action configurations
        $this->assertEquals('Tambah Pasien', $actionDefinitions['add_patient']['label']);
        $this->assertEquals('heroicon-o-user-plus', $actionDefinitions['add_patient']['icon']);
        $this->assertEquals('primary', $actionDefinitions['add_patient']['color']);
        
        $this->assertEquals('Input Tindakan', $actionDefinitions['add_procedure']['label']);
        $this->assertEquals('heroicon-o-hand-raised', $actionDefinitions['add_procedure']['icon']);
        $this->assertEquals('success', $actionDefinitions['add_procedure']['color']);
    }

    public function test_it_handles_route_checking_correctly()
    {
        // Test that widget checks for route existence
        // This prevents errors when routes are not registered
        
        // Arrange - Clear some routes
        $originalRoutes = Route::getRoutes();
        Route::getRoutes()->flush();
        
        // Re-register only some routes
        Route::get('/test/pasiens/create', function () {
            return 'create pasien';
        })->name('filament.petugas.resources.pasiens.create');
        
        // Act
        $actions = $this->widget->getActions();
        
        // Assert - Should only include actions with existing routes
        $this->assertIsArray($actions);
        $this->assertLessThanOrEqual(6, count($actions));
        
        // Restore routes
        app()->singleton('router', function () use ($originalRoutes) {
            $router = new \Illuminate\Routing\Router(app('events'), app());
            $router->setRoutes($originalRoutes);
            return $router;
        });
    }

    public function test_it_logs_errors_appropriately()
    {
        // This test would check that errors are logged properly
        // Implementation depends on how logging is set up in the widget
        
        // For now, this documents the expected behavior
        $this->assertTrue(true, 'Error logging test placeholder');
    }

    public function test_it_has_correct_widget_properties()
    {
        // Test widget configuration
        $this->assertEquals('filament.petugas.widgets.quick-actions-widget', $this->widget::getView());
        $this->assertEquals('full', $this->widget->getColumnSpan());
    }

    protected function tearDown(): void
    {
        parent::tearDown();
    }
}