<?php

namespace Tests\Feature\Performance;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Livewire\Livewire;
use App\Models\User;
use App\Models\Pasien;
use App\Models\Tindakan;
use App\Models\PendapatanHarian;
use App\Models\PengeluaranHarian;
use App\Models\JumlahPasienHarian;
use App\Models\JenisTindakan;
use App\Models\Pendapatan;
use App\Models\Pengeluaran;
use App\Models\Shift;
use App\Services\PetugasStatsService;
use App\Filament\Petugas\Widgets\PetugasStatsWidget;
use App\Filament\Petugas\Widgets\QuickActionsWidget;
use App\Filament\Petugas\Widgets\NotificationWidget;
use App\Filament\Petugas\Resources\PasienResource\Pages\ListPasiens;
use App\Filament\Petugas\Resources\TindakanResource\Pages\ListTindakans;
use App\Filament\Petugas\Resources\PendapatanHarianResource\Pages\ListPendapatanHarians;
use Spatie\Permission\Models\Role;

class DashboardPerformanceTest extends TestCase
{
    use RefreshDatabase;

    protected User $petugas;
    protected PetugasStatsService $statsService;
    protected array $baseData;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Create role and user
        Role::firstOrCreate(['name' => 'petugas'], ['display_name' => 'Petugas']);
        $this->petugas = User::factory()->create(['name' => 'Performance Test User']);
        $this->petugas->assignRole('petugas');
        
        $this->statsService = new PetugasStatsService();
        
        // Create base data
        $this->createBaseData();
        
        // Clear cache
        Cache::flush();
    }

    protected function createBaseData(): void
    {
        $this->baseData = [
            'jenis_tindakan' => JenisTindakan::factory()->create(['tarif' => 150000]),
            'pendapatan' => Pendapatan::factory()->create(['nama_pendapatan' => 'Konsultasi']),
            'pengeluaran' => Pengeluaran::factory()->create(['nama_pengeluaran' => 'Obat']),
            'shift' => Shift::factory()->create(['name' => 'Pagi', 'is_active' => true]),
        ];
    }

    public function test_dashboard_load_performance_with_small_dataset()
    {
        // Test dashboard performance with small dataset (< 100 records)
        $this->actingAs($this->petugas);
        
        // Create small dataset
        $this->createDataset(50, 25, 30, 20, 10);
        
        $startTime = microtime(true);
        
        // Test main dashboard page load
        $response = $this->get('/petugas');
        
        $endTime = microtime(true);
        $loadTime = $endTime - $startTime;
        
        // Should load quickly with small dataset
        $this->assertLessThan(2.0, $loadTime);
        $response->assertSuccessful();
    }

    public function test_dashboard_load_performance_with_medium_dataset()
    {
        // Test dashboard performance with medium dataset (100-1000 records)
        $this->actingAs($this->petugas);
        
        // Create medium dataset
        $this->createDataset(500, 300, 400, 250, 100);
        
        $startTime = microtime(true);
        
        $response = $this->get('/petugas');
        
        $endTime = microtime(true);
        $loadTime = $endTime - $startTime;
        
        // Should still load reasonably fast
        $this->assertLessThan(5.0, $loadTime);
        $response->assertSuccessful();
    }

    public function test_dashboard_load_performance_with_large_dataset()
    {
        // Test dashboard performance with large dataset (1000+ records)
        $this->actingAs($this->petugas);
        
        // Create large dataset
        $this->createDataset(2000, 1500, 1800, 1200, 500);
        
        $startTime = microtime(true);
        
        $response = $this->get('/petugas');
        
        $endTime = microtime(true);
        $loadTime = $endTime - $startTime;
        
        // Should load within acceptable time even with large dataset
        $this->assertLessThan(10.0, $loadTime);
        $response->assertSuccessful();
    }

    public function test_widget_individual_performance()
    {
        // Test individual widget performance
        $this->actingAs($this->petugas);
        
        // Create moderate dataset
        $this->createDataset(200, 150, 180, 120, 50);
        
        // Test PetugasStatsWidget
        $startTime = microtime(true);
        $statsWidget = new PetugasStatsWidget();
        $statsData = $statsWidget->getViewData();
        $statsTime = microtime(true) - $startTime;
        
        $this->assertLessThan(3.0, $statsTime);
        $this->assertIsArray($statsData);
        
        // Test QuickActionsWidget
        $startTime = microtime(true);
        $actionsWidget = new QuickActionsWidget();
        $actionsData = $actionsWidget->getViewData();
        $actionsTime = microtime(true) - $startTime;
        
        $this->assertLessThan(1.0, $actionsTime);
        $this->assertIsArray($actionsData);
        
        // Test NotificationWidget
        $startTime = microtime(true);
        $notificationWidget = new NotificationWidget();
        $notificationData = $notificationWidget->getViewData();
        $notificationTime = microtime(true) - $startTime;
        
        $this->assertLessThan(2.0, $notificationTime);
        $this->assertIsArray($notificationData);
    }

    public function test_stats_service_performance_metrics()
    {
        // Test detailed performance metrics of stats service
        $this->actingAs($this->petugas);
        
        // Create test data
        $this->createDataset(1000, 600, 800, 500, 200);
        
        // Test cold cache performance
        Cache::flush();
        $startTime = microtime(true);
        $coldStats = $this->statsService->getDashboardStats($this->petugas->id);
        $coldTime = microtime(true) - $startTime;
        
        // Test warm cache performance
        $startTime = microtime(true);
        $warmStats = $this->statsService->getDashboardStats($this->petugas->id);
        $warmTime = microtime(true) - $startTime;
        
        // Cold cache should be slower but reasonable
        $this->assertLessThan(5.0, $coldTime);
        
        // Warm cache should be significantly faster
        $this->assertLessThan($coldTime * 0.3, $warmTime);
        $this->assertLessThan(1.0, $warmTime);
        
        // Results should be identical
        $this->assertEquals($coldStats, $warmStats);
    }

    public function test_database_query_performance()
    {
        // Test database query performance and N+1 prevention
        $this->actingAs($this->petugas);
        
        // Create data with relationships
        $patients = Pasien::factory()->count(100)->create(['input_by' => $this->petugas->id]);
        
        foreach ($patients as $patient) {
            Tindakan::factory()->count(rand(1, 3))->create([
                'input_by' => $this->petugas->id,
                'pasien_id' => $patient->id,
                'jenis_tindakan_id' => $this->baseData['jenis_tindakan']->id,
                'shift_id' => $this->baseData['shift']->id,
            ]);
        }
        
        // Count queries before
        DB::enableQueryLog();
        
        $startTime = microtime(true);
        
        // Load patient list with relationships
        $component = Livewire::test(ListPasiens::class);
        $tableData = $component->get('table')->getRecords();
        
        $endTime = microtime(true);
        $queryTime = $endTime - $startTime;
        $queryLog = DB::getQueryLog();
        
        // Should complete quickly
        $this->assertLessThan(3.0, $queryTime);
        
        // Should not have excessive queries (N+1 prevention)
        $this->assertLessThan(10, count($queryLog));
        
        // Should load data correctly
        $this->assertGreaterThan(0, $tableData->count());
        
        DB::disableQueryLog();
    }

    public function test_pagination_performance()
    {
        // Test pagination performance with large datasets
        $this->actingAs($this->petugas);
        
        // Create large dataset
        Pasien::factory()->count(1000)->create(['input_by' => $this->petugas->id]);
        
        // Test first page load
        $startTime = microtime(true);
        $component = Livewire::test(ListPasiens::class);
        $firstPageTime = microtime(true) - $startTime;
        
        $this->assertLessThan(3.0, $firstPageTime);
        
        // Test navigation to different pages
        $startTime = microtime(true);
        $component->set('tablePage', 5); // Go to page 5
        $pageNavTime = microtime(true) - $startTime;
        
        $this->assertLessThan(2.0, $pageNavTime);
        
        // Test last page
        $startTime = microtime(true);
        $component->set('tablePage', 40); // Assuming 25 per page = 40 pages
        $lastPageTime = microtime(true) - $startTime;
        
        $this->assertLessThan(2.0, $lastPageTime);
    }

    public function test_search_performance()
    {
        // Test search performance
        $this->actingAs($this->petugas);
        
        // Create searchable data
        for ($i = 1; $i <= 500; $i++) {
            Pasien::factory()->create([
                'input_by' => $this->petugas->id,
                'nama' => "Patient Name {$i}",
                'no_rekam_medis' => "RM-2024-" . str_pad($i, 4, '0', STR_PAD_LEFT),
            ]);
        }
        
        // Test exact search
        $startTime = microtime(true);
        $component = Livewire::test(ListPasiens::class)
            ->set('tableSearch', 'RM-2024-0250');
        $exactSearchTime = microtime(true) - $startTime;
        
        $this->assertLessThan(1.0, $exactSearchTime);
        
        // Test partial search
        $startTime = microtime(true);
        $component = Livewire::test(ListPasiens::class)
            ->set('tableSearch', 'Patient Name 2');
        $partialSearchTime = microtime(true) - $startTime;
        
        $this->assertLessThan(2.0, $partialSearchTime);
        
        // Test wildcard search
        $startTime = microtime(true);
        $component = Livewire::test(ListPasiens::class)
            ->set('tableSearch', 'RM-2024');
        $wildcardSearchTime = microtime(true) - $startTime;
        
        $this->assertLessThan(3.0, $wildcardSearchTime);
    }

    public function test_sorting_performance()
    {
        // Test sorting performance
        $this->actingAs($this->petugas);
        
        // Create data for sorting
        Pasien::factory()->count(200)->create([
            'input_by' => $this->petugas->id,
            'created_at' => now()->subDays(rand(0, 30)),
        ]);
        
        // Test sort by different columns
        $sortColumns = ['nama', 'no_rekam_medis', 'created_at', 'tanggal_lahir'];
        
        foreach ($sortColumns as $column) {
            $startTime = microtime(true);
            
            $component = Livewire::test(ListPasiens::class)
                ->set('tableSortColumn', $column)
                ->set('tableSortDirection', 'asc');
            
            $sortTime = microtime(true) - $startTime;
            
            $this->assertLessThan(2.0, $sortTime, "Sorting by {$column} took too long");
            
            // Test reverse sort
            $startTime = microtime(true);
            $component->set('tableSortDirection', 'desc');
            $reverseSortTime = microtime(true) - $startTime;
            
            $this->assertLessThan(1.0, $reverseSortTime, "Reverse sorting by {$column} took too long");
        }
    }

    public function test_memory_usage_performance()
    {
        // Test memory usage during dashboard operations
        $this->actingAs($this->petugas);
        
        $initialMemory = memory_get_usage(true);
        
        // Create moderate dataset
        $this->createDataset(300, 200, 250, 150, 75);
        
        // Load dashboard components
        $statsWidget = new PetugasStatsWidget();
        $statsData = $statsWidget->getViewData();
        
        $actionsWidget = new QuickActionsWidget();
        $actionsData = $actionsWidget->getViewData();
        
        $component = Livewire::test(ListPasiens::class);
        
        $peakMemory = memory_get_peak_usage(true);
        $memoryIncrease = $peakMemory - $initialMemory;
        
        // Should not use excessive memory
        $this->assertLessThan(100 * 1024 * 1024, $memoryIncrease); // Less than 100MB
    }

    public function test_concurrent_user_performance()
    {
        // Test performance with multiple concurrent users
        $users = [];
        for ($i = 1; $i <= 5; $i++) {
            $user = User::factory()->create(['name' => "Concurrent User {$i}"]);
            $user->assignRole('petugas');
            $users[] = $user;
            
            // Create data for each user
            Pasien::factory()->count(50)->create(['input_by' => $user->id]);
            
            PendapatanHarian::factory()->count(30)->create([
                'user_id' => $user->id,
                'pendapatan_id' => $this->baseData['pendapatan']->id,
            ]);
        }
        
        $startTime = microtime(true);
        
        // Simulate concurrent access
        $results = [];
        foreach ($users as $user) {
            $this->actingAs($user);
            $results[] = $this->statsService->getDashboardStats($user->id);
        }
        
        $endTime = microtime(true);
        $totalTime = $endTime - $startTime;
        
        // Should handle concurrent users efficiently
        $this->assertLessThan(8.0, $totalTime);
        $this->assertCount(5, $results);
        
        // Each user should get their own data
        foreach ($results as $result) {
            $this->assertIsArray($result);
            $this->assertArrayHasKey('daily', $result);
        }
    }

    public function test_cache_performance_impact()
    {
        // Test cache performance impact
        $this->actingAs($this->petugas);
        
        // Create test data
        $this->createDataset(400, 250, 300, 200, 100);
        
        // Test with cache disabled
        Cache::flush();
        config(['cache.default' => 'array']); // Use array cache (no persistence)
        
        $startTime = microtime(true);
        $noCacheStats = $this->statsService->getDashboardStats($this->petugas->id);
        $noCacheTime = microtime(true) - $startTime;
        
        // Test with cache enabled
        config(['cache.default' => 'file']); // Use file cache
        Cache::flush();
        
        // First call (populates cache)
        $startTime = microtime(true);
        $firstCacheStats = $this->statsService->getDashboardStats($this->petugas->id);
        $firstCacheTime = microtime(true) - $startTime;
        
        // Second call (uses cache)
        $startTime = microtime(true);
        $secondCacheStats = $this->statsService->getDashboardStats($this->petugas->id);
        $secondCacheTime = microtime(true) - $startTime;
        
        // Cache should provide significant performance improvement
        $this->assertLessThan($noCacheTime * 0.5, $secondCacheTime);
        $this->assertEquals($firstCacheStats, $secondCacheStats);
    }

    public function test_database_connection_performance()
    {
        // Test database connection pooling and efficiency
        $this->actingAs($this->petugas);
        
        $connectionsBefore = count(DB::getConnections());
        
        $startTime = microtime(true);
        
        // Perform multiple database operations
        for ($i = 1; $i <= 20; $i++) {
            Pasien::factory()->create(['input_by' => $this->petugas->id]);
            $this->statsService->getDashboardStats($this->petugas->id);
        }
        
        $endTime = microtime(true);
        $operationTime = $endTime - $startTime;
        
        $connectionsAfter = count(DB::getConnections());
        
        // Should not create excessive connections
        $this->assertLessThanOrEqual($connectionsBefore + 2, $connectionsAfter);
        
        // Should complete operations efficiently
        $this->assertLessThan(10.0, $operationTime);
    }

    public function test_response_time_consistency()
    {
        // Test response time consistency across multiple requests
        $this->actingAs($this->petugas);
        
        // Create consistent dataset
        $this->createDataset(200, 150, 180, 120, 60);
        
        $responseTimes = [];
        
        // Make 10 identical requests
        for ($i = 0; $i < 10; $i++) {
            $startTime = microtime(true);
            $this->statsService->getDashboardStats($this->petugas->id);
            $endTime = microtime(true);
            
            $responseTimes[] = $endTime - $startTime;
        }
        
        $avgTime = array_sum($responseTimes) / count($responseTimes);
        $maxTime = max($responseTimes);
        $minTime = min($responseTimes);
        
        // Response times should be consistent
        $this->assertLessThan($avgTime * 2, $maxTime); // Max shouldn't be more than 2x average
        $this->assertLessThan(3.0, $avgTime); // Average should be reasonable
        
        // Calculate standard deviation
        $variance = array_sum(array_map(function($time) use ($avgTime) {
            return pow($time - $avgTime, 2);
        }, $responseTimes)) / count($responseTimes);
        
        $stdDev = sqrt($variance);
        
        // Standard deviation should be low (consistent performance)
        $this->assertLessThan($avgTime * 0.5, $stdDev);
    }

    protected function createDataset(int $patients, int $tindakan, int $pendapatan, int $pengeluaran, int $laporan): void
    {
        // Create patients
        $patientIds = Pasien::factory()->count($patients)
            ->create(['input_by' => $this->petugas->id])
            ->pluck('id');
        
        // Create tindakan
        for ($i = 0; $i < $tindakan; $i++) {
            Tindakan::factory()->create([
                'input_by' => $this->petugas->id,
                'pasien_id' => $patientIds->random(),
                'jenis_tindakan_id' => $this->baseData['jenis_tindakan']->id,
                'shift_id' => $this->baseData['shift']->id,
                'created_at' => now()->subDays(rand(0, 30)),
            ]);
        }
        
        // Create pendapatan harian
        for ($i = 0; $i < $pendapatan; $i++) {
            PendapatanHarian::factory()->create([
                'user_id' => $this->petugas->id,
                'pendapatan_id' => $this->baseData['pendapatan']->id,
                'tanggal_input' => now()->subDays(rand(0, 30))->format('Y-m-d'),
            ]);
        }
        
        // Create pengeluaran harian
        for ($i = 0; $i < $pengeluaran; $i++) {
            PengeluaranHarian::factory()->create([
                'user_id' => $this->petugas->id,
                'pengeluaran_id' => $this->baseData['pengeluaran']->id,
                'tanggal_input' => now()->subDays(rand(0, 30))->format('Y-m-d'),
            ]);
        }
        
        // Create jumlah pasien harian
        for ($i = 0; $i < $laporan; $i++) {
            JumlahPasienHarian::factory()->create([
                'user_id' => $this->petugas->id,
                'tanggal' => now()->subDays(rand(0, 30))->format('Y-m-d'),
                'jumlah_pasien' => rand(5, 25),
            ]);
        }
    }

    protected function tearDown(): void
    {
        Cache::flush();
        parent::tearDown();
    }
}