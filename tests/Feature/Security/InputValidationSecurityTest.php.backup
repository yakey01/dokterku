<?php

namespace Tests\Feature\Security;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Livewire\Livewire;
use App\Models\User;
use App\Models\Pasien;
use App\Models\Tindakan;
use App\Models\PendapatanHarian;
use App\Models\PengeluaranHarian;
use App\Models\JenisTindakan;
use App\Models\Pendapatan;
use App\Models\Pengeluaran;
use App\Models\Shift;
use App\Filament\Petugas\Resources\PasienResource\Pages\CreatePasien;
use App\Filament\Petugas\Resources\TindakanResource\Pages\CreateTindakan;
use App\Filament\Petugas\Resources\PendapatanHarianResource\Pages\CreatePendapatanHarian;
use App\Filament\Petugas\Resources\PengeluaranHarianResource\Pages\CreatePengeluaranHarian;
use App\Services\BulkOperationService;
use Spatie\Permission\Models\Role;

class InputValidationSecurityTest extends TestCase
{
    use RefreshDatabase;

    protected User $petugas;
    protected BulkOperationService $bulkService;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Create role and user
        Role::firstOrCreate(['name' => 'petugas'], ['display_name' => 'Petugas']);
        $this->petugas = User::factory()->create(['name' => 'Test Petugas']);
        $this->petugas->assignRole('petugas');
        
        $this->bulkService = new BulkOperationService();
        
        // Create base data
        $this->createBaseData();
    }

    protected function createBaseData(): void
    {
        $this->jenisTindakan = JenisTindakan::factory()->create(['tarif' => 150000]);
        $this->pendapatan = Pendapatan::factory()->create(['nama_pendapatan' => 'Konsultasi']);
        $this->pengeluaran = Pengeluaran::factory()->create(['nama_pengeluaran' => 'Obat']);
        $this->shift = Shift::factory()->create(['name' => 'Pagi', 'is_active' => true]);
    }

    public function test_xss_prevention_in_pasien_input()
    {
        // Test XSS prevention in patient input
        $this->actingAs($this->petugas);

        $xssPayloads = [
            '<script>alert("xss")</script>',
            '<img src=x onerror=alert("xss")>',
            'javascript:alert("xss")',
            '<svg onload=alert("xss")>',
            '"><script>alert("xss")</script>',
            '\'); alert("xss"); //',
        ];

        foreach ($xssPayloads as $payload) {
            $pasienData = [
                'no_rekam_medis' => 'RM-XSS-' . uniqid(),
                'nama' => $payload,
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'alamat' => $payload,
                'email' => 'test@test.com',
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should either sanitize input or reject it
            if ($component->instance->getErrorBag()->isEmpty()) {
                // If accepted, verify it was sanitized
                $patient = Pasien::where('no_rekam_medis', $pasienData['no_rekam_medis'])->first();
                if ($patient) {
                    $this->assertStringNotContains('<script>', $patient->nama);
                    $this->assertStringNotContains('javascript:', $patient->alamat);
                    $this->assertStringNotContains('onerror=', $patient->nama);
                }
            }
        }
    }

    public function test_sql_injection_prevention()
    {
        // Test SQL injection prevention
        $this->actingAs($this->petugas);

        $sqlPayloads = [
            "'; DROP TABLE pasien; --",
            "' OR '1'='1",
            "' UNION SELECT * FROM users --",
            "1'; DELETE FROM pasien WHERE '1'='1' --",
            "'; INSERT INTO pasien (nama) VALUES ('hacked'); --",
            "' OR 1=1 --",
            "admin'--",
            "admin' #",
            "admin'/*",
        ];

        foreach ($sqlPayloads as $payload) {
            $pasienData = [
                'no_rekam_medis' => 'RM-SQL-' . uniqid(),
                'nama' => $payload,
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'alamat' => $payload,
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should not cause SQL injection - database should still be intact
            $this->assertDatabaseHas('pasien', ['input_by' => $this->petugas->id]);
            
            // Check that malicious SQL was not executed
            $patientCount = Pasien::count();
            $this->assertGreaterThan(0, $patientCount); // Table should still exist
        }
    }

    public function test_file_path_traversal_prevention()
    {
        // Test file path traversal in text inputs
        $this->actingAs($this->petugas);

        $pathTraversalPayloads = [
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            '/etc/passwd',
            'C:\\Windows\\System32\\config\\SAM',
            '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',
            '....//....//....//etc//passwd',
        ];

        foreach ($pathTraversalPayloads as $payload) {
            $pasienData = [
                'no_rekam_medis' => 'RM-PATH-' . uniqid(),
                'nama' => 'Test Patient',
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'alamat' => $payload,
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should handle path traversal attempts safely
            if ($component->instance->getErrorBag()->isEmpty()) {
                $patient = Pasien::where('no_rekam_medis', $pasienData['no_rekam_medis'])->first();
                if ($patient) {
                    // Should not contain actual file paths
                    $this->assertStringNotContains('/etc/passwd', $patient->alamat);
                    $this->assertStringNotContains('C:\\Windows', $patient->alamat);
                }
            }
        }
    }

    public function test_command_injection_prevention()
    {
        // Test command injection prevention
        $this->actingAs($this->petugas);

        $commandPayloads = [
            '; cat /etc/passwd',
            '| whoami',
            '& net user',
            '`cat /etc/passwd`',
            '$(cat /etc/passwd)',
            '; rm -rf /',
            '| del C:\\*.*',
            '&& echo "hacked"',
        ];

        foreach ($commandPayloads as $payload) {
            $pasienData = [
                'no_rekam_medis' => 'RM-CMD-' . uniqid(),
                'nama' => 'Test Patient',
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'alamat' => $payload,
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should prevent command execution
            if ($component->instance->getErrorBag()->isEmpty()) {
                $patient = Pasien::where('no_rekam_medis', $pasienData['no_rekam_medis'])->first();
                if ($patient) {
                    // Should sanitize command characters
                    $this->assertStringNotContains('cat /etc/passwd', $patient->alamat);
                    $this->assertStringNotContains('rm -rf', $patient->alamat);
                }
            }
        }
    }

    public function test_ldap_injection_prevention()
    {
        // Test LDAP injection prevention (if LDAP is used)
        $this->actingAs($this->petugas);

        $ldapPayloads = [
            '*()|&',
            '*)(uid=*))(|(uid=*',
            '*)(cn=*))(|(cn=*',
            '*))(|(objectClass=*',
            '\\2a\\29\\28\\7c\\26',
        ];

        foreach ($ldapPayloads as $payload) {
            $pasienData = [
                'no_rekam_medis' => 'RM-LDAP-' . uniqid(),
                'nama' => 'Test Patient',
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'email' => $payload . '@test.com',
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should handle LDAP injection attempts
            $this->assertTrue(true); // If we reach here, no exception was thrown
        }
    }

    public function test_input_length_validation()
    {
        // Test input length validation
        $this->actingAs($this->petugas);

        // Test extremely long input
        $veryLongString = str_repeat('A', 10000);

        $pasienData = [
            'no_rekam_medis' => 'RM-LONG-001',
            'nama' => $veryLongString,
            'tanggal_lahir' => '1990-01-01',
            'jenis_kelamin' => 'L',
            'alamat' => $veryLongString,
        ];

        $component = Livewire::test(CreatePasien::class)
            ->fillForm($pasienData)
            ->call('create');

        // Should validate input length
        $this->assertTrue(
            $component->instance->getErrorBag()->isNotEmpty() ||
            Pasien::where('nama', $veryLongString)->doesntExist()
        );
    }

    public function test_numeric_input_validation()
    {
        // Test numeric input validation in financial fields
        $this->actingAs($this->petugas);

        $invalidNumerics = [
            'not_a_number',
            '123abc',
            '1.2.3',
            '-999999999999',
            '999999999999999999999',
            'NaN',
            'Infinity',
            '1e999',
        ];

        foreach ($invalidNumerics as $invalidValue) {
            $pendapatanData = [
                'tanggal_input' => now()->format('Y-m-d'),
                'shift' => 'Pagi',
                'pendapatan_id' => $this->pendapatan->id,
                'nominal' => $invalidValue,
                'deskripsi' => 'Test description',
            ];

            $component = Livewire::test(CreatePendapatanHarian::class)
                ->fillForm($pendapatanData)
                ->call('create');

            // Should validate numeric input
            $this->assertTrue(
                $component->instance->getErrorBag()->has('nominal') ||
                PendapatanHarian::where('nominal', $invalidValue)->doesntExist()
            );
        }
    }

    public function test_date_input_validation()
    {
        // Test date input validation
        $this->actingAs($this->petugas);

        $invalidDates = [
            'not_a_date',
            '2024-13-45', // Invalid month/day
            '32/12/2024', // Wrong format
            '2024-02-30', // Invalid date
            '0000-00-00',
            'today',
            '2024/12/31', // Wrong separator
        ];

        foreach ($invalidDates as $invalidDate) {
            $pasienData = [
                'no_rekam_medis' => 'RM-DATE-' . uniqid(),
                'nama' => 'Test Patient',
                'tanggal_lahir' => $invalidDate,
                'jenis_kelamin' => 'L',
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should validate date format
            $this->assertTrue(
                $component->instance->getErrorBag()->has('tanggal_lahir') ||
                Pasien::where('tanggal_lahir', $invalidDate)->doesntExist()
            );
        }
    }

    public function test_email_input_validation()
    {
        // Test email validation
        $this->actingAs($this->petugas);

        $invalidEmails = [
            'not_an_email',
            '@domain.com',
            'user@',
            'user@.com',
            'user..name@domain.com',
            'user@domain',
            'user name@domain.com', // Space in email
            'user@domain..com',
        ];

        foreach ($invalidEmails as $invalidEmail) {
            $pasienData = [
                'no_rekam_medis' => 'RM-EMAIL-' . uniqid(),
                'nama' => 'Test Patient',
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'email' => $invalidEmail,
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should validate email format (if email validation is enforced)
            if ($component->instance->getErrorBag()->isEmpty()) {
                // If accepted, verify it was stored correctly
                $patient = Pasien::where('no_rekam_medis', $pasienData['no_rekam_medis'])->first();
                if ($patient && $patient->email) {
                    // Basic email format check
                    $this->assertStringContains('@', $patient->email);
                }
            }
        }
    }

    public function test_bulk_operation_input_validation()
    {
        // Test bulk operations with invalid data
        $this->actingAs($this->petugas);

        $mixedValidationData = [
            [
                'nama' => '<script>alert("xss")</script>',
                'no_rekam_medis' => 'RM-BULK-001',
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'input_by' => $this->petugas->id,
            ],
            [
                'nama' => "'; DROP TABLE pasien; --",
                'no_rekam_medis' => 'RM-BULK-002',
                'tanggal_lahir' => 'invalid-date',
                'jenis_kelamin' => 'X',
                'input_by' => $this->petugas->id,
            ],
            [
                'nama' => str_repeat('A', 5000), // Very long name
                'no_rekam_medis' => 'RM-BULK-003',
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
                'input_by' => $this->petugas->id,
            ],
        ];

        $result = $this->bulkService->bulkCreate(Pasien::class, $mixedValidationData, [
            'validate' => true
        ]);

        // Should handle validation errors in bulk
        $this->assertGreaterThan(0, $result['failed']);
        $this->assertNotEmpty($result['errors']);

        // Verify malicious data was not stored
        $this->assertDatabaseMissing('pasien', ['nama' => '<script>alert("xss")</script>']);
        $this->assertDatabaseMissing('pasien', ['nama' => "'; DROP TABLE pasien; --"]);
    }

    public function test_csrf_protection()
    {
        // Test CSRF protection on forms
        $this->actingAs($this->petugas);

        // This test verifies that CSRF tokens are required
        // Livewire should handle CSRF automatically, but we test it
        
        $pasienData = [
            'no_rekam_medis' => 'RM-CSRF-001',
            'nama' => 'CSRF Test Patient',
            'tanggal_lahir' => '1990-01-01',
            'jenis_kelamin' => 'L',
        ];

        // Normal request should work
        $component = Livewire::test(CreatePasien::class)
            ->fillForm($pasienData)
            ->call('create');

        $component->assertSuccessful();
    }

    public function test_mass_assignment_protection()
    {
        // Test mass assignment protection
        $this->actingAs($this->petugas);

        $maliciousData = [
            'no_rekam_medis' => 'RM-MASS-001',
            'nama' => 'Mass Assignment Test',
            'tanggal_lahir' => '1990-01-01',
            'jenis_kelamin' => 'L',
            'input_by' => 999, // Try to assign different user
            'id' => 999, // Try to assign specific ID
            'created_at' => '2020-01-01', // Try to assign created date
        ];

        $component = Livewire::test(CreatePasien::class)
            ->fillForm($maliciousData)
            ->call('create');

        if ($component->instance->getErrorBag()->isEmpty()) {
            $patient = Pasien::where('no_rekam_medis', 'RM-MASS-001')->first();
            if ($patient) {
                // Should not allow mass assignment of protected fields
                $this->assertEquals($this->petugas->id, $patient->input_by);
                $this->assertNotEquals(999, $patient->id);
                $this->assertNotEquals('2020-01-01', $patient->created_at->format('Y-m-d'));
            }
        }
    }

    public function test_unicode_and_encoding_attacks()
    {
        // Test Unicode and encoding attacks
        $this->actingAs($this->petugas);

        $encodingPayloads = [
            '%3Cscript%3Ealert%28%22xss%22%29%3C%2Fscript%3E', // URL encoded
            '&#60;script&#62;alert(&#34;xss&#34;)&#60;/script&#62;', // HTML entities
            '\u003cscript\u003ealert(\u0022xss\u0022)\u003c/script\u003e', // Unicode
            'javascript%3Aalert%28%22xss%22%29', // Encoded JavaScript
            'ĵăvascript:alert("xss")', // Unicode look-alike
        ];

        foreach ($encodingPayloads as $payload) {
            $pasienData = [
                'no_rekam_medis' => 'RM-UNI-' . uniqid(),
                'nama' => $payload,
                'tanggal_lahir' => '1990-01-01',
                'jenis_kelamin' => 'L',
            ];

            $component = Livewire::test(CreatePasien::class)
                ->fillForm($pasienData)
                ->call('create');

            // Should handle encoding attacks
            if ($component->instance->getErrorBag()->isEmpty()) {
                $patient = Pasien::where('no_rekam_medis', $pasienData['no_rekam_medis'])->first();
                if ($patient) {
                    // Should not contain decoded malicious content
                    $this->assertStringNotContains('<script>', $patient->nama);
                    $this->assertStringNotContains('javascript:', $patient->nama);
                }
            }
        }
    }

    public function test_business_logic_validation()
    {
        // Test business logic validation
        $this->actingAs($this->petugas);

        // Test future birth date
        $futureBirthData = [
            'no_rekam_medis' => 'RM-FUTURE-001',
            'nama' => 'Future Born Patient',
            'tanggal_lahir' => now()->addYears(1)->format('Y-m-d'),
            'jenis_kelamin' => 'L',
        ];

        $component = Livewire::test(CreatePasien::class)
            ->fillForm($futureBirthData)
            ->call('create');

        // Should validate business logic
        $this->assertTrue(
            $component->instance->getErrorBag()->has('tanggal_lahir') ||
            Pasien::where('no_rekam_medis', 'RM-FUTURE-001')->doesntExist()
        );

        // Test negative financial amounts (where applicable)
        $negativeAmountData = [
            'tanggal_input' => now()->format('Y-m-d'),
            'shift' => 'Pagi',
            'pendapatan_id' => $this->pendapatan->id,
            'nominal' => -100000, // Negative amount
            'deskripsi' => 'Test negative amount',
        ];

        $component2 = Livewire::test(CreatePendapatanHarian::class)
            ->fillForm($negativeAmountData)
            ->call('create');

        // Should validate negative amounts
        $this->assertTrue(
            $component2->instance->getErrorBag()->has('nominal') ||
            PendapatanHarian::where('nominal', -100000)->doesntExist()
        );
    }

    protected function tearDown(): void
    {
        parent::tearDown();
    }
}